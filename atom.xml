<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>语言</title>
  <subtitle>编程是一种美德，是促使一个人不断向上发展的一种原动力. . .</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://guochenglai.com/"/>
  <updated>2017-07-12T14:42:37.000Z</updated>
  <id>http://guochenglai.com/</id>
  
  <author>
    <name>guochenglai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac安装hadoop2.8.0详细教程</title>
    <link href="http://guochenglai.com/2017/06/30/mac-hadoop-config/"/>
    <id>http://guochenglai.com/2017/06/30/mac-hadoop-config/</id>
    <published>2017-06-30T15:24:22.000Z</published>
    <updated>2017-07-12T14:42:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>前一段时间看了几本hadoop和spark相关的书。没有实际编程总感觉理解不透彻。所以就在本地折腾了一下。把本地的环境搭建起来了。本文记录了我的详细操作步骤。希望能对读者有帮助。<br><a id="more"></a></p>
<h2 id="前期准备工作"><a href="#前期准备工作" class="headerlink" title="前期准备工作"></a>前期准备工作</h2><p>在搭建环境之前需要配置<code>ssh localhost</code>免密码登录。<br>操作步骤如下：<br>1 <code>System Preference --&gt; sharing --&gt; Remote Login</code>打开远程登录功能如下：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/201707121499868271991.jpg?imageView2/0/format/jpg" alt=""><br>2 配置免密码登录。<br>打开Terminal终端：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa ## 一路enter到底，不需要输入任何东西</div><div class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</div></pre></td></tr></table></figure>
<p>3 验证免密码登录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh localhost ## 如果不需要输入任何密码之间进入则说明配置成功。效果如下：</div></pre></td></tr></table></figure></p>
<p><img src="http://7xutce.com1.z0.glb.clouddn.com/20170712149986849120392.jpg?imageView2/0/format/jpg" alt=""></p>
<h2 id="hadoop的安装"><a href="#hadoop的安装" class="headerlink" title="hadoop的安装"></a>hadoop的安装</h2><p><font color="red">说明：本教程安装的是伪分布式模式。这也是本地测试最常用的模式。</font></p>
<h3 id="homebrew安装"><a href="#homebrew安装" class="headerlink" title="homebrew安装"></a>homebrew安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>
<h3 id="利用homebrew安装hadoop"><a href="#利用homebrew安装hadoop" class="headerlink" title="利用homebrew安装hadoop"></a>利用homebrew安装hadoop</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install hadoop</div></pre></td></tr></table></figure>
<p>安装完成之后hadoop的目录为：<br><code>/usr/local/Cellar/hadoop/2.8.0/libexec/etc/hadoop</code></p>
<h3 id="hadoop-env-sh文件修改"><a href="#hadoop-env-sh文件修改" class="headerlink" title="hadoop-env.sh文件修改"></a>hadoop-env.sh文件修改</h3><p><code>hadoop-env.sh</code>的配置文件路径为：<code>/usr/local/Cellar/hadoop/2.8.0/libexec/etc/hadoop/hadoop-env.sh</code><br>将HADOOP_OPTS由<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export HADOOP_OPTS=&quot;$HADOOP_OPTS -Djava.net.preferIPv4Stack=true&quot;</div></pre></td></tr></table></figure></p>
<p>修改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export HADOOP_OPTS=&quot;$HADOOP_OPTS -Djava.net.preferIPv4Stack=true -Djava.security.krb5.realm= -Djava.security.krb5.kdc=&quot;</div></pre></td></tr></table></figure></p>
<p>如下图所示<br><img src="http://7xutce.com1.z0.glb.clouddn.com/20170712149986889484976.jpg?imageView2/0/format/jpg" alt=""></p>
<h3 id="core-site-xml文件修改"><a href="#core-site-xml文件修改" class="headerlink" title="core-site.xml文件修改"></a>core-site.xml文件修改</h3><p><code>core-site.xml</code>文件的路径为：<code>/usr/local/Cellar/hadoop/2.8.0/libexec/etc/hadoop/core-site.xml</code><br>添加如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;  </div><div class="line">&lt;property&gt;</div><div class="line">     &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</div><div class="line">     &lt;value&gt;/usr/local/Cellar/hadoop/hdfs/tmp&lt;/value&gt;</div><div class="line">     &lt;description&gt;A base for other temporary directories.&lt;/description&gt;</div><div class="line">  &lt;/property&gt;</div><div class="line">  &lt;property&gt;</div><div class="line">     &lt;name&gt;fs.default.name&lt;/name&gt;                                     </div><div class="line">     &lt;value&gt;hdfs://localhost:9000&lt;/value&gt;                             </div><div class="line">  &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<p>截图如下：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/20170712149986912736507.jpg?imageView2/0/format/jpg" alt=""></p>
<h3 id="mapred-site-xml-template文件修改"><a href="#mapred-site-xml-template文件修改" class="headerlink" title="mapred-site.xml.template文件修改"></a>mapred-site.xml.template文件修改</h3><p><code>mapred-site.xml</code>文件的路径为：<code>/usr/local/Cellar/hadoop/2.8.0/libexec/etc/hadoop/mapred-site.xml.template</code><br>添加如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">&lt;property&gt;</div><div class="line">&lt;name&gt;mapred.job.tracker&lt;/name&gt;</div><div class="line">&lt;value&gt;localhost:9010&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<p>截图如下：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/20170712149986932184360.jpg?imageView2/0/format/jpg" alt=""></p>
<h3 id="core-site-xml文件修改-1"><a href="#core-site-xml文件修改-1" class="headerlink" title="core-site.xml文件修改"></a>core-site.xml文件修改</h3><p><code>hdfs-site.xml</code>文件的路径为：<code>/usr/local/Cellar/hadoop/2.8.0/libexec/etc/hadoop/hdfs-site.xml</code><br>添加如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">&lt;property&gt;</div><div class="line">&lt;name&gt;dfs.replication&lt;/name&gt;</div><div class="line">&lt;value&gt;1&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<p>截图如下：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/20170712149986940842054.jpg?imageView2/0/format/jpg" alt=""></p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>1 hadoop加入环境变量。<br>打开 <code>~/.bash_profile</code>文件。添加如下内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export HADOOP_HOME=&apos;/usr/local/Cellar/hadoop/2.8.0/&apos;</div><div class="line">export HADOOP=$HADOOP_HOME/bin</div><div class="line">export PATH=$PATH:$HADOOP</div></pre></td></tr></table></figure></p>
<p>2 配置启动快捷命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alias hstart=&apos;/usr/local/Cellar/hadoop/2.8.0/sbin/start-dfs.sh;/usr/local/Cellar/hadoop/2.8.0/sbin/start-yarn.sh&apos;</div><div class="line">alias hstop=&quot;/usr/local/Cellar/hadoop/2.8.0/sbin/stop-yarn.sh;/usr/local/Cellar/hadoop/2.8.0/sbin/stop-dfs.sh&quot;</div></pre></td></tr></table></figure></p>
<p>3 保存并执行<code>source ~/.bash_profile</code>使配置文件生效。</p>
<h3 id="初始化namenode"><a href="#初始化namenode" class="headerlink" title="初始化namenode"></a>初始化namenode</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hdfs namenode -format</div></pre></td></tr></table></figure>
<h2 id="常用的管控页面"><a href="#常用的管控页面" class="headerlink" title="常用的管控页面"></a>常用的管控页面</h2><ul>
<li>Resource Manager(资源管理): <a href="http://localhost:50070" target="_blank" rel="external">http://localhost:50070</a></li>
<li>JobTracker(任务跟踪器): <a href="http://localhost:8088" target="_blank" rel="external">http://localhost:8088</a></li>
<li>Specific Node Information(namenode管控): <a href="http://localhost:8042" target="_blank" rel="external">http://localhost:8042</a></li>
</ul>
<h2 id="Warn解决"><a href="#Warn解决" class="headerlink" title="Warn解决"></a>Warn解决</h2><p>1  <code>Unable to load native-hadoop library for your platform</code><br>一般在mac平台下面都会报如下错误。其实对使用没有任何影响。不解决也是可以的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform… using builtin-java classes where applicable</div></pre></td></tr></table></figure></p>
<p>解决这个问题的方法就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.1 下载源码</div><div class="line">1.2 本地编译</div><div class="line">1.3 替换lib文件</div></pre></td></tr></table></figure></p>
<p>参考链接： <a href="https://stackoverflow.com/questions/19943766/hadoop-unable-to-load-native-hadoop-library-for-your-platform-warning" target="_blank" rel="external">https://stackoverflow.com/questions/19943766/hadoop-unable-to-load-native-hadoop-library-for-your-platform-warning</a></p>
<p>2 <code>ls: ‘.’: No such file or directory</code><br>当执行<code>hdfs dfs -ls</code>的时候一般会报错<br><img src="http://7xutce.com1.z0.glb.clouddn.com/20170712149987017477695.jpg?imageView2/0/format/jpg" alt=""><br>解决办法：<br>1 <code>whoami</code><br><img src="http://7xutce.com1.z0.glb.clouddn.com/20170712149987041162275.jpg?imageView2/0/format/jpg" alt=""><br>2 <code>hdfs dfs -mkdir -p /user/guochenglai</code><br><img src="http://7xutce.com1.z0.glb.clouddn.com/20170712149987047257288.jpg?imageView2/0/format/jpg" alt=""></p>
<h2 id="关闭与启动"><a href="#关闭与启动" class="headerlink" title="关闭与启动"></a>关闭与启动</h2><h3 id="启动hadoop"><a href="#启动hadoop" class="headerlink" title="启动hadoop"></a>启动hadoop</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hstart ## 经过前面的配置终端执行这个就好</div></pre></td></tr></table></figure>
<h3 id="关闭hadoop"><a href="#关闭hadoop" class="headerlink" title="关闭hadoop"></a>关闭hadoop</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hstop ## 经过前面的配置终端执行这个就好</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前一段时间看了几本hadoop和spark相关的书。没有实际编程总感觉理解不透彻。所以就在本地折腾了一下。把本地的环境搭建起来了。本文记录了我的详细操作步骤。希望能对读者有帮助。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MySQL之5--SQL执行过程详解</title>
    <link href="http://guochenglai.com/2017/06/23/mysql5-sql-process-detail/"/>
    <id>http://guochenglai.com/2017/06/23/mysql5-sql-process-detail/</id>
    <published>2017-06-23T12:47:28.000Z</published>
    <updated>2017-07-02T13:48:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>从用户通过程序或者客户端向MySQL服务器发送一条SQL语句到用户接到这条SQL语句的执行结果，这中间MySQL数据库是怎样处理的呢？本文将揭开这个面纱。<a id="more"></a></p>
<h2 id="SQL处理流程"><a href="#SQL处理流程" class="headerlink" title="SQL处理流程"></a>SQL处理流程</h2><p>如下图是我画的一个MySQL数据处理流程的简易图。<br>(<a href="http://7xutce.com1.z0.glb.clouddn.com/20170702149900287638350.jpg?imageView2/0/format/jpg" target="_blank" rel="external">http://7xutce.com1.z0.glb.clouddn.com/20170702149900287638350.jpg?imageView2/0/format/jpg</a>)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从用户通过程序或者客户端向MySQL服务器发送一条SQL语句到用户接到这条SQL语句的执行结果，这中间MySQL数据库是怎样处理的呢？本文将揭开这个面纱。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vim技巧以及常用快捷键</title>
    <link href="http://guochenglai.com/2017/06/15/vim-guide/"/>
    <id>http://guochenglai.com/2017/06/15/vim-guide/</id>
    <published>2017-06-15T12:42:43.000Z</published>
    <updated>2017-07-02T13:38:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>vim其实就是对vi的扩展。如果用户使用MAC或者Linux系统。那么掌握一些VIM的常用技巧是比不可少的。<a id="more"></a></p>
<h2 id="VIM的三种模式"><a href="#VIM的三种模式" class="headerlink" title="VIM的三种模式"></a>VIM的三种模式</h2><p>VIM有三种模式：<code>一般模式</code>、<code>编辑模式</code>、<code>指令模式</code></p>
<ul>
<li>一般模式 ： VIM的默认模式，打开VIM首先进入的一般模式，在这个模式下，是不行执行任何操作的。他是编辑模式和指令模式的桥梁。一般模式进入编辑模式有以下几种方法：<br> 1 按键<code>i</code>:在光标当前行进入编辑模式<br> 2 按键<code>o</code>:在光标下一行进入编辑模式</li>
<li>编辑模式 ： 在编辑模式下可以对文本内容进行编辑</li>
<li>指令模式 ：指令模式可以执行相应的命令操作文本，也可以执行shell命令。</li>
</ul>
<h2 id="VIM的常用快捷键"><a href="#VIM的常用快捷键" class="headerlink" title="VIM的常用快捷键"></a>VIM的常用快捷键</h2><h3 id="一般模式下的常用快捷键"><a href="#一般模式下的常用快捷键" class="headerlink" title="一般模式下的常用快捷键"></a>一般模式下的常用快捷键</h3><table>
<thead>
<tr>
<th>功能</th>
<th>说明以及快捷键</th>
</tr>
</thead>
<tbody>
<tr>
<td>移到行首</td>
<td>按键<code>0</code>或者<code>^</code></td>
</tr>
<tr>
<td>移到行尾</td>
<td>按键<code>$</code></td>
</tr>
<tr>
<td>回退</td>
<td>按键<code>u</code></td>
</tr>
<tr>
<td>复制</td>
<td>按键<code>yy</code></td>
</tr>
<tr>
<td>粘贴</td>
<td>按键<code>p</code></td>
</tr>
<tr>
<td>移动到文档最后一行</td>
<td>按键<code>G</code></td>
</tr>
<tr>
<td>移到到文档第一行</td>
<td>按键<code>gg</code></td>
</tr>
<tr>
<td>删除光标当前行</td>
<td>按键<code>dd</code></td>
</tr>
<tr>
<td>当前行和下一行互换</td>
<td>按键<code>ddp</code></td>
</tr>
<tr>
<td>光标下移n行</td>
<td>按键<code>n+</code>例如<code>8+</code>就是光标下移8行</td>
</tr>
<tr>
<td>光标上移n行</td>
<td>按键<code>n-</code></td>
</tr>
</tbody>
</table>
<h3 id="命令模式常用快捷键"><a href="#命令模式常用快捷键" class="headerlink" title="命令模式常用快捷键"></a>命令模式常用快捷键</h3><p>在一般模式下，按键<code>:</code>进入命令模式</p>
<table>
<thead>
<tr>
<th>功能</th>
<th>说明以及快捷键</th>
</tr>
</thead>
<tbody>
<tr>
<td>显示行号</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;按键 <code>set num</code> <br><img src="http://7xutce.com1.z0.glb.clouddn.com/20170702149900167486191.jpg?imageView2/0/format/jpg" alt=""></td>
</tr>
<tr>
<td>取消显示行号</td>
<td>按键 <code>set nonu</code></td>
</tr>
<tr>
<td>退出不保存</td>
<td>按键<code>q!</code></td>
</tr>
<tr>
<td>退出保存</td>
<td>按键<code>wq</code></td>
</tr>
<tr>
<td>执行shell命令</td>
<td>按键<code>shell</code></td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vim其实就是对vi的扩展。如果用户使用MAC或者Linux系统。那么掌握一些VIM的常用技巧是比不可少的。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MySQL之4--Innodb锁分析</title>
    <link href="http://guochenglai.com/2017/05/28/mysql4-innode-lock/"/>
    <id>http://guochenglai.com/2017/05/28/mysql4-innode-lock/</id>
    <published>2017-05-28T04:40:41.000Z</published>
    <updated>2017-07-02T12:14:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在MySQL的默认存储引擎是InnoDB，其提供了一个很强大的功能就是行级锁。可以通过<code>show status like &#39;innodb_row_lock%&#39;;</code>来查看当前系统的行锁争用情况。如果<code>Innodb_row_lock_waits</code>和<code>Innodb_row_lock_time_avg</code>两个值比较高，则说明锁争用比较严重。<a id="more"></a></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>InnoDB提供了两种类型的行锁：</p>
<ul>
<li>共享锁：对于一行已经加了共享锁的记录，可以允许其他共享锁的存在，却不允许其他排他锁的存在。这个可以对比读锁来理解。<code>SELECT * FROM table WHERE id=1 LOCK IN SHARE MODE</code>。</li>
<li>排他锁：对于一行已经加了排他锁的记录。既不允许其他的共享锁存在，也不允许其他排他锁的存在。这个可以对比写锁来理解。<code>SELECT * FROM table WHERE id=1 FOR UPDATE</code>。<br>InnoDB行锁是通过对索引进行加锁来执行的，如果没有索引，InnoDB将通过隐藏的聚族索引来对记录进行加锁。InnoDB的行锁分为三种情况：</li>
<li>Record Lock ： 对唯一索引进行加锁。</li>
<li>Gap Lock ：对索引之间的间隙加锁</li>
<li>Next Key Lock ：是<code>Record Lock</code>和<code>Gap Lock</code>的合集。  <blockquote>
<font color="red">注意：如果对表的某一行没有任务索引的列进行加锁，那么并不会只对这一行加锁。而是对全表加锁</font>

</blockquote>
</li>
</ul>
<h2 id="加锁分析"><a href="#加锁分析" class="headerlink" title="加锁分析"></a>加锁分析</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> lock_test(</div><div class="line">   <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment ,</div><div class="line">   <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span> ,</div><div class="line">   age <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> ,</div><div class="line">   <span class="keyword">key</span>  <span class="string">`idx_name`</span>(<span class="string">`name`</span>)</div><div class="line">);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> lock_test(<span class="keyword">name</span>,age)<span class="keyword">values</span>(<span class="string">'gcl'</span>,<span class="number">26</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> lock_test(<span class="keyword">name</span>,age)<span class="keyword">values</span>(<span class="string">'lisi'</span>,<span class="number">54</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> lock_test(<span class="keyword">name</span>,age)<span class="keyword">values</span>(<span class="string">'ww'</span>,<span class="number">12</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> lock_test(<span class="keyword">name</span>,age)<span class="keyword">values</span>(<span class="string">'zl'</span>,<span class="number">9</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> lock_test(<span class="keyword">name</span>,age)<span class="keyword">values</span>(<span class="string">'sq'</span>,<span class="number">20</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> lock_test(<span class="keyword">name</span>,age)<span class="keyword">values</span>(<span class="string">'hh'</span>,<span class="number">18</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> lock_test(<span class="keyword">name</span>,age)<span class="keyword">values</span>(<span class="string">'zh'</span>,<span class="number">15</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> lock_test(<span class="keyword">name</span>,age)<span class="keyword">values</span>(<span class="string">'mm'</span>,<span class="number">23</span>);</div></pre></td></tr></table></figure>
<p>其中<code>id</code>字段加唯一索引。<code>name</code>字段加非唯一索引。age字段无索引。<img src="http://7xutce.com1.z0.glb.clouddn.com/20170611149719348577218.jpg?imageView2/0/format/jpg" alt=""></p>
<h3 id="共享锁与排它锁"><a href="#共享锁与排它锁" class="headerlink" title="共享锁与排它锁"></a>共享锁与排它锁</h3><p>建表语句如下：</p>
<table>
<thead>
<tr>
<th>session1</th>
<th>session2</th>
<th>session3</th>
</tr>
</thead>
<tbody>
<tr>
<td>set autocommit=0;</td>
<td>set autocommit=0;</td>
</tr>
<tr>
<td>对id=1的事物加共享锁<br>select * from lock_test where id = 1 lock in share mode;<br><img src="http://7xutce.com1.z0.glb.clouddn.com/20170611149719381531532.jpg?imageView2/0/format/jpg" alt=""></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>其他事物仍然可以对id=1的记录加共享锁<br>select * from lock_test where id = 1 lock in share mode;<br><img src="http://7xutce.com1.z0.glb.clouddn.com/20170611149719381531532.jpg?imageView2/0/format/jpg" alt=""></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>其他事物对id=1的记录加排它锁，则报错 <br> select * from lock_test where id = 1 for update; <br><img src="http://7xutce.com1.z0.glb.clouddn.com/20170611149719420864268.jpg?imageView2/0/format/jpg" alt=""></td>
</tr>
</tbody>
</table>
<h3 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h3><p>Innodb的行锁是通过索引来实现的，如果不通过索引检索数据，那么InnoDB将对表中的所有记录加锁，也就成了表锁。下面是<code>lock_test</code>表的索引说明：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/20170701149892161512984.jpg?imageView2/0/format/jpg" alt=""><br>表中数据如下：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/20170701149892174079518.jpg?imageView2/0/format/jpg" alt=""></p>
<table>
<thead>
<tr>
<th>session1</th>
<th>session2</th>
</tr>
</thead>
<tbody>
<tr>
<td>set autocommit = 0 ;</td>
<td>set autocommit = 0 ;</td>
</tr>
<tr>
<td>select * from lock_test where age=26 for update;</td>
<td>select * from lock_test where age=54 for update;</td>
</tr>
<tr>
<td><img src="http://7xutce.com1.z0.glb.clouddn.com/20170701149892211473432.jpg?imageView2/0/format/jpg" alt=""></td>
<td><img src="http://7xutce.com1.z0.glb.clouddn.com/20170701149892208294967.jpg?imageView2/0/format/jpg" alt=""></td>
</tr>
<tr>
<td>commit;</td>
<td>commit;</td>
</tr>
</tbody>
</table>
<p>因为age字段没有索引，所以session1的查询条件会对全表加索引，会发现在session1没有commit之前，session2会一直等待获取锁。</p>
<h3 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h3><table>
<thead>
<tr>
<th>session1</th>
<th>session2</th>
</tr>
</thead>
<tbody>
<tr>
<td>set autocommit = 0 ;</td>
<td>set autocommit = 0 ;</td>
</tr>
<tr>
<td>select * from lock_test where id=1 for update;</td>
<td>select * from lock_test where id=2 for update;</td>
</tr>
<tr>
<td><img src="http://7xutce.com1.z0.glb.clouddn.com/20170701149892238259829.jpg?imageView2/0/format/jpg" alt=""></td>
<td><img src="http://7xutce.com1.z0.glb.clouddn.com/20170701149892239918728.jpg?imageView2/0/format/jpg" alt=""> <br> <img src="http://7xutce.com1.z0.glb.clouddn.com/20170701149892242531700.jpg?imageView2/0/format/jpg" alt=""></td>
</tr>
<tr>
<td>commit;</td>
<td>commit;</td>
</tr>
</tbody>
</table>
<p>因为id字段是唯一索引，所以session1的查询条件id=1时候只会只第一条记录加锁，不会影响其他记录加锁。</p>
<h3 id="间隙锁"><a href="#间隙锁" class="headerlink" title="间隙锁"></a>间隙锁</h3><p>间隙锁是InnoDB中行锁的一种，但是这种锁锁住的却不止一行，他锁住的是多行，他的主要作用是为了防止幻读出现。当我们对数据库中不存在的一行记录加锁的时候，数据库就会扫描索引，向左扫描到第一个比给定参数小的值，向右扫描第一个比给定参数大的值，构建一个区间，然后对整个区间加锁。这就是间隙锁。</p>
<table>
<thead>
<tr>
<th>session1</th>
<th>session2</th>
</tr>
</thead>
<tbody>
<tr>
<td>set autocommit = 0 ;</td>
<td>set autocommit = 0 ;</td>
</tr>
<tr>
<td>select * from lock_test where name = ‘zi’ for update ;</td>
<td>insert into lock_test(name,age)values(‘zj’,17);</td>
</tr>
<tr>
<td><img src="http://7xutce.com1.z0.glb.clouddn.com/20170702149899538458775.jpg?imageView2/0/format/jpg" alt=""></td>
<td><img src="http://7xutce.com1.z0.glb.clouddn.com/20170702149899535471465.jpg?imageView2/0/format/jpg" alt=""></td>
</tr>
<tr>
<td>commit;</td>
<td>commit;</td>
</tr>
</tbody>
</table>
<p>在session1中我们对<code>name=&#39;zi&#39;</code>的记录加锁，但是这行记录并不存在，所以锁住区间是 <code>zh&lt;= name &lt;= zl</code> 中的所有记录。当插入<code>name=&#39;zj&#39;</code>记录时。在间隙锁的区间内。所以会出现插入获取不到锁而失败的情况。    </p>
<h3 id="Next-Key锁"><a href="#Next-Key锁" class="headerlink" title="Next Key锁"></a>Next Key锁</h3><p>当我们使用范围条件而不是相等条件检索数据，InnoDB会给符合条件的已有数据记录的索引加锁，而对于键值在条件内但是并不存在的记录，innoDB也会对这个间隙加锁。</p>
<table>
<thead>
<tr>
<th>session1</th>
<th>session2</th>
</tr>
</thead>
<tbody>
<tr>
<td>set autocommit = 0 ;</td>
<td>set autocommit = 0 ;</td>
</tr>
<tr>
<td>select * from lock_test where id=1 for update;</td>
<td>select * from lock_test where id=2 for update;</td>
</tr>
<tr>
<td><img src="http://7xutce.com1.z0.glb.clouddn.com/20170702149899441663827.jpg?imageView2/0/format/jpg" alt=""></td>
<td><img src="http://7xutce.com1.z0.glb.clouddn.com/20170702149899439255692.jpg?imageView2/0/format/jpg" alt=""></td>
</tr>
<tr>
<td>commit;</td>
<td>commit;</td>
</tr>
</tbody>
</table>
<p>在session1中我们对<code>&#39;ww&#39; &lt; name &lt; &#39;zz&#39;</code> 的记录加锁。则会对字典序在这之间的所有记录加锁。在session2中插入记录，则会导致插入失败，因为获取不到这记录之间的锁。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在MySQL的默认存储引擎是InnoDB，其提供了一个很强大的功能就是行级锁。可以通过&lt;code&gt;show status like &amp;#39;innodb_row_lock%&amp;#39;;&lt;/code&gt;来查看当前系统的行锁争用情况。如果&lt;code&gt;Innodb_row_lock_waits&lt;/code&gt;和&lt;code&gt;Innodb_row_lock_time_avg&lt;/code&gt;两个值比较高，则说明锁争用比较严重。
    
    </summary>
    
      <category term="MySQL" scheme="http://guochenglai.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://guochenglai.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL之3--MySQL索引优化、SQL优化、慢查询分析</title>
    <link href="http://guochenglai.com/2017/05/04/mysql3-index-anaysis/"/>
    <id>http://guochenglai.com/2017/05/04/mysql3-index-anaysis/</id>
    <published>2017-05-04T02:54:20.000Z</published>
    <updated>2017-07-02T12:17:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文基于Mysql5.6主要介绍了MySQL的索引分析工具–explain和profiling。并利用MySQL的索引分析工具，对MySQL的索引进行分析，通过观察MySQL索引分析的过程，可以看到常见的索引优化点，以及在使用索引的时候的常见问题。本文的最后部分介绍了MySQL的无效索引（什么时候你为这个字段添加了索引，但是却无法使用）…. </p>
<a id="more"></a>
<h2 id="配置环境说明"><a href="#配置环境说明" class="headerlink" title="配置环境说明"></a><em>配置环境说明</em></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Mysql的版本信息：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_explian_db_version.png" alt="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;操作系统版本信息：<br>  <img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_explain_system_version.png?imageView2/2/w/400" alt=""></p>
<h2 id="索引的分析"><a href="#索引的分析" class="headerlink" title="索引的分析"></a><em>索引的分析</em></h2><h3 id="数据的准备"><a href="#数据的准备" class="headerlink" title="数据的准备"></a><em>数据的准备</em></h3><h4 id="数据库的建表SQL"><a href="#数据库的建表SQL" class="headerlink" title="数据库的建表SQL"></a><em>数据库的建表SQL</em></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表的说明：id是自增主键，name是唯一索引，age 是非唯一索引，desc无索引。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`index_test`</span> (  </div><div class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增ID'</span>,  </div><div class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'名字'</span>,  </div><div class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,  </div><div class="line">  <span class="string">`desc`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'描述'</span>,  </div><div class="line">  <span class="string">`status`</span> tinyint(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'状态'</span>,  </div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),  </div><div class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`uniq_name`</span> (<span class="string">`name`</span>),  </div><div class="line">  <span class="keyword">KEY</span> <span class="string">`idx_age`</span> (<span class="string">`age`</span>)  </div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 ;</div></pre></td></tr></table></figure></p>
<h4 id="表中测试数据"><a href="#表中测试数据" class="headerlink" title="表中测试数据"></a><em>表中测试数据</em></h4><p><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_explian_test_data.png" alt=""></p>
<h3 id="索引的分析-1"><a href="#索引的分析-1" class="headerlink" title="索引的分析"></a><em>索引的分析</em></h3><h4 id="使用explain查看sql的执行计划"><a href="#使用explain查看sql的执行计划" class="headerlink" title="使用explain查看sql的执行计划"></a><em>使用explain查看sql的执行计划</em></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在MySQL中可以在sql前面加上explain语句，来显示该条SQL的执行计划，输出内容如下：<img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_explian.png" alt=""></p>
<h4 id="explain详解"><a href="#explain详解" class="headerlink" title="explain详解"></a><em>explain详解</em></h4><h5 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a><em>select_type</em></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;select_type表示查询语句的类型，取值主要有以下几种:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;simple：表示是简单的单表查询<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;primary：表示子查询的外表<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;derived：派生表的查询<br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_select_type_derived.png" alt="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subquery: 子查询的内部第一个SQL<br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_select_type_subquery.png" alt="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;union：表示union操作被连接的表<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;union result：表示连接操作之后的结果表<br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_select_type_union.png" alt="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;depend union 表示子查询中union语句<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;depend subquery 表示子查询中生成的结果<br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_select_type_dependent_subquery_union_union_all.png" alt=""> </p>
<h5 id="table"><a href="#table" class="headerlink" title="table"></a><em>table</em></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当前SQL查询涉及到的表的表名，<font color="red">注意:这里有时候是中间结果表的表名，MySQL会按照自己的规则生成</font></p>
<h5 id="type"><a href="#type" class="headerlink" title="type"></a><em>type</em></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type的取值在很大的程度上反应了SQL的执行性能。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;按照性能由高到底，type的取值依次为：NULL，system，const，eq_reg，ref，range，index，ALL<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>NULL 不用查表，速度最快</em><br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_explian_null.png" alt="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>system 当表中只有一条数据的时候 type为system</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>const 常数查询 一般是根据唯一键或者主键等值查询</em><br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_explain_const.png" alt="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>eq_reg 表连接的时候 在b表查询出来的结果在a表这中按照唯一索引值查询一行</em><br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_explian_eq_ref.png" alt="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>reg 非唯一索引查询</em><br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_explain_ref.png" alt="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>range 使用唯一索引返回扫描</em><br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_explian_range.png" alt="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>index 扫描整个索引文件，例如覆盖索引的查询，效率只是比全表查询略快，因为索引文件一般比数据文件小，所以一次读入内存的索引数据更多，这样磁盘IO就会更少</em><br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_explain_full_index.png" alt="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>All 表示全表扫描，是效率最低的一种查询</em></p>
<h5 id="possible-key"><a href="#possible-key" class="headerlink" title="possible key"></a><em>possible key</em></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表示可能使用的索引，显示的顺序与表连接的顺序无关。</p>
<h5 id="key"><a href="#key" class="headerlink" title="key"></a><em>key</em></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表示MySQL执行本条sql选的索引的名字，可以通过force idex 和 ignore index 来强制改变sql执行所需要的索引。</p>
<h5 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a><em>key_len</em></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表示该条索引的占用的自己树，是根据索引字段的类型计算出来的，<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例如:int(11)索引长度是4<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;varchar(128)并且编码是U8，索引长度的计算方法为 ： 128*3+2 </p>
<h5 id="ref"><a href="#ref" class="headerlink" title="ref"></a><em>ref</em></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表示使用哪个列从表中选择行，取值有科恩个是const</p>
<h5 id="rows"><a href="#rows" class="headerlink" title="rows"></a><em>rows</em></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表示执行该条SQL必须扫描的行数</p>
<h5 id="extra"><a href="#extra" class="headerlink" title="extra"></a><em>extra</em></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;包含了MySQL生成执行计划的详细信息：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;distinct 查找唯一值，一旦找到就不在继续查找了（暂时没有想好例子）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;record 没有找到理想的索引<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use file sort 使用外排来排序  效率比较低<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use index 使用覆盖索引返回数据，没有扫描表<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use tempoary 使用临时表来组合返回数据 效率较低<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use where 使用where条件过滤返回的数据，在MySQL的存储引擎层没有过滤完数据，只能在MySQL服务层去过滤数据</p>
<h4 id="profiling详解"><a href="#profiling详解" class="headerlink" title="profiling详解"></a><em>profiling详解</em></h4><h5 id="开启profiling"><a href="#开启profiling" class="headerlink" title="开启profiling"></a><em>开启profiling</em></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为profiling是比较消耗资源的，所以一般的MySQL默认都关闭了profiling功能，并且profiling只是针对当前session有效，目前不支持全局的profiling，可以通过如下的命令查看并开发profiling功能：<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">SELECT</span> @@profiling  <span class="comment">-- 返回的结果如果是0 表示当前的session的profiling功能是关闭的  </span></div><div class="line"><span class="keyword">set</span> profiling=<span class="number">1</span>  <span class="comment">-- 打开当前session的profiling功能</span></div></pre></td></tr></table></figure></p>
<h5 id="profiling的使用"><a href="#profiling的使用" class="headerlink" title="profiling的使用"></a><em>profiling的使用</em></h5><h6 id="查询当前session的profiling的概要信息"><a href="#查询当前session的profiling的概要信息" class="headerlink" title="查询当前session的profiling的概要信息"></a><em>查询当前session的profiling的概要信息</em></h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以使用 show profiles命令获取当前session所执行的sql的概要信息：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_profiling_show.png" alt=""></p>
<h6 id="profiling详解-1"><a href="#profiling详解-1" class="headerlink" title="profiling详解"></a><em>profiling详解</em></h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;profiling的语法如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SHOW</span> PROFILE [<span class="keyword">type</span> [, <span class="keyword">type</span>] ... ]  </div><div class="line">    [<span class="keyword">FOR</span> <span class="keyword">QUERY</span> n]  </div><div class="line">    [<span class="keyword">LIMIT</span> <span class="keyword">row_count</span> [<span class="keyword">OFFSET</span> <span class="keyword">offset</span>]]  </div><div class="line"><span class="keyword">type</span>:  </div><div class="line">    ALL  </div><div class="line">  | <span class="keyword">BLOCK</span> IO  </div><div class="line">  | <span class="keyword">CONTEXT</span> SWITCHES  </div><div class="line">  | CPU  </div><div class="line">  | IPC  </div><div class="line">  | <span class="keyword">MEMORY</span>  </div><div class="line">  | PAGE FAULTS  </div><div class="line">  | <span class="keyword">SOURCE</span>  </div><div class="line">  | SWAPS</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用示例：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_profiling.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;结果说明：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在使用profiling查看sql的详细执行计划的时候，主要关注的是前两列即：status和duration<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;status 表示sql的执行状态和 show full process list 查看到的状态一致<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;duration 表示每个状态执行的时间 可以看到sql的主要执行时间消耗在哪里<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其次需要关注的是cup，io,swap的详细信息<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cup表示 cpu的消耗时间<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swap表示机器的swap情况<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;io表示io的消耗情况</p>
<h2 id="无效索引"><a href="#无效索引" class="headerlink" title="无效索引"></a><em>无效索引</em></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在很多时候MySQL的表建立了索引，并且在查询条件中也使用了索引进行筛选，但是并不一定会使用到索引，例如下面的几种情况。</p>
<h3 id="筛选条件包含了隐式转换"><a href="#筛选条件包含了隐式转换" class="headerlink" title="筛选条件包含了隐式转换"></a><em>筛选条件包含了隐式转换</em></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面的例子中，name字段添加了唯一索引，但是name字段的类型是varchar类型的，而筛选添加时int类型，发生了隐式转换，所以走全表扫描。这里比较隐晦。在上周有一个项目分析酒店订单的时候，本来hive中的酒店订单包含了酒店项目的所有订单，订单id是varchar类型的，而我们需要统计QTA中参加某一个活动的订单，需要查询QTA的订单详情库，（QTA订单详情是hive中订单的子集）里面的订单ID是long类型的，最开始查询的时候就直接在一个表查询完后再另外一个表查询，结果看到一条简单的sql执行起来巨慢。最后分析原因就定位到了这个上面。<br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_explain_convert_all.png" alt=""></p>
<h3 id="不支持函数式索引"><a href="#不支持函数式索引" class="headerlink" title="不支持函数式索引"></a><em>不支持函数式索引</em></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;age字段上面添加了非唯一索引，但是使用了绝对值函数，所以age字段上面的索引就无法使用了。这个在处理日期的时候经常遇到这样的坑。<br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_explian_function_all.png" alt=""></p>
<h3 id="索引扫描的代价大于直接全表扫描"><a href="#索引扫描的代价大于直接全表扫描" class="headerlink" title="索引扫描的代价大于直接全表扫描"></a><em>索引扫描的代价大于直接全表扫描</em></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果只有索引过滤的数据比较少，那么会直接走全表扫描，因为使用索引的时候会先扫描一遍索引，然后根据扫描到的索引回表找到所需要的数据，这样扫描的效率其实更低，所以直接走全表扫描。<br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_explian_all_index.png" alt=""></p>
<h3 id="使用“-”前缀匹配的时候"><a href="#使用“-”前缀匹配的时候" class="headerlink" title="使用“%”前缀匹配的时候"></a><em>使用“%”前缀匹配的时候</em></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name字段添加了唯一索引 但是使用‘%’作为前缀匹配条件，所以不使用索引，直接走全表扫描。<br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_explian_all_like.png" alt=""></p>
<h3 id="复合索引非左前缀匹配"><a href="#复合索引非左前缀匹配" class="headerlink" title="复合索引非左前缀匹配"></a><em>复合索引非左前缀匹配</em></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在使用复合索引的时候 如果不是使用的左前缀筛选条件 则不会使用索引，还是会全表扫描。</p>
<h3 id="or筛选添加前后都有索引的时候才会走索引"><a href="#or筛选添加前后都有索引的时候才会走索引" class="headerlink" title="or筛选添加前后都有索引的时候才会走索引"></a><em>or筛选添加前后都有索引的时候才会走索引</em></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在使用or作为筛选条件的时候，or的前后筛选条件都必须添加索引 这样才能使用索引 否则 整条sql都无法使用索引。<br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_explain_all_or.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文基于Mysql5.6主要介绍了MySQL的索引分析工具–explain和profiling。并利用MySQL的索引分析工具，对MySQL的索引进行分析，通过观察MySQL索引分析的过程，可以看到常见的索引优化点，以及在使用索引的时候的常见问题。本文的最后部分介绍了MySQL的无效索引（什么时候你为这个字段添加了索引，但是却无法使用）…. &lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://guochenglai.com/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL之2--存储引擎选择与比较</title>
    <link href="http://guochenglai.com/2017/04/10/mysql2-engine/"/>
    <id>http://guochenglai.com/2017/04/10/mysql2-engine/</id>
    <published>2017-04-10T04:36:08.000Z</published>
    <updated>2017-06-04T11:39:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL和大多数数据库不同，MySQL中有一个存储引擎的概念，针对不同的存储需求用户可以选择不同的存储引擎。插件式的存储引擎是MySQL数据库的一个重要特征。用户可以基于此选择如何存储和索引数据… <a id="more"></a></p>
<h2 id="存储引擎概述"><a href="#存储引擎概述" class="headerlink" title="存储引擎概述"></a>存储引擎概述</h2><p>MySQL5.0之后提供了以下几种存储引擎<code>MyISAM</code>，<code>InnoDB</code>，<code>BDB</code>，<code>Memory</code>,<code>Merge</code>,<code>Example</code>,<code>NDB Cluster</code>,<code>CVS</code>,<code>Blackhole</code>,<code>Federated</code>，其中只有InnoDB和BDB存储引擎支持事物，其他的几种存储引擎。在创建表的时候如果不指定存储引擎，那么会使用默认的存储引擎。MySQL5.5之前默认使用MyIASM存储引擎。在MySQL5.5之后默认使用InnoDB存储引擎。<br>查看默认的存储引擎：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show variables like &apos;%table_type%&apos;;</div></pre></td></tr></table></figure></p>
<p>查看数据库所支持的所有存储引擎：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show engines \G;</div></pre></td></tr></table></figure></p>
<p>常用存储引擎对比：</p>
<table>
<thead>
<tr>
<th>特性</th>
<th>MyISAM</th>
<th>InnoDB</th>
<th>Memory</th>
</tr>
</thead>
<tbody>
<tr>
<td>是否支持事物</td>
<td>否</td>
<td>是</td>
<td>否</td>
</tr>
<tr>
<td>是否支持B树索引</td>
<td>是</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>锁粒度</td>
<td>表锁</td>
<td>行锁</td>
<td>表锁</td>
</tr>
<tr>
<td>是否支持外键</td>
<td>否</td>
<td>是</td>
<td>否</td>
</tr>
</tbody>
</table>
<h2 id="MyISAM详解"><a href="#MyISAM详解" class="headerlink" title="MyISAM详解"></a>MyISAM详解</h2><p>MyISAM存储引擎不支持事务。其优势是访问速度快。所以如果一个表对事务没有要求，并且以Select为主。那么使用MyISAM存储引擎是比较合适的。例如系统的配置信息。情报信息（恶意IP）等等。每张MyISAM表在磁盘上存储三个文件</p>
<ol>
<li>frm文件（表的定义文件）</li>
<li>MYD文件（表的数据存储文件）</li>
<li>MYI文件（表的索引存储文件）</li>
</ol>
<h2 id="InnoDB详解"><a href="#InnoDB详解" class="headerlink" title="InnoDB详解"></a>InnoDB详解</h2><p>现在MySQL默认都是使用InnoDB存储引擎。他提供了很多非常有用的功能例如：行锁、事物、外键约束、自增ID。但是相比MyISAM存储引擎他会占用更多的磁盘来保留数据和索引。<br>InnoDB的数据和索引的两种存储方式：</p>
<ul>
<li>使用共享表空间存储。这种存储方式中表结构保存在<code>.frm</code>文件中。数据文件保存在<code>innodb_data_home_dir</code>中。索引文件保存在<code>innodb_data_file_path</code>中。</li>
<li>使用多表存储空间。这种存储方式表结构保存在<code>.frm</code>文件中。表的数据和索引一起存储在<code>.idb</code>文件中。多表存储空间的文件没有大小限制。现在一般都配置使用多表空间存储。</li>
</ul>
<h2 id="Memory详解"><a href="#Memory详解" class="headerlink" title="Memory详解"></a>Memory详解</h2><p>Memory存储引擎的表数据文件存储于内存之中。但是表结构空间<code>.frm</code>文件存储于磁盘。他的优点是内存访问速度非常快，并且默认使用hash索引。缺点是一旦数据库关闭。表中的数据就会丢失。每个Memory类型的表都可以设置表数据量的大小。可以使用<code>max_heap_table_size</code>来配置。默认是16M。</p>
<h2 id="如何选择适合业务类型的存储引擎"><a href="#如何选择适合业务类型的存储引擎" class="headerlink" title="如何选择适合业务类型的存储引擎"></a>如何选择适合业务类型的存储引擎</h2><table>
<thead>
<tr>
<th>存储引擎</th>
<th>适应场景</th>
</tr>
</thead>
<tbody>
<tr>
<td>MyISAM</td>
<td>对事务的完整性要求不高，以查询和插入操作为主的需求</td>
</tr>
<tr>
<td>InnoDB</td>
<td>对事务支持有要求，要求数据的修改必须有一致性。除了查询和插入还有很大更新的需求</td>
</tr>
<tr>
<td>Memory</td>
<td>快速获取访问结果。表数据量比较小。不要求数据持久化</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL和大多数数据库不同，MySQL中有一个存储引擎的概念，针对不同的存储需求用户可以选择不同的存储引擎。插件式的存储引擎是MySQL数据库的一个重要特征。用户可以基于此选择如何存储和索引数据…
    
    </summary>
    
      <category term="MySQL" scheme="http://guochenglai.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://guochenglai.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL之1--MySQL事物隔离级别</title>
    <link href="http://guochenglai.com/2017/04/05/mysql1-isolation-level/"/>
    <id>http://guochenglai.com/2017/04/05/mysql1-isolation-level/</id>
    <published>2017-04-05T04:13:58.000Z</published>
    <updated>2017-06-04T10:26:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>看了一段时间的MySQL方面的书籍，想把看过的东西总结一下分享出来，一方面是希望可以和大家沟通交流，另一方面对自已也是一个总结升华的过程。<a id="more"></a><font color="red">注意：如果没有特殊说明本系列所有文章都是以Innodb存储引擎来说明。</font></p>
<h2 id="事物及其ACID属性"><a href="#事物及其ACID属性" class="headerlink" title="事物及其ACID属性"></a>事物及其ACID属性</h2><h3 id="事物的ACID"><a href="#事物的ACID" class="headerlink" title="事物的ACID"></a>事物的ACID</h3><p>事物是有一组SQL语句组成的逻辑处理单元，事物具有ACID四个属性。</p>
<ul>
<li>原子性：事物是一个原子操作单位，其对数据的修改要么全部执行，要么全部不执行。</li>
<li>一致性：在事物开始和完成时数据都必须保持一致的状态。可以这样理解。MySQL中的B+树索引缓存，和数据的存储，在事物开始前和结束后都是对应一致的。</li>
<li>隔离性：一个事物处理过程中的中间状态对另外一个事物是不可见的。</li>
<li>持久性：事物完成之后。修改的数据是持久性的，即使出现故障，数据也能持久性保存。</li>
</ul>
<h3 id="并发事物带来的问题"><a href="#并发事物带来的问题" class="headerlink" title="并发事物带来的问题"></a>并发事物带来的问题</h3><p>众所周知，MySQL的并发事物处理大大增加了数据库资源的利用率。但是同时也带来了如下的几个问题：</p>
<ul>
<li>丢失更新：当多个事物选择同一行进行更改时，由于每个事物都不知道其他事物的存在，就会发生丢失更新的问题。最后更新覆盖了其他事物的更新。</li>
<li>脏读：一个事物正在对一条记录做修改，在这个事物未提交之前，第二个事物也来读取这条记录。如果不加控制，第二个事物读取的数据就是脏数据。</li>
<li>不可重复读：一个事物读取某些数据之后，隔一段时间之后再次读取这些数据，却发现这些数据已经修改或者删除了。</li>
<li>幻读：一个事物按照相同的查询条件重复读取以前检索的数据，却发现获得的数据集不一样，因为有其他事物进行了数据的修改并提交了修改操作。</li>
</ul>
<h2 id="事物隔离级别"><a href="#事物隔离级别" class="headerlink" title="事物隔离级别"></a>事物隔离级别</h2><p>如上看到了并发修改带来的四个问题。“丢失更新”并不能单靠数据库来解决。这个应该是应用程序的事情。必须由应用程序来应用程序通过加锁来解决。而“脏读”、“不可重复读”、“幻读”，都是数据库读一致性的问题，需数据库提供。不同的事物隔离级别，效率不同，带来的并发问题也不一样。</p>
<h3 id="数据库准备"><a href="#数据库准备" class="headerlink" title="数据库准备"></a>数据库准备</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> translation_test(</div><div class="line">   <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment primary <span class="keyword">key</span> <span class="keyword">comment</span> <span class="string">'自增ID'</span>,</div><div class="line">   <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">32</span>)  <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'姓名'</span>,</div><div class="line">   age <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'年龄'</span></div><div class="line">) <span class="keyword">engine</span>=<span class="keyword">InnoDB</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8mb4 ;</div><div class="line"></div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> translation_test(<span class="keyword">name</span>,age)<span class="keyword">values</span>(<span class="string">'zhangsan'</span>,<span class="number">22</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> translation_test(<span class="keyword">name</span>,age)<span class="keyword">values</span>(<span class="string">'lisi'</span>,<span class="number">20</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> translation_test(<span class="keyword">name</span>,age)<span class="keyword">values</span>(<span class="string">'wangwu'</span>,<span class="number">26</span>);</div></pre></td></tr></table></figure>
<p>表中数据如下：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/2017060414965459195438.jpg?imageView2/0/format/jpg" alt=""></p>
<h3 id="Read-UnCommitted："><a href="#Read-UnCommitted：" class="headerlink" title="Read UnCommitted："></a>Read UnCommitted：</h3><p>由于MySQL默认的事物隔离级别是Repeatable Read。所以这里首先将MySQL的事物隔离级别设置为<code>Read UnCommitted</code>。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SET</span> <span class="keyword">session</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> <span class="keyword">read</span> uncommitted;</div></pre></td></tr></table></figure></p>
<h4 id="Read-UnCommitted脏读问题"><a href="#Read-UnCommitted脏读问题" class="headerlink" title="Read UnCommitted脏读问题"></a>Read UnCommitted脏读问题</h4><table>
<thead>
<tr>
<th>事务A</th>
<th>事务B</th>
</tr>
</thead>
<tbody>
<tr>
<td>begin;</td>
<td>begin;</td>
</tr>
<tr>
<td>update translation_test set age = 0 where id = 1; <br> select * from translation_test where id =1; <br> <img src="http://7xutce.com1.z0.glb.clouddn.com/20170604149654611215351.jpg?imageView2/0/format/jpg" alt=""></td>
<td>select * from translation_test where id =1; <br><img src="http://7xutce.com1.z0.glb.clouddn.com/20170604149654617147485.jpg?imageView2/0/format/jpg" alt=""></td>
</tr>
<tr>
<td>commit;</td>
<td>commit;</td>
</tr>
</tbody>
</table>
<p>以上代码的处理逻辑是：</p>
<ol>
<li>打开两个MySQL的终端，修改当前session的事务隔离级别为：Read Uncommit。</li>
<li>在事务A中执行修改ID为1的记录的数据，并执行查询。在事务B中查询ID为1的记录的数据。</li>
<li>提交两个事务。<br><code>这里事物B查询到了事务A未提交的数据。所以Read UnCommitted 会出现脏读</code> </li>
</ol>
<h4 id="Read-UnCommitted幻读问题"><a href="#Read-UnCommitted幻读问题" class="headerlink" title="Read UnCommitted幻读问题"></a>Read UnCommitted幻读问题</h4><table>
<thead>
<tr>
<th>事物A</th>
<th>事物B </th>
</tr>
</thead>
<tbody>
<tr>
<td>begin;</td>
<td>begin;</td>
</tr>
<tr>
<td>select * from translation_test where age=20;<br> <img src="http://7xutce.com1.z0.glb.clouddn.com/2017060414965609691303.jpg?imageView2/0/format/jpg" alt=""></td>
<td></td>
</tr>
<tr>
<td></td>
<td>insert into translation_test(name,age)values(‘gcl’,20);</td>
</tr>
<tr>
<td>select * from translation_test where age=20;<br> <img src="http://7xutce.com1.z0.glb.clouddn.com/2017060414965609691303.jpg?imageView2/0/format/jpg" alt=""></td>
<td>select * from translation_test where age=20;<br> <img src="http://7xutce.com1.z0.glb.clouddn.com/20170604149656108365085.jpg?imageView2/0/format/jpg" alt=""></td>
</tr>
<tr>
<td></td>
<td>commit;</td>
</tr>
<tr>
<td>select * from translation_test where age=20;<br> <img src="http://7xutce.com1.z0.glb.clouddn.com/20170604149656108365085.jpg?imageView2/0/format/jpg" alt=""></td>
<td></td>
</tr>
<tr>
<td>commit;</td>
<td></td>
</tr>
</tbody>
</table>
<p><code>可以看到在事物A中两次执行同一个SQL，但是得到的结果并不一样。这是因为事物B提交了Insert事物。所以Read UnCommitted会出现幻读</code></p>
<h4 id="Read-UnCommitted不可重复读问题"><a href="#Read-UnCommitted不可重复读问题" class="headerlink" title="Read UnCommitted不可重复读问题"></a>Read UnCommitted不可重复读问题</h4><table>
<thead>
<tr>
<th>事物A</th>
<th>事物B </th>
</tr>
</thead>
<tbody>
<tr>
<td>begin;</td>
<td>begin;</td>
</tr>
<tr>
<td>select * from translation_test where age =20 ; <br> <img src="http://7xutce.com1.z0.glb.clouddn.com/20170604149654955855189.jpg?imageView2/0/format/jpg" alt=""></td>
<td></td>
</tr>
<tr>
<td></td>
<td>update translation_test set age =21 where id =1;</td>
</tr>
<tr>
<td></td>
<td>commit;</td>
</tr>
<tr>
<td> select * from translation_test where age =20 ;<br> <img src="http://7xutce.com1.z0.glb.clouddn.com/20170604149654969574883.jpg?imageView2/0/format/jpg" alt=""></td>
<td></td>
</tr>
<tr>
<td> commit;</td>
<td></td>
</tr>
</tbody>
</table>
<p><code>可以看到在事物A中两次执行同一个SQL，但是得到的结果并不一样。这是因为事物B提交了Update事物。所以Read UnCommitted会出现不可重复读问题</code></p>
<font color="red">说明：<br>好多人不能区分幻读和不可重复读。其实区分情况很简单，幻读主要是针对Insert的情况。不可重复读主要是针对Update和Delete情况 </font>

<h3 id="Read-Committed："><a href="#Read-Committed：" class="headerlink" title="Read Committed："></a>Read Committed：</h3><p>设置事务的隔离级别为<code>Read Committed</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SET</span> <span class="keyword">session</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> <span class="keyword">read</span> committed;</div></pre></td></tr></table></figure></p>
<h4 id="Read-Committed脏读问题"><a href="#Read-Committed脏读问题" class="headerlink" title="Read Committed脏读问题"></a>Read Committed脏读问题</h4><table>
<thead>
<tr>
<th>事务A</th>
<th>事务B</th>
</tr>
</thead>
<tbody>
<tr>
<td>begin;</td>
<td>begin;</td>
</tr>
<tr>
<td>update translation_test set age = -1 where id = 1; <br> select * from translation_test where id =1; <br> <img src="http://7xutce.com1.z0.glb.clouddn.com/20170604149654676644212.jpg?imageView2/0/format/jpg" alt=""></td>
<td>select * from translation_test where id =1; <br><img src="http://7xutce.com1.z0.glb.clouddn.com/20170604149654681787849.jpg?imageView2/0/format/jpg" alt=""></td>
</tr>
<tr>
<td>commit;</td>
<td>commit;</td>
</tr>
</tbody>
</table>
<p><code>这里事物B查询不到事务A未提交的数据。所以Read Committed 不会出现脏读</code></p>
<h4 id="Read-Committed幻读问题"><a href="#Read-Committed幻读问题" class="headerlink" title="Read Committed幻读问题"></a>Read Committed幻读问题</h4><table>
<thead>
<tr>
<th>事物A</th>
<th>事物B </th>
</tr>
</thead>
<tbody>
<tr>
<td>begin;</td>
<td>begin;</td>
</tr>
<tr>
<td>select * from translation_test where age=20;<br> <img src="http://7xutce.com1.z0.glb.clouddn.com/2017060414965609691303.jpg?imageView2/0/format/jpg" alt=""></td>
<td></td>
</tr>
<tr>
<td></td>
<td>insert into translation_test(name,age)values(‘gcl’,20);</td>
</tr>
<tr>
<td>select * from translation_test where age=20;<br> <img src="http://7xutce.com1.z0.glb.clouddn.com/2017060414965609691303.jpg?imageView2/0/format/jpg" alt=""></td>
<td>select * from translation_test where age=20;<br> <img src="http://7xutce.com1.z0.glb.clouddn.com/20170604149656108365085.jpg?imageView2/0/format/jpg" alt=""></td>
</tr>
<tr>
<td></td>
<td>commit;</td>
</tr>
<tr>
<td>select * from translation_test where age=20;<br> <img src="http://7xutce.com1.z0.glb.clouddn.com/20170604149656108365085.jpg?imageView2/0/format/jpg" alt=""></td>
<td></td>
</tr>
<tr>
<td>commit;</td>
<td></td>
</tr>
</tbody>
</table>
<p><code>可以看到在事物A中两次执行同一个SQL，但是得到的结果并不一样。这是因为事物B提交了Insert事物。所以Read Committed会出现幻读</code></p>
<h4 id="Read-Committed不可重复读问题"><a href="#Read-Committed不可重复读问题" class="headerlink" title="Read Committed不可重复读问题"></a>Read Committed不可重复读问题</h4><p>为了更好演示不可重复读的情况。我们将数据修改如下。<br><img src="http://7xutce.com1.z0.glb.clouddn.com/20170604149654784981410.jpg?imageView2/0/format/jpg" alt=""><br>事物A | 事物B<br>—|—<br>begin; | begin;<br>select <em> from translation_test where age =20 ; <br> <img src="http://7xutce.com1.z0.glb.clouddn.com/20170604149654955855189.jpg?imageView2/0/format/jpg" alt="">|<br> | update translation_test set age =21 where id =1;<br> | commit;<br> select </em> from translation_test where age =20 ;<br> <img src="http://7xutce.com1.z0.glb.clouddn.com/20170604149654969574883.jpg?imageView2/0/format/jpg" alt="">|<br> commit;|<br><code>可以看到在事物A中两次执行同一个SQL，但是得到的结果并不一样。这是因为事物B提交了Update事务。所以ReadCommit会出现不可重复读问题。</code></p>
<h3 id="Repeatable-Read："><a href="#Repeatable-Read：" class="headerlink" title="Repeatable Read："></a>Repeatable Read：</h3><p>设置事物的隔离级别为<code>Repeatable Read</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SET</span> <span class="keyword">session</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> repeatable <span class="keyword">read</span>;</div></pre></td></tr></table></figure></p>
<h4 id="Repeatable-Read脏读问题"><a href="#Repeatable-Read脏读问题" class="headerlink" title="Repeatable Read脏读问题"></a>Repeatable Read脏读问题</h4><table>
<thead>
<tr>
<th>事务A</th>
<th>事务B</th>
</tr>
</thead>
<tbody>
<tr>
<td>begin;</td>
<td>begin;</td>
</tr>
<tr>
<td>update translation_test set age = -1 where id = 1; <br> select * from translation_test where id =1; <br> <img src="http://7xutce.com1.z0.glb.clouddn.com/20170604149654676644212.jpg?imageView2/0/format/jpg" alt=""></td>
<td>select * from translation_test where id =1; <br><img src="http://7xutce.com1.z0.glb.clouddn.com/20170604149654681787849.jpg?imageView2/0/format/jpg" alt=""></td>
</tr>
<tr>
<td>commit;</td>
<td>commit;</td>
</tr>
</tbody>
</table>
<p><code>这里事物B查询不到事务A未提交的数据。所以Repeatable Read 不会出现脏读</code></p>
<h4 id="Repeatable-Read幻读问题"><a href="#Repeatable-Read幻读问题" class="headerlink" title="Repeatable Read幻读问题"></a>Repeatable Read幻读问题</h4><table>
<thead>
<tr>
<th>事物A</th>
<th>事物B </th>
</tr>
</thead>
<tbody>
<tr>
<td>begin;</td>
<td>begin;</td>
</tr>
<tr>
<td>select * from translation_test where age=20;<br> <img src="http://7xutce.com1.z0.glb.clouddn.com/2017060414965609691303.jpg?imageView2/0/format/jpg" alt=""></td>
<td></td>
</tr>
<tr>
<td></td>
<td>insert into translation_test(name,age)values(‘gcl’,20);</td>
</tr>
<tr>
<td>select * from translation_test where age=20;<br> <img src="http://7xutce.com1.z0.glb.clouddn.com/2017060414965609691303.jpg?imageView2/0/format/jpg" alt=""></td>
<td>select * from translation_test where age=20;<br> <img src="http://7xutce.com1.z0.glb.clouddn.com/20170604149656108365085.jpg?imageView2/0/format/jpg" alt=""></td>
</tr>
<tr>
<td></td>
<td>commit;</td>
</tr>
<tr>
<td>select * from translation_test where age=20;<br> <img src="http://7xutce.com1.z0.glb.clouddn.com/20170604149656108365085.jpg?imageView2/0/format/jpg" alt=""></td>
<td></td>
</tr>
<tr>
<td>commit;</td>
<td></td>
</tr>
</tbody>
</table>
<p><code>可以看到在事物A中两次执行同一个SQL，但是得到的结果并不一样。这是因为事物B提交了Insert事物。所以Repeatable Read会出现幻读</code></p>
<h4 id="Repeatable-Read不可重复读问题"><a href="#Repeatable-Read不可重复读问题" class="headerlink" title="Repeatable Read不可重复读问题"></a>Repeatable Read不可重复读问题</h4><table>
<thead>
<tr>
<th>事物A</th>
<th>事物B </th>
</tr>
</thead>
<tbody>
<tr>
<td>begin;</td>
<td>begin;</td>
</tr>
<tr>
<td>select * from translation_test where age =20 ; <br> <img src="http://7xutce.com1.z0.glb.clouddn.com/20170604149654955855189.jpg?imageView2/0/format/jpg" alt=""></td>
<td></td>
</tr>
<tr>
<td></td>
<td>update translation_test set age =21 where id =1;</td>
</tr>
<tr>
<td></td>
<td>commit;</td>
</tr>
<tr>
<td> select * from translation_test where age =20 ;<br> <img src="http://7xutce.com1.z0.glb.clouddn.com/20170604149654969574883.jpg?imageView2/0/format/jpg" alt=""></td>
<td></td>
</tr>
<tr>
<td> commit;</td>
<td></td>
</tr>
</tbody>
</table>
<p><code>可以看到在事物A中两次执行同一个SQL，但是得到的结果是不一样的。所以Repeatable Read 不会出现不可重复读问题（不可重复读就是为了解决这个问题）。</code></p>
<h3 id="Serializable："><a href="#Serializable：" class="headerlink" title="Serializable："></a>Serializable：</h3><p>Serializable事物隔离级别中。所有的事物都串行执行。这种情况下，不会出现并发事物带来的问题。但是效率也是最低的。</p>
<h2 id="事物隔离级别问题总结"><a href="#事物隔离级别问题总结" class="headerlink" title="事物隔离级别问题总结"></a>事物隔离级别问题总结</h2><table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读（Dirty Read）</th>
<th>不可重复读（NonRepeatable Read）</th>
<th>幻读（Phantom Read）  </th>
</tr>
</thead>
<tbody>
<tr>
<td>未提交读（Read uncommitted）</td>
<td>可能</td>
<td>可能</td>
<td>可能</td>
</tr>
<tr>
<td>已提交读（Read committed）</td>
<td>不可能</td>
<td>可能</td>
<td>可能</td>
</tr>
<tr>
<td>可重复读（Repeatable read）</td>
<td>不可能</td>
<td>不可能</td>
<td>可能</td>
</tr>
<tr>
<td>可串行化（Serializable ）</td>
<td>不可能</td>
<td>不可能</td>
<td>不可能</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看了一段时间的MySQL方面的书籍，想把看过的东西总结一下分享出来，一方面是希望可以和大家沟通交流，另一方面对自已也是一个总结升华的过程。
    
    </summary>
    
      <category term="MySQL" scheme="http://guochenglai.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://guochenglai.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>javafx打包为执行的exe/dmg文件</title>
    <link href="http://guochenglai.com/2017/02/17/javafx-deploy-exe-dmg-file/"/>
    <id>http://guochenglai.com/2017/02/17/javafx-deploy-exe-dmg-file/</id>
    <published>2017-02-17T13:32:02.000Z</published>
    <updated>2017-05-29T12:45:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>Java具有一次编写导出运行的特点，而新一代的Java桌面支持程序JavaFx，更是将这种支持方式表现到了极致。我们可以将我们编写的JavaFx程序打包成直接可运行的程序。这种打包方式，会将本平台的JDK也一同打包入可执行的程序。也就是说这种打包的程序在没有JDK的环境也照样运行。  </p>
<a id="more"></a>
<h2 id="打包方法"><a href="#打包方法" class="headerlink" title="打包方法"></a>打包方法</h2><p>网上了使用Ant打包的方法，这种方式古老又不方便。下面提供一种简单的方式。 </p>
<ol>
<li>添加打包依赖的maven项目</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">&lt;!--  这个plugin得作用是将依赖的jar包都打入可执行的程序 --&gt;  </div><div class="line"></div><div class="line">&lt;plugin&gt;  </div><div class="line"></div><div class="line">    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  </div><div class="line"></div><div class="line">    &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;  </div><div class="line"></div><div class="line">        &lt;version&gt;2.10&lt;/version&gt;  </div><div class="line"></div><div class="line">        &lt;executions&gt;  </div><div class="line"></div><div class="line">            &lt;execution&gt;  </div><div class="line"></div><div class="line">                &lt;id&gt;copy-dependencies&lt;/id&gt;  </div><div class="line"></div><div class="line">                &lt;phase&gt;package&lt;/phase&gt;  </div><div class="line"></div><div class="line">                &lt;configuration&gt;  </div><div class="line"></div><div class="line">                    &lt;overWriteReleases&gt;false&lt;/overWriteReleases&gt;  </div><div class="line"></div><div class="line">                    &lt;overWriteSnapshots&gt;false&lt;/overWriteSnapshots&gt;  </div><div class="line"></div><div class="line">                    &lt;overWriteIfNewer&gt;true&lt;/overWriteIfNewer&gt;  </div><div class="line"></div><div class="line">                &lt;/configuration&gt;  </div><div class="line"></div><div class="line">                &lt;goals&gt;  </div><div class="line"></div><div class="line">                    &lt;goal&gt;copy-dependencies&lt;/goal&gt;  </div><div class="line"></div><div class="line">                &lt;/goals&gt;  </div><div class="line"></div><div class="line">            &lt;/execution&gt;  </div><div class="line"></div><div class="line">        &lt;/executions&gt;  </div><div class="line"></div><div class="line">&lt;/plugin&gt;  </div><div class="line"></div><div class="line">&lt;plugin&gt;  </div><div class="line"></div><div class="line">    &lt;groupId&gt;com.zenjava&lt;/groupId&gt;  </div><div class="line"></div><div class="line">    &lt;artifactId&gt;javafx-maven-plugin&lt;/artifactId&gt;  </div><div class="line"></div><div class="line">    &lt;version&gt;8.8.3&lt;/version&gt;  </div><div class="line"></div><div class="line">    &lt;configuration&gt;  </div><div class="line"></div><div class="line">        &lt;!-- 指明javafx的入口类 --&gt;  </div><div class="line"></div><div class="line">        &lt;mainClass&gt;net.gcl.ticket.ui.Main&lt;/mainClass&gt;  </div><div class="line"></div><div class="line">        &lt;!-- 我是在MAC系统进行打包所以这里是dmg文件 --&gt;  </div><div class="line"></div><div class="line">        &lt;bundler&gt;dmg&lt;/bundler&gt;  </div><div class="line"></div><div class="line">        &lt;!-- 指明打包后文件的存储位置 --&gt;  </div><div class="line"></div><div class="line">        &lt;jfxAppOutputDir&gt;$&#123;project.build.directory&#125;/app&lt;/jfxAppOutputDir&gt;  </div><div class="line"></div><div class="line">        &lt;nativeOutputDir&gt;$&#123;project.build.directory&#125;/native&lt;/nativeOutputDir&gt;  </div><div class="line"></div><div class="line">        &lt;appName&gt;Ticket&lt;/appName&gt;  </div><div class="line"></div><div class="line">        &lt;vendor&gt;net.gcl.ticket&lt;/vendor&gt;  </div><div class="line"></div><div class="line">    &lt;/configuration&gt;  </div><div class="line"></div><div class="line">&lt;/plugin&gt;</div></pre></td></tr></table></figure>
<ol>
<li>执行打包命令：</li>
</ol>
<pre><code class="java">mvn jfx:<span class="keyword">native</span>
</code></pre>
<p>dmg文件就会打包到指定的文件目录，不过我试了几次有时候在桌面，可能是intellij的bug吧。但是打包肯定成功，程序可以直接运行 </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java具有一次编写导出运行的特点，而新一代的Java桌面支持程序JavaFx，更是将这种支持方式表现到了极致。我们可以将我们编写的JavaFx程序打包成直接可运行的程序。这种打包方式，会将本平台的JDK也一同打包入可执行的程序。也就是说这种打包的程序在没有JDK的环境也照样运行。  &lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://guochenglai.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://guochenglai.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>java并发编程之11——Future/ListenableFuture</title>
    <link href="http://guochenglai.com/2017/02/13/java-concurrent11-future-listenablefuture/"/>
    <id>http://guochenglai.com/2017/02/13/java-concurrent11-future-listenablefuture/</id>
    <published>2017-02-13T13:20:48.000Z</published>
    <updated>2017-07-02T12:18:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>Java在最初的多线程实现程序<code>Thread</code>、<code>Runnable</code>之中，是没有返回值的。这样的接口带来了很多处理多线程程序的不便。所以后来又引入了<code>Callable</code>接口，以及与之对应的<code>Future</code>接口。这样我们的多线程程序提交到线程池执行的时候就可以返回一个<code>Future</code>对象。然后调用<code>Future.get()</code>就可以获取线程的返回值。<a id="more"></a>  </p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>下面的两个例子给出了。多线程获取返回值的两种实现方式。一个是Java自己提供的原生Future，另外一个是Guava提供的封装接口ListenableFuture。 </p>
<h3 id="Java之Future示例"><a href="#Java之Future示例" class="headerlink" title="Java之Future示例"></a>Java之Future示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> <span class="comment">/*    </span></div><div class="line"> * Created by guochenglai on 2/13/17.  </div><div class="line"> */  </div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTest</span> </span>&#123;  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line"></div><div class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">3</span>);  </div><div class="line"></div><div class="line">        Future&lt;Cinema&gt; addressFuture = executorService.submit(<span class="keyword">new</span> Callable&lt;Cinema&gt;() &#123;  </div><div class="line"></div><div class="line">            <span class="meta">@Override</span>  </div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">public</span> Cinema <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line"></div><div class="line">                <span class="keyword">return</span> Cinema;  </div><div class="line"></div><div class="line">            &#125;  </div><div class="line"></div><div class="line">        &#125;);  </div><div class="line"></div><div class="line">        Future&lt;Movie&gt; movieFuture = executorService.submit(<span class="keyword">new</span> Callable&lt;Movie&gt;() &#123;  </div><div class="line"></div><div class="line">            <span class="meta">@Override</span>  </div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">public</span> Movie <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line"></div><div class="line">                <span class="keyword">return</span> Movie;  </div><div class="line"></div><div class="line">            &#125;  </div><div class="line"></div><div class="line">        &#125;);  </div><div class="line"></div><div class="line">        Cinema cinema = CiaddressFuture.get();  </div><div class="line"></div><div class="line">        Movie movie = movieFuture.get();  </div><div class="line"></div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Guava之ListenableFuture示例"><a href="#Guava之ListenableFuture示例" class="headerlink" title="Guava之ListenableFuture示例"></a>Guava之ListenableFuture示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> <span class="comment">/*    </span></div><div class="line"> * Created by guochenglai on 2/23/17.      </div><div class="line"> */  </div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListenableFutureTest</span> </span>&#123;  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line"></div><div class="line">        ListeningExecutorService executorService = MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(<span class="number">3</span>));  </div><div class="line"></div><div class="line">        ListenableFuture&lt;Cinema&gt; cinemaListenableFuture = executorService.submit(<span class="keyword">new</span> Callable&lt;Cinema&gt;() &#123;  </div><div class="line"></div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> Cinema <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line"></div><div class="line">                <span class="keyword">return</span> cinema;  </div><div class="line"></div><div class="line">            &#125;  </div><div class="line"></div><div class="line">        &#125;);  </div><div class="line"></div><div class="line">        Futures.addCallback(cinemaListenableFuture, <span class="keyword">new</span> FutureCallback&lt;Cinema&gt;() &#123;  </div><div class="line"></div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Cinema cinema)</span> </span>&#123;  </div><div class="line"></div><div class="line">            &#125;  </div><div class="line"></div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable throwable)</span> </span>&#123;  </div><div class="line"></div><div class="line">            &#125;  </div><div class="line"></div><div class="line">        &#125;);  </div><div class="line"></div><div class="line">  </div><div class="line"></div><div class="line">        ListenableFuture&lt;Movie&gt; movieListenableFuture = executorService.submit(<span class="keyword">new</span> Callable&lt;Movie&gt;() &#123;  </div><div class="line"></div><div class="line">            <span class="meta">@Override</span>  </div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">public</span> Movie <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line"></div><div class="line">                  </div><div class="line"></div><div class="line">                <span class="keyword">return</span> movie;  </div><div class="line"></div><div class="line">            &#125;  </div><div class="line"></div><div class="line">        &#125;);  </div><div class="line"></div><div class="line">        Futures.addCallback(movieListenableFuture, <span class="keyword">new</span> FutureCallback&lt;Movie&gt;() &#123;  </div><div class="line"></div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Movie movie)</span> </span>&#123;  </div><div class="line">    </div><div class="line">            &#125;  </div><div class="line"></div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable throwable)</span> </span>&#123;  </div><div class="line"></div><div class="line">            &#125;  </div><div class="line"></div><div class="line">        &#125;);  </div><div class="line"></div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Future与ListenableFuture对比"><a href="#Future与ListenableFuture对比" class="headerlink" title="Future与ListenableFuture对比"></a>Future与ListenableFuture对比</h2><p>通过上面的对比我们可以发现，使用Java的Future对象，我们必须自己去手动检查线程的返回结果。而在ListenableFuture中我们确不必这样。我们只需要写好回调函数即可。但是这并不能说明这两种实现谁更好。他们有着不同的适用场景。比如： </p>
<h3 id="使用Future的场景"><a href="#使用Future的场景" class="headerlink" title="使用Future的场景"></a>使用Future的场景</h3><ul>
<li>在一个方法中有多个外部IO，而在方法的最后需要整合这些IO的处理结果。</li>
</ul>
<h3 id="使用Listenable的场景"><a href="#使用Listenable的场景" class="headerlink" title="使用Listenable的场景"></a>使用Listenable的场景</h3><ul>
<li>在UI操作的中间步骤中，给出相应的步骤提示。</li>
</ul>
<h2 id="ListenableFuture对Future的扩展"><a href="#ListenableFuture对Future的扩展" class="headerlink" title="ListenableFuture对Future的扩展"></a>ListenableFuture对Future的扩展</h2><h3 id="JdkFutureAdapters-listenInPoolThread-future"><a href="#JdkFutureAdapters-listenInPoolThread-future" class="headerlink" title="JdkFutureAdapters.listenInPoolThread(future)"></a>JdkFutureAdapters.listenInPoolThread(future)</h3><p>JdkFutureAdapters.listenInPoolThread(future)是Guava提供的一种将JDK原生Future转化为ListenableFuture的方法。<br>例如： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Future&lt;Movie&gt; movieFuture = executorService.submit(<span class="keyword">new</span> Callable&lt;Movie&gt;() &#123;  </div><div class="line"></div><div class="line">    <span class="meta">@Override</span> </div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;    </div><div class="line">        <span class="keyword">return</span> Movie;  </div><div class="line">    &#125;  </div><div class="line">&#125;);  </div><div class="line"></div><div class="line">ListenableFuture&lt;Movie&gt; movieListenableFuture = JdkFutureAdapters.listenInPoolThread(movieFuture);</div></pre></td></tr></table></figure>
<h3 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h3><p>对ListenableFuture的返回值进行转化<br>例如： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Future&lt;Movie&gt; movieFuture = executorService.submit(<span class="keyword">new</span> Callable&lt;Movie&gt;() &#123;  </div><div class="line"></div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line">        <span class="keyword">return</span> Movie;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;);  </div><div class="line"></div><div class="line">  </div><div class="line"></div><div class="line">ListenableFuture&lt;UIMovie&gt; uiMovieListenableFuture = Futures.transform(movieFuture, <span class="keyword">new</span> AsyncFunction&lt;Movie, UIMovie&gt;() &#123;  </div><div class="line"></div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> ListenableFuture&lt;UIMovie&gt; <span class="title">apply</span><span class="params">(Movie i)</span> <span class="keyword">throws</span> Exception </span>&#123;            <span class="keyword">return</span> UIMovie;  </div><div class="line"></div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="allAsList"><a href="#allAsList" class="headerlink" title="allAsList"></a>allAsList</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">ListeningExecutorService executorService = MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(<span class="number">3</span>));  </div><div class="line">ListenableFuture&lt;Cinema&gt; cinemaListenableFuture1 = executorService.submit(<span class="keyword">new</span> Callable&lt;Cinema&gt;() &#123;  </div><div class="line"></div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> Cinema <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line">                <span class="keyword">return</span> cinema;  </div><div class="line">            &#125;  </div><div class="line"></div><div class="line">        &#125;);  </div><div class="line"></div><div class="line">ListenableFuture&lt;Cinema&gt; cinemaListenableFuture2 = executorService.submit(<span class="keyword">new</span> Callable&lt;Cinema&gt;() &#123;  </div><div class="line"></div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> Cinema <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line">                <span class="keyword">return</span> Cinema;  </div><div class="line">            &#125;  </div><div class="line"></div><div class="line">        &#125;);  </div><div class="line"></div><div class="line">ListenableFuture&lt;Cinema&gt; cinemaListenableFuture = Futures.allAsList(cinemaListenableFuture1, cinemaListenableFuture2);  </div><div class="line"></div><div class="line">ListenableFuture&lt;UICiema&gt; uiCiemaListenableFuture = Futures.transform(cinemaListenableFuture, <span class="keyword">new</span> AsyncFunction&lt;Cinema, UICineam&gt;() &#123;  </div><div class="line"></div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> ListenableFuture&lt;UICineam&gt; <span class="title">apply</span><span class="params">(Cinema i)</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line"></div><div class="line">            &#125;  </div><div class="line"></div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java在最初的多线程实现程序&lt;code&gt;Thread&lt;/code&gt;、&lt;code&gt;Runnable&lt;/code&gt;之中，是没有返回值的。这样的接口带来了很多处理多线程程序的不便。所以后来又引入了&lt;code&gt;Callable&lt;/code&gt;接口，以及与之对应的&lt;code&gt;Future&lt;/code&gt;接口。这样我们的多线程程序提交到线程池执行的时候就可以返回一个&lt;code&gt;Future&lt;/code&gt;对象。然后调用&lt;code&gt;Future.get()&lt;/code&gt;就可以获取线程的返回值。
    
    </summary>
    
      <category term="Java" scheme="http://guochenglai.com/categories/Java/"/>
    
      <category term="Java并发编程" scheme="http://guochenglai.com/categories/Java/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java" scheme="http://guochenglai.com/tags/Java/"/>
    
      <category term="Java并发编程" scheme="http://guochenglai.com/tags/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java语法糖</title>
    <link href="http://guochenglai.com/2017/02/09/java-syntactic-sugar/"/>
    <id>http://guochenglai.com/2017/02/09/java-syntactic-sugar/</id>
    <published>2017-02-09T13:13:12.000Z</published>
    <updated>2017-05-29T12:50:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>语法糖就是方便程序员使用但是对语言的功能没有影响的语法。Java语言提供很多的语法糖。学习和了解这些语法糖。有利于我们编写更好的代码以及对代码有更深的理解。<br><a id="more"></a></p>
<h2 id="常见语法糖"><a href="#常见语法糖" class="headerlink" title="常见语法糖"></a>常见语法糖</h2><p>到目前为止Java已经提供了10多种语法糖，下面这些语法糖是在我们日常开发中常见的 </p>
<h3 id="泛型与类型擦除"><a href="#泛型与类型擦除" class="headerlink" title="泛型与类型擦除"></a>泛型与类型擦除</h3><p>泛型与类型擦除是JDK1.5之后引入的最有名的语法糖。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; nameList = <span class="keyword">new</span> ArrayList&lt;&gt;();  </div><div class="line"></div><div class="line">nameList.add(<span class="string">"gcl"</span>);  </div><div class="line"></div><div class="line">nameList.add(<span class="string">"hpx"</span>);</div></pre></td></tr></table></figure>
<p>以上的代码被编译成字节码之后的代码如下： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">List nameList = <span class="keyword">new</span> ArrayList();  </div><div class="line"></div><div class="line">nameList.add(<span class="string">"gcl"</span>);  </div><div class="line"></div><div class="line">nameList.add(<span class="string">"hpx"</span>);</div></pre></td></tr></table></figure>
<p>可见在经过编译之后泛型类型就被擦除了。这也就是为什么不能使用泛型来作为重载参数。 </p>
<h3 id="枚举和字符串的switch"><a href="#枚举和字符串的switch" class="headerlink" title="枚举和字符串的switch"></a>枚举和字符串的switch</h3><p>对字符串的枚举是在Java7中引入的。在JDK1.7之前的版本中并不支持此语法。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">String name = <span class="string">"gcl"</span>;  </div><div class="line"><span class="keyword">switch</span> (name) &#123;  </div><div class="line"></div><div class="line">    <span class="keyword">case</span> <span class="string">"gcl"</span>:&#123;  </div><div class="line"></div><div class="line">        System.out.println(<span class="string">"good !!!"</span>);  </div><div class="line"></div><div class="line">        <span class="keyword">break</span>;  </div><div class="line"></div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    <span class="keyword">case</span> <span class="string">"hpx"</span>:&#123;  </div><div class="line"></div><div class="line">        System.out.println(<span class="string">"haha "</span>);  </div><div class="line"></div><div class="line">        <span class="keyword">break</span>;  </div><div class="line"></div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="try-with-resource定义关闭资源"><a href="#try-with-resource定义关闭资源" class="headerlink" title="try-with-resource定义关闭资源"></a>try-with-resource定义关闭资源</h3><p>我前面专门写过一遍文章 [使用try-with-resource改进代码异常处理机制][<a href="http://guochenglai.com/2016/06/01/try-with-resource/]专门介绍了如何使用这个语法糖。来解决解决资源关闭的问题。有兴趣的可以看看。下面只列出这种语法的写法。">http://guochenglai.com/2016/06/01/try-with-resource/]专门介绍了如何使用这个语法糖。来解决解决资源关闭的问题。有兴趣的可以看看。下面只列出这种语法的写法。</a> </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testExecuteQueryNew</span><span class="params">()</span> </span>&#123;    </div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;    </div><div class="line"></div><div class="line">            Class.forName(DRIVER_CLASS);    </div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;    </div><div class="line"></div><div class="line">            LOGGER.error(<span class="string">"can not find driver class"</span>,e);    </div><div class="line">            <span class="keyword">return</span>;    </div><div class="line"></div><div class="line">        &#125;    </div><div class="line"></div><div class="line">        <span class="keyword">try</span> (Connection connection = DriverManager.getConnection(URL, USER_NAME, PASSWORD); PreparedStatement preparedStatement = connection.prepareStatement(SQL); ResultSet resultSet = preparedStatement.executeQuery();) &#123;    </div><div class="line">        </div><div class="line">            <span class="keyword">if</span> (resultSet.next()) &#123;    </div><div class="line">        System.out.println(resultSet.getObject(<span class="number">1</span>)+<span class="string">" : "</span>+resultSet.getObject(<span class="number">2</span>));    </div><div class="line"></div><div class="line">            &#125;    </div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;    </div><div class="line"></div><div class="line">            e.printStackTrace();    </div><div class="line"></div><div class="line">        &#125;    </div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="自动装箱和拆箱"><a href="#自动装箱和拆箱" class="headerlink" title="自动装箱和拆箱"></a>自动装箱和拆箱</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">    Integer i = 1;  </div><div class="line">    </div><div class="line">    int j = i + 2;  </div><div class="line">```    </div><div class="line">    </div><div class="line"></div><div class="line">### for-each遍历 </div><div class="line">    </div><div class="line">```java</div><div class="line">    </div><div class="line">    List&lt;String&gt; nameList = new ArrayList&lt;&gt;();  </div><div class="line">    </div><div class="line">    for (String name : nameList) &#123;  </div><div class="line">    </div><div class="line">        System.out.println(name);  </div><div class="line">    </div><div class="line">    &#125;  </div><div class="line">```    </div><div class="line">    </div><div class="line"></div><div class="line">### 变长参数 </div><div class="line">    </div><div class="line">```java</div><div class="line">    </div><div class="line">    public int calculateSum(Integer... integers) &#123;  </div><div class="line">        int sum = 0;  </div><div class="line">        for (Integer tmp : integers) &#123;  </div><div class="line">            sum += tmp;  </div><div class="line">        &#125;  </div><div class="line">        return sum;  </div><div class="line">    </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> StateEnum &#123;  </div><div class="line"></div><div class="line">    VALID(<span class="number">1</span>,<span class="string">"状态有效"</span>),INVALID(<span class="number">0</span>,<span class="string">"状态无效"</span>), DELETE(<span class="number">2</span>, <span class="string">"被删除"</span>);  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> code;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String memo;  </div><div class="line"></div><div class="line">    StateEnum(<span class="keyword">int</span> code, String memo) &#123;  </div><div class="line">        <span class="keyword">this</span>.code = code;  </div><div class="line">        <span class="keyword">this</span>.memo = memo; </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> code;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMemo</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> memo;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;语法糖就是方便程序员使用但是对语言的功能没有影响的语法。Java语言提供很多的语法糖。学习和了解这些语法糖。有利于我们编写更好的代码以及对代码有更深的理解。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://guochenglai.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://guochenglai.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat对URI和Parameter中文字符解码详解</title>
    <link href="http://guochenglai.com/2017/02/07/tomcat-encoding/"/>
    <id>http://guochenglai.com/2017/02/07/tomcat-encoding/</id>
    <published>2017-02-07T13:04:34.000Z</published>
    <updated>2017-05-21T13:20:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间修改了一个web项目，遇到了一个bug是这样的：浏览器的header中的编码，服务器tomcat的编码，服务器机器默认编码，以及服务器代码的编码，都是UTF-8。服务器也在web.xml中使用字符编码过滤器，设置了UTF-8编码来进行字符串编码过滤。但是服务端接收到的参数却乱码。  </p>
<p>查了好就最后确定了问题的原因：web.xml中关于字符的编码的过滤器没有放到第一位，那么问题的原因到底是什么呢？我们先从下面的一个URL分析开始讲解。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line">    http://guochenglai.com/测试?param=测试  </div><div class="line">```    </div><div class="line">    </div><div class="line"></div><div class="line">可以看到这个URL参数中有两个地方出现了中文字符。一个是URI部分，有一个中文字符“测试”，一个是Parameter部分出现了中文字符“测试”。这个地方就会出现一个问题浏览器对URI和Parameter的编码是不一样的。URI的编码是你的程序中指定的如果JS指定为UTF-8这个编码就会是UTF-8编码。而Parameter的编码则是取决于用户电脑环境的默认编码设置，以及浏览器的设置（现在新版的浏览器基本都会采用UTF-8统一编码，）。那么服务器会怎样处理这个两个部分的字符的解码呢？ </div><div class="line"></div><div class="line">## Tomca对URI的解码规则 </div><div class="line"></div><div class="line">我们先看看Tomcat对URI的解码的源代码（我只摘抄了关于URL解码的源代码）： </div><div class="line">    </div><div class="line">```java</div><div class="line">    </div><div class="line">    public class CoyoteAdapter implements Adapter &#123;  </div><div class="line">        /**  </div><div class="line">         * Character conversion of the URI.  </div><div class="line">         */  </div><div class="line">        protected void convertURI(MessageBytes uri, Request request)   </div><div class="line">            throws Exception &#123;  </div><div class="line">    </div><div class="line">            ByteChunk bc = uri.getByteChunk();  </div><div class="line">    </div><div class="line">            int length = bc.getLength();  </div><div class="line">    </div><div class="line">            CharChunk cc = uri.getCharChunk();  </div><div class="line">    </div><div class="line">            cc.allocate(length, -1);  </div><div class="line">    </div><div class="line">            //先去拿配置conf/server.xml文件中connector属性中的编码的配置  </div><div class="line">    </div><div class="line">            String enc = connector.getURIEncoding();   </div><div class="line">    </div><div class="line">            if (enc != null) &#123;  </div><div class="line">    </div><div class="line">                B2CConverter conv = request.getURIConverter();  </div><div class="line">    </div><div class="line">                try &#123;  </div><div class="line">    </div><div class="line">                    if (conv == null) &#123;  </div><div class="line">    </div><div class="line">                        conv = new B2CConverter(enc);  </div><div class="line">    </div><div class="line">                        request.setURIConverter(conv);  </div><div class="line">    </div><div class="line">                    &#125;  </div><div class="line">    </div><div class="line">                &#125; catch (IOException e) &#123;  </div><div class="line">    </div><div class="line">                    // Ignore  </div><div class="line">    </div><div class="line">                    log.error("Invalid URI encoding; using HTTP default");  </div><div class="line">    </div><div class="line">                    connector.setURIEncoding(null);  </div><div class="line">    </div><div class="line">                &#125;  </div><div class="line">    </div><div class="line">                if (conv != null) &#123;  </div><div class="line">    </div><div class="line">                    try &#123;  </div><div class="line">    </div><div class="line">                        conv.convert(bc, cc, cc.getBuffer().length - cc.getEnd());  </div><div class="line">    </div><div class="line">                        uri.setChars(cc.getBuffer(), cc.getStart(),   </div><div class="line">    </div><div class="line">                                     cc.getLength());  </div><div class="line">    </div><div class="line">                        return;  </div><div class="line">    </div><div class="line">                    &#125; catch (IOException e) &#123;  </div><div class="line">                        log.error("Invalid URI character encoding; trying ascii");  </div><div class="line">                        cc.recycle();  </div><div class="line">                    &#125;  </div><div class="line">                &#125;   </div><div class="line">            &#125;  </div><div class="line">   </div><div class="line">            //如果配置文件没有配置URI的编码字符，则采用本系统默认的编码  </div><div class="line">    </div><div class="line">            byte[] bbuf = bc.getBuffer();  </div><div class="line">            char[] cbuf = cc.getBuffer();  </div><div class="line">            int start = bc.getStart();  </div><div class="line">    </div><div class="line">            for (int i = 0; i &lt; length; i++) &#123;  </div><div class="line">                cbuf[i] = (char) (bbuf[i + start] &amp; 0xff);  </div><div class="line">            &#125;   </div><div class="line">            uri.setChars(cbuf, 0, length);  </div><div class="line">   </div><div class="line">        &#125;   </div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>通过分析上面的可以看到Tomcat对URI的解码处理是通过两个步骤来完成的。第一步如果配置文件中配置了URI的解码，则按照配置文件的字符码解码，如果没有配置，则按照本系统默认的字符集进行解码我们这里服务器的默认字符集都是UTF-8。也就是说URI的这个部分如果客户端使用UTF-8编码，并且服务器在Connectors中也配置了UTF-8，那么这个是不会出现问题的。真正容易出现问题的是Parameter部分的解码。<br>附件：<br><code>tomcat root path –&gt;conf–&gt;server.xml</code>配置文件中关于connectors的配置如下：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;Connector port=<span class="string">"8888"</span> protocol=<span class="string">"HTTP/1.1"</span>  </div><div class="line"></div><div class="line">           maxThreads=<span class="string">"200"</span> connectionTimeout=<span class="string">"20000"</span>  </div><div class="line"></div><div class="line">           enableLookups=<span class="string">"false"</span> compression=<span class="string">"on"</span>  </div><div class="line"></div><div class="line">           redirectPort=<span class="string">"8443"</span>  </div><div class="line"></div><div class="line">           URIEncoding=<span class="string">"UTF-8"</span>  </div><div class="line"></div><div class="line">           compressableMimeType=<span class="string">"text/csv,text/html,text/xml,text/css,text/plain,text/javascript,application/javascript,application/x-javascript,application/json,application/xml"</span>  </div><div class="line"></div><div class="line">    /&gt;</div></pre></td></tr></table></figure>
<h2 id="Tomcat对Parameter的解码规则"><a href="#Tomcat对Parameter的解码规则" class="headerlink" title="Tomcat对Parameter的解码规则"></a>Tomcat对Parameter的解码规则</h2><p>我们项目出现问题的原因也就是没有理解Tomcat对Parameter解码的规则。其实Tomcat对Parameter的解码规则是如下的：  </p>
<ul>
<li>所有的Parameter中的参数都作为Parameter保存的  </li>
<li>Parameter的解码操作发生在第一次调用时。首先获取Request.setEncoding中对参数的编码（这个有两个地方设置1是客户端设置，2是服务器使用过滤器设置），并且查看是否将这个编码规则适用于URI的编码。  </li>
<li><p>如果没有就采用Tomcat的默认编码IOS8859-1，至于为什么默认是这个编码，原因是HTTP规范和Servlet规范都是默认使用这个编码。  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> <span class="keyword">implements</span> <span class="title">HttpServletRequest</span> </span>&#123;  </div><div class="line">    <span class="comment">/**  </span></div><div class="line">     * Parse request parameters.  </div><div class="line">     */  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseParameters</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="comment">//当调用这个方法解码参数时，就设置解码标志位true，这样以后就直接从缓存中拿解码参数  </span></div><div class="line">        parametersParsed = <span class="keyword">true</span>;  </div><div class="line">        <span class="comment">//先获取未被解码的参数  </span></div><div class="line"></div><div class="line">        Parameters parameters = coyoteRequest.getParameters();  </div><div class="line"></div><div class="line">        <span class="comment">//1  获取参数的解码字符编码，这里是获取的就是request.setEncoding中设置的字符编码  </span></div><div class="line"></div><div class="line">        String enc = getCharacterEncoding();  </div><div class="line"></div><div class="line">        <span class="comment">//下面就是判断request中是否设置了编码，如果设置了编码，就使用request的编码，如果没有设置编码，就是用Tomcat默认的编码ISO8859-1，注意不是别的。因为这个默认编码是继承自http1.0的默认编码规范  </span></div><div class="line"></div><div class="line">        <span class="keyword">boolean</span> useBodyEncodingForURI = connector.getUseBodyEncodingForURI();  </div><div class="line"></div><div class="line">        <span class="keyword">if</span> (enc != <span class="keyword">null</span>) &#123;  </div><div class="line"></div><div class="line">            <span class="comment">//设置参数的编码为enc  </span></div><div class="line"></div><div class="line">            parameters.setEncoding(enc);  </div><div class="line"></div><div class="line">            <span class="comment">//useBodyEncodingForURI也是connector中配置的属性，如果配置为True，这里就会设置URI的编码为enc,否则就使用connector中的URIEncoding设置的编码来解码URI  </span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> (useBodyEncodingForURI) &#123;  </div><div class="line">                parameters.setQueryStringEncoding(enc);  </div><div class="line">            &#125;  </div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line"></div><div class="line">            parameters.setEncoding  </div><div class="line">                (org.apache.coyote.Constants.DEFAULT_CHARACTER_ENCODING);  </div><div class="line"></div><div class="line">            <span class="keyword">if</span> (useBodyEncodingForURI) &#123;  </div><div class="line"></div><div class="line">                parameters.setQueryStringEncoding  </div><div class="line">     (org.apache.coyote.Constants.DEFAULT_CHARACTER_ENCODING);  </div><div class="line"></div><div class="line">            &#125;  </div><div class="line"></div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="comment">//按照上述获取的编码规则，来解析参数  </span></div><div class="line"></div><div class="line">        parameters.handleQueryParameters();  </div><div class="line"></div><div class="line">        <span class="keyword">if</span> (usingInputStream || usingReader)  </div><div class="line">            <span class="keyword">return</span>;  </div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!getMethod().equalsIgnoreCase(<span class="string">"POST"</span>)) </div><div class="line">            <span class="keyword">return</span>;  </div><div class="line"></div><div class="line">        String contentType = getContentType();  </div><div class="line"></div><div class="line">        <span class="keyword">if</span> (contentType == <span class="keyword">null</span>)  </div><div class="line"></div><div class="line">            contentType = <span class="string">""</span>;  </div><div class="line"></div><div class="line">        <span class="keyword">int</span> semicolon = contentType.indexOf(<span class="string">';'</span>);  </div><div class="line"></div><div class="line">        <span class="keyword">if</span> (semicolon &gt;= <span class="number">0</span>) &#123;  </div><div class="line"></div><div class="line">            contentType = contentType.substring(<span class="number">0</span>, semicolon).trim();  </div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line"></div><div class="line">            contentType = contentType.trim();  </div><div class="line"></div><div class="line">        &#125;  </div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="string">"multipart/form-data"</span>.equals(contentType)) &#123;  </div><div class="line"></div><div class="line">            parseParts();  </div><div class="line"></div><div class="line">            <span class="keyword">return</span>;  </div><div class="line"></div><div class="line">        &#125;  </div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!(<span class="string">"application/x-www-form-urlencoded"</span>.equals(contentType)))  </div><div class="line"></div><div class="line">            <span class="keyword">return</span>;  </div><div class="line"></div><div class="line">        <span class="keyword">int</span> len = getContentLength();  </div><div class="line"></div><div class="line">        <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;  </div><div class="line"></div><div class="line">            <span class="keyword">int</span> maxPostSize = connector.getMaxPostSize();  </div><div class="line"></div><div class="line">            <span class="keyword">if</span> ((maxPostSize &gt; <span class="number">0</span>) &amp;&amp; (len &gt; maxPostSize)) &#123;  </div><div class="line"></div><div class="line">                <span class="keyword">if</span> (context.getLogger().isDebugEnabled()) &#123;  </div><div class="line"></div><div class="line">                    context.getLogger().debug(  </div><div class="line"> sm.getString(<span class="string">"coyoteRequest.postTooLarge"</span>));  </div><div class="line"></div><div class="line">                &#125;  </div><div class="line"></div><div class="line">                <span class="keyword">return</span>;  </div><div class="line"></div><div class="line">            &#125;  </div><div class="line"></div><div class="line">            <span class="keyword">byte</span>[] formData = <span class="keyword">null</span>;  </div><div class="line"></div><div class="line">            <span class="keyword">if</span> (len &lt; CACHED_POST_LEN) &#123;  </div><div class="line"></div><div class="line">                <span class="keyword">if</span> (postData == <span class="keyword">null</span>)  </div><div class="line"></div><div class="line">                    postData = <span class="keyword">new</span> <span class="keyword">byte</span>[CACHED_POST_LEN];  </div><div class="line"></div><div class="line">                formData = postData;  </div><div class="line"></div><div class="line">            &#125; <span class="keyword">else</span> &#123;  </div><div class="line"></div><div class="line">                formData = <span class="keyword">new</span> <span class="keyword">byte</span>[len];  </div><div class="line"></div><div class="line">            &#125;  </div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;  </div><div class="line">                <span class="keyword">if</span> (readPostBody(formData, len) != len) &#123;  </div><div class="line">                    <span class="keyword">return</span>;  </div><div class="line"></div><div class="line">                &#125;  </div><div class="line"></div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;  </div><div class="line"></div><div class="line">                <span class="comment">// Client disconnect  </span></div><div class="line"></div><div class="line">                <span class="keyword">if</span> (context.getLogger().isDebugEnabled()) &#123;  </div><div class="line"></div><div class="line">                    context.getLogger().debug(  </div><div class="line">                            sm.getString(<span class="string">"coyoteRequest.parseParameters"</span>), e);  </div><div class="line"></div><div class="line">                &#125;  </div><div class="line"></div><div class="line">                <span class="keyword">return</span>;  </div><div class="line">            &#125;  </div><div class="line"></div><div class="line">            parameters.processParameters(formData, <span class="number">0</span>, len);  </div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"chunked"</span>.equalsIgnoreCase(  </div><div class="line"></div><div class="line">                coyoteRequest.getHeader(<span class="string">"transfer-encoding"</span>))) &#123;  </div><div class="line"></div><div class="line">            <span class="keyword">byte</span>[] formData = <span class="keyword">null</span>;  </div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;  </div><div class="line"></div><div class="line">                formData = readChunkedPostBody();  </div><div class="line"></div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;  </div><div class="line"></div><div class="line">                <span class="comment">// Client disconnect  </span></div><div class="line"></div><div class="line">                <span class="keyword">if</span> (context.getLogger().isDebugEnabled()) &#123;  </div><div class="line"></div><div class="line">                    context.getLogger().debug(  </div><div class="line">    sm.getString(<span class="string">"coyoteRequest.parseParameters"</span>), e);  </div><div class="line"></div><div class="line">                &#125;  </div><div class="line"></div><div class="line">                <span class="keyword">return</span>;  </div><div class="line"></div><div class="line">            &#125;  </div><div class="line"></div><div class="line">            <span class="keyword">if</span> (formData != <span class="keyword">null</span>) &#123;  </div><div class="line"></div><div class="line">                parameters.processParameters(formData, <span class="number">0</span>, formData.length);  </div><div class="line"></div><div class="line">            &#125;  </div><div class="line"></div><div class="line">        &#125;  </div><div class="line"></div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>通过分析Parameter的参数编码规则可以看到我们代码的问题。我们现在的代码都没有在客户端显示设置<code>request.setEncoding=XXXX</code>，采用的替代方案是在服务器的web.xml中采用过滤器，过滤每个请求设置这个参数。而如果没有把过滤器放在第一位。就会出现一个问题，会采用Tomcat的默认编码IOS8859-1，来解析参数。这也就是为什么我的代码里面所有地方都设置了UTF-8编码。最后也会出现乱码的原因。所以这里提醒大家一定要把web.xml中关于字符编码的过滤器放在第一位。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间修改了一个web项目，遇到了一个bug是这样的：浏览器的header中的编码，服务器tomcat的编码，服务器机器默认编码，以及服务器代码的编码，都是UTF-8。服务器也在web.xml中使用字符编码过滤器，设置了UTF-8编码来进行字符串编码过滤。但是服务端接收到
    
    </summary>
    
      <category term="Java" scheme="http://guochenglai.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://guochenglai.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>AppleScript简明教程</title>
    <link href="http://guochenglai.com/2017/02/06/apple-script-guide/"/>
    <id>http://guochenglai.com/2017/02/06/apple-script-guide/</id>
    <published>2017-02-06T12:59:22.000Z</published>
    <updated>2017-05-29T12:49:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>AppleScript是一个类似英语语法的语言。有直观、简单、易读、易学的特点。不会程序的人一会儿也能入门，并编写一些提高工作效率的软件，使用Mac的用户基本都应该会一点。如果你使用AlfredWorkflow那么AppleScript和它结合开发workflow简直是神兵利器。 </p>
<a id="more"></a>
<h2 id="AppleScript的编辑器"><a href="#AppleScript的编辑器" class="headerlink" title="AppleScript的编辑器"></a>AppleScript的编辑器</h2><p>Mac电脑提供了一个专门用来开发调试AppleScript的编辑器，在 <code>Application –&gt; Utilities –&gt; ScriptEditor</code>中，软件的图标如下：<br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/2017020614863818239547.png" alt=""><br>个人觉得就AppleScript的简单程度来说。这个软件已经足够使用了。当然如果你不满意这个软件。网上还有一些收费软件。读者可以自行Google下载。这里我还要给你推荐一个软件那就是大名鼎鼎的<code>JetBrains Intellij Idea</code>这个是用来开发Java程序的。但是里面提供了AppleScript脚本的插件。安装上这个插件之后，当你编写AppleScript脚本时候会自动弹出代码提示。非常方便。 </p>
<h2 id="HelloWord"><a href="#HelloWord" class="headerlink" title="HelloWord"></a>HelloWord</h2><p>新建一个名叫<code>Hello.scpt</code>的文件。然后双击打开，此时默认使用ScriptEditor打开。在编辑框输入如下内容。然后点击横线所示的三角运行，就会在finder中显示Hello。如下图所示：  </p>
<p><img src="http://7xutce.com2.z0.glb.qiniucdn.com/20170206148638278423152.png" alt=""><br>代码如下: </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tell application <span class="string">"Finder"</span>  </div><div class="line">  display dialog <span class="string">"Hello"</span>  </div><div class="line">end tell</div></pre></td></tr></table></figure>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><strong>Boolean（布尔型）</strong></p>
<p>仅仅包含两个值：True和False </p>
<p><strong>Number（数字型）、Integer（整型）和Real（实型）</strong></p>
<p>如：1，2，1.0，1.1，3.14，-1.56<br>Number类可进一步分为Integer（整数型）和Real（实数型）。 </p>
<p><strong>Text（文本型）和 String（字符串型）</strong></p>
<p>如：”This is a text”。 请注意引号为英文引号，以后都是这样。<br>在目前的AppleScript中，Text和String两个类型是一致的7。 </p>
<p><strong>Date（日期型）</strong></p>
<p>如：date “2009年8月30日星期日 下午12:31:34”。<br>此格式的具体形式由“系统偏好设置-语言与文本”的相关设置决定。 </p>
<p><strong>Constant（常量型）</strong></p>
<p>如：yes，no，ask<br>这些常量可以是已经被AppleScript预定义的，也可以是用户定义的不可变变量。这种<br>类型的数据一经确定不可更改。此外可以认为所有关键字都是常量型的数据 </p>
<p><strong>List（列表型）</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;，&#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;a,b,c&#125;,&#125;，&#123;<span class="number">1</span>,<span class="number">1.9</span>, <span class="string">"text"</span>&#125;</div></pre></td></tr></table></figure>
<p>列表型数据由{}包裹，一个列表中可以再包含列表，形成多维列表，列表里的具体数<br>据可以是同类型的。 </p>
<p><strong>Record（记录型）</strong></p>
<p>如：{firstName:”iDoraemon”, lastName:”Nathan”}<br>记录就是带有名称的列表。记录中的每一项都有名称（标识符）。我们可以认为List<br>是每个数据都是匿名的Record。Record也可以进一步包含另一个Record。<br>此例中，包含两个Text型数据 “iDoraemon”和 “Nathan”，它们的标识符分别是<br>firstName和lastName。通过of关键字可以得到想要的数据：<br>firstName of {firstName:”iDoraemon”, lastName:”Nathan”} </p>
<h2 id="执行shell脚本"><a href="#执行shell脚本" class="headerlink" title="执行shell脚本"></a>执行shell脚本</h2><p>AppleScript中执行shell脚本的语法模板如下：<code>do shell script “ 这里填入shell脚本 “</code><br>例如在AppleScript中执行shell脚本，关闭本机WiFi功能。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">do</span> shell script <span class="string">"networksetup -setairportpower en1 off"</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AppleScript是一个类似英语语法的语言。有直观、简单、易读、易学的特点。不会程序的人一会儿也能入门，并编写一些提高工作效率的软件，使用Mac的用户基本都应该会一点。如果你使用AlfredWorkflow那么AppleScript和它结合开发workflow简直是神兵利器。 &lt;/p&gt;
    
    </summary>
    
      <category term="Mac常用技巧" scheme="http://guochenglai.com/categories/Mac%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Mac常用技巧" scheme="http://guochenglai.com/tags/Mac%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>sublime3技巧</title>
    <link href="http://guochenglai.com/2017/02/04/sublime-guide/"/>
    <id>http://guochenglai.com/2017/02/04/sublime-guide/</id>
    <published>2017-02-04T12:55:46.000Z</published>
    <updated>2017-05-21T12:58:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令行打开sublime"><a href="#命令行打开sublime" class="headerlink" title="命令行打开sublime"></a>命令行打开sublime</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">ln -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/sublime</div></pre></td></tr></table></figure>
<p>这样以后在使用sublime打开文件的时候可以直接在命令行打开，例如我要打开<code>test.json</code><br>则可以直接在命令行输入如下： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sublime test.json</div></pre></td></tr></table></figure>
<h2 id="安装package-control"><a href="#安装package-control" class="headerlink" title="安装package-control"></a>安装package-control</h2><p>package-control是sublime用来安装插件的一个插件。有了他可以很方便地在线安装各种牛逼的插件。<br><code>view–&gt;showConsule</code>在最下面的那个小横条中粘贴如下的python代码： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> urllib.request,os,hashlib; h = <span class="string">'df21e130d211cfc94d9b0905775a7c0f'</span> + <span class="string">'1e3d39e33b79698005270310898eea76'</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class="string">'http://packagecontrol.io/'</span> + pf.replace(<span class="string">' '</span>, <span class="string">'%20'</span>)).read(); dh = hashlib.sha256(by).hexdigest(); print(<span class="string">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class="keyword">if</span> dh != <span class="function">h <span class="keyword">else</span> <span class="title">open</span><span class="params">(os.path.join( ipp, pf)</span>, 'wb' ).<span class="title">write</span><span class="params">(by)</span></span></div></pre></td></tr></table></figure>
<p>等待上述操作完成就可以自由安装插件了。这时候按下<code>command + shift + p</code> 输入<code>install</code><br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/20170206148634653631842.png" alt=""><br>选择<code>Install Package</code>我们以安装一个<code>json</code>插件为例：<br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/2017020614863466514309.png" alt=""><br>安装完成之后。就可以自由格式化我们输入的json字符串了。 </p>
]]></content>
    
    <summary type="html">
    
      sublime是一款非常好用的MAC编辑软件。本文将介绍一些sublime的使用技巧。这些技巧会使你的效率倍增。本篇文章也会长期更新。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>pac-backup</title>
    <link href="http://guochenglai.com/2017/02/03/pac-backup/"/>
    <id>http://guochenglai.com/2017/02/03/pac-backup/</id>
    <published>2017-02-03T12:53:42.000Z</published>
    <updated>2017-05-21T12:58:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://raw.githubusercontent.com/guochenglai/gfw/master/glwlist.pac" target="_blank" rel="external">https://raw.githubusercontent.com/guochenglai/gfw/master/glwlist.pac</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/guochenglai/gfw/master/glwlist.pac&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://raw.githubuserconte
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用Alfred Workflow 自动切换网络和代理</title>
    <link href="http://guochenglai.com/2017/01/28/mac-auto-proxy/"/>
    <id>http://guochenglai.com/2017/01/28/mac-auto-proxy/</id>
    <published>2017-01-28T12:50:22.000Z</published>
    <updated>2017-05-21T12:52:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>公司有一个翻墙的pac代理。我自己也买了一个shadowsocket代理。但是公司的代理的速度明显比我自己的要快。所以决定在公司使用公司的代理pac文件，在家使用自己shadowsocket的代理。但是手工切换的方式比较不友好，每次需要打开<code>system –&gt;network –&gt;advance–&gt;auto proxy</code>来手动更改代理文件的设置。非常麻烦而且容易忘记。我们完全可以采用如下的一种全自动的方式来实现。代理的自动切换。  </p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>本文使用Alfred的workflow来建立两个工作流当在Alfred的输入框中输入<code>home</code>的时候，就自动打开<code>WiFi</code>并打开<code>shadowsocket</code>使用自己的代理。当在公司的时候，就关闭<code>WiFi</code>关闭<code>shadowscoket</code>并修改<code>network</code>中的<code>Automatic Proxy Configuration</code><br>到公司的pac文件。如下图所示<br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/20170206148637911339907.png" alt=""></p>
<h2 id="办公网络切换至家庭网络"><a href="#办公网络切换至家庭网络" class="headerlink" title="办公网络切换至家庭网络"></a>办公网络切换至家庭网络</h2><ol>
<li>点击Alfred workflow的左下角<code>+号</code>选择<code>BlankWorkflow</code>新建一个空的workflow如下图所示：<br>![][2]</li>
<li>选择新建之后会出现如下的文本框。在红色下划线上输入你自己的内容（这个随意填写，自己知道就行，也可以照我的例子填写）<br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/20170206148637945561652.png" alt=""></li>
<li>在空白的画布上右击选择<code>inputs–&gt;keyword</code><br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/20170206148637962071241.png" alt=""></li>
<li>出现如下的界面KeyWord中填写一个名字（注意这里名字不能乱写，要易于记忆，比如我要做的是将网络环境切换到家庭网络，所以我这里取名为home）<br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/20170206148637970456228.png" alt=""></li>
<li>继续，新建一个script如下图：<br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/20170206148637994874734.png" alt=""><br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/20170206148638003119113.png" alt=""><br>script的代码如下：</li>
</ol>
<pre><code>[2]: http://7xutce.com2.z0.glb.qiniucdn.com/20170206148637927731477.png
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">do</span> shell script <span class="string">"open /Applications/ShadowsocksX.app"</span>  </div><div class="line"></div><div class="line"><span class="keyword">do</span> shell script <span class="string">"networksetup -setairportpower en1 on"</span></div></pre></td></tr></table></figure>
<ol>
<li>将<code>Keyword</code>与<code>Run Script</code>链接起来如下图所示。<br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/20170206148638018027578.png" alt=""></li>
<li>至此自动切换到家庭网络的功能已经完成。</li>
</ol>
<h2 id="家庭网络切换至办公网络"><a href="#家庭网络切换至办公网络" class="headerlink" title="家庭网络切换至办公网络"></a>家庭网络切换至办公网络</h2><p>家庭网络切换至办公网络和上面的过程类似。下面我只贴出script代码：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line">tell application <span class="string">"ShadowsocksX"</span>  </div><div class="line"></div><div class="line">        quit  </div><div class="line"></div><div class="line">end tell  </div><div class="line"></div><div class="line"><span class="keyword">do</span> shell script <span class="string">"sudo networksetup -setautoproxyurl 'Ethernet' '这里填入公司给你的pac文件.pac' "</span>  </div><div class="line"></div><div class="line"><span class="keyword">do</span> shell script <span class="string">"networksetup -setairportpower en1 off"</span></div></pre></td></tr></table></figure></p>
<p>整个操作完成之后如下图所示。<br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/20170206148638043747633.png" alt=""></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用<code>alt+ space</code>调出Alfred的输入框。输入<code>home</code>就会切换至wifi,并使用shdowsocket作为代理上网。输入<code>qunar</code>就会切换至公司有线网络。并只用公司自己的翻墙代理上网。如下图：<br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/20170206148638067658321.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司有一个翻墙的pac代理。我自己也买了一个shadowsocket代理。但是公司的代理的速度明显比我自己的要快。所以决定在公司使用公司的代理pac文件，在家使用自己shadowsocket的代理。但是手工切换的方式比较不友好，每次需要打开&lt;code&gt;system –&amp;gt
    
    </summary>
    
      <category term="Mac常用技巧" scheme="http://guochenglai.com/categories/Mac%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Mac常用技巧" scheme="http://guochenglai.com/tags/Mac%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>mac软件设置启动快捷键</title>
    <link href="http://guochenglai.com/2017/01/22/mac-software-shortcut/"/>
    <id>http://guochenglai.com/2017/01/22/mac-software-shortcut/</id>
    <published>2017-01-22T12:38:59.000Z</published>
    <updated>2017-05-29T12:51:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>Linux系统设置了非常多的软件系统快捷键。例如在Ubuntu系统中可以按<code>ctrl + shift + t</code> 启动用户终端。但是Mac系统并没有提供这些软件启动的快捷键。如下介绍一个方法可以为Mac的任意软件设置启动快捷键。  </p>
<a id="more"></a>
<p>首先打开Application中的Automator软件：如下图所示：<br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/20170203148611077767969.png" alt=""><br>选择<code>Service</code><br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/20170203148611080438397.png" alt=""><br>然后会出现如下的界面：<br>选择 Utilities –&gt; Launch Application<br>在service recevies中选择”no input”，然后在launch application下面选择需要快捷打开的软件如下图所示：<br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/20170203148611084557651.png" alt=""><br>当完成上述操作之后。点击保存为软件起一个名称。这里需要记住你所起的名称。 </p>
<p>打开System–&gt;keyboard–&gt;shortcuts–&gt;service–&gt;general<br>找到你刚才起名字的那个软件，然后在后面添加自己的快捷键，如下图所示即可。<br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/2017020314861108802584.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux系统设置了非常多的软件系统快捷键。例如在Ubuntu系统中可以按&lt;code&gt;ctrl + shift + t&lt;/code&gt; 启动用户终端。但是Mac系统并没有提供这些软件启动的快捷键。如下介绍一个方法可以为Mac的任意软件设置启动快捷键。  &lt;/p&gt;
    
    </summary>
    
      <category term="Mac常用技巧" scheme="http://guochenglai.com/categories/Mac%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Mac常用技巧" scheme="http://guochenglai.com/tags/Mac%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>InputStream读取问题</title>
    <link href="http://guochenglai.com/2016/10/30/inputstream-to-byte/"/>
    <id>http://guochenglai.com/2016/10/30/inputstream-to-byte/</id>
    <published>2016-10-30T12:04:52.000Z</published>
    <updated>2017-05-21T12:18:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近写了一个项目，需要将HTTP请求的数据读取到一个byte数组中。我的写法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//下面这段代码想做到的功能大概是：先获取inputStream中数据内容的大小。然后实例化一个数组。最后将所有的数据内容读取到这个数组之中。  </span></div><div class="line"></div><div class="line"><span class="keyword">try</span> (InputStream inputStream = httpResponse.getEntity().getContent()) &#123;  </div><div class="line">            <span class="keyword">int</span> size = inputStream.available();  </div><div class="line">            <span class="keyword">byte</span>[] dataContent = <span class="keyword">new</span> <span class="keyword">byte</span>[size];  </div><div class="line">            inputStream.read(dataContent);  </div><div class="line">            <span class="keyword">return</span> dataContent;  </div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;  </div><div class="line">    logger.error(<span class="string">"download qrcode cause exception"</span>, e);  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码看起来没什么问题。但是最后测试的时候，总是发现数据和想象中的不一样。搜了好久也没有看到解决方案，于是决定去看Java中InputStream的代码，这个代码其实有两个错误的地方。分别是对available函数和read函数的理解。下面我们看看Java源代码中对着两个函数的解释。 </p>
<p>首先看看available()函数  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**  </span></div><div class="line">     * Returns an estimate of the number of bytes that can be read (or  </div><div class="line">     * skipped over) from this input stream without blocking by the next  </div><div class="line">     * invocation of a method for this input stream. The next invocation  </div><div class="line">     * might be the same thread or another thread.  A single read or skip of this  </div><div class="line">     * many bytes will not block, but may read or skip fewer bytes.  </div><div class="line">     *  </div><div class="line">     * &lt;p&gt; Note that while some implementations of &#123;<span class="doctag">@code</span> InputStream&#125; will return  </div><div class="line">     * the total number of bytes in the stream, many will not.  It is  </div><div class="line">     * never correct to use the return value of this method to allocate  </div><div class="line">     * a buffer intended to hold all data in this stream.  </div><div class="line">     *  </div><div class="line">     * &lt;p&gt; A subclass' implementation of this method may choose to throw an  </div><div class="line">     * &#123;<span class="doctag">@link</span> IOException&#125; if this input stream has been closed by  </div><div class="line">     * invoking the &#123;<span class="doctag">@link</span> #close()&#125; method.  </div><div class="line">     *  </div><div class="line">     * &lt;p&gt; The &#123;<span class="doctag">@code</span> available&#125; method for class &#123;<span class="doctag">@code</span> InputStream&#125; always  </div><div class="line">     * returns &#123;<span class="doctag">@code</span> 0&#125;.  </div><div class="line">     *  </div><div class="line">     * &lt;p&gt; This method should be overridden by subclasses.  </div><div class="line">     *  </div><div class="line">     * <span class="doctag">@return</span>     an estimate of the number of bytes that can be read (or skipped  </div><div class="line">     *             over) from this input stream without blocking or &#123;<span class="doctag">@code</span> 0&#125; when  </div><div class="line">     *             it reaches the end of the input stream.  </div><div class="line">     * <span class="doctag">@exception</span>  IOException if an I/O error occurs.  </div><div class="line">     */  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">available</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//这里可以看到available函数默认值返回的是0，可能具体的实现方式返回的数值不同，但是可以肯定的一点是。这里返回的不是HTTP请求所获取的总数据的长度。  </span></div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>上面的注释的意思大概是，这个函数返回一个从inputStream中获取数据的估计值（注意不是精确值）。这个值也可能是0。一般情况下不是数据的总量。 </p>
<p>再看看read()函数 </p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**  </span></div><div class="line"> * Reads some number of bytes from the input stream and stores them into  </div><div class="line"> * the buffer array &lt;code&gt;b&lt;/code&gt;. The number of bytes actually read is  </div><div class="line"> * returned as an integer.  This method blocks until input data is  </div><div class="line"> * available, end of file is detected, or an exception is thrown.  </div><div class="line"> *  </div><div class="line"> * &lt;p&gt; If the length of &lt;code&gt;b&lt;/code&gt; is zero, then no bytes are read and  </div><div class="line"> * &lt;code&gt;0&lt;/code&gt; is returned; otherwise, there is an attempt to read at  </div><div class="line"> * least one byte. If no byte is available because the stream is at the  </div><div class="line"> * end of the file, the value &lt;code&gt;-1&lt;/code&gt; is returned; otherwise, at </div><div class="line"> * least one byte is read and stored into &lt;code&gt;b&lt;/code&gt;.  </div><div class="line"> *  </div><div class="line"> * &lt;p&gt; The first byte read is stored into element &lt;code&gt;b[0]&lt;/code&gt;, the  </div><div class="line"> * next one into &lt;code&gt;b[1]&lt;/code&gt;, and so on. The number of bytes read is,  </div><div class="line"> * at most, equal to the length of &lt;code&gt;b&lt;/code&gt;. Let &lt;i&gt;k&lt;/i&gt; be the  </div><div class="line"> * number of bytes actually read; these bytes will be stored in elements  </div><div class="line"> * &lt;code&gt;b[0]&lt;/code&gt; through &lt;code&gt;b[&lt;/code&gt;&lt;i&gt;k&lt;/i&gt;&lt;code&gt;-1]&lt;/code&gt;,  </div><div class="line"> * leaving elements &lt;code&gt;b[&lt;/code&gt;&lt;i&gt;k&lt;/i&gt;&lt;code&gt;]&lt;/code&gt; through  </div><div class="line"> * &lt;code&gt;b[b.length-1]&lt;/code&gt; unaffected.  </div><div class="line"> *  </div><div class="line"> * &lt;p&gt; The &lt;code&gt;read(b)&lt;/code&gt; method for class &lt;code&gt;InputStream&lt;/code&gt;  </div><div class="line"> * has the same effect as: &lt;pre&gt;&lt;code&gt; read(b, 0, b.length) &lt;/code&gt;&lt;/pre&gt;  </div><div class="line"> *  </div><div class="line"> * <span class="doctag">@param</span>      b   the buffer into which the data is read.  </div><div class="line"> * <span class="doctag">@return</span>     the total number of bytes read into the buffer, or  </div><div class="line"> *             &lt;code&gt;-1&lt;/code&gt; if there is no more data because the end of  </div><div class="line"> *             the stream has been reached.  </div><div class="line"> * <span class="doctag">@exception</span>  IOException  If the first byte cannot be read for any reason  </div><div class="line"> * other than the end of the file, if the input stream has been closed, or  </div><div class="line"> * if some other I/O error occurs.  </div><div class="line"> * <span class="doctag">@exception</span>  NullPointerException  if &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;. </div><div class="line"> * <span class="doctag">@see</span>        java.io.InputStream#read(byte[], int, int)  </div><div class="line"> */  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span> b[])</span> <span class="keyword">throws</span> IOException </span>&#123;  </div><div class="line"></div><div class="line">    <span class="keyword">return</span> read(b, <span class="number">0</span>, b.length);  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>read函数的解释是读取byte数组中的内容，能够读取到多少就读取多少。将实际读取的内容存放在byte数组中。 所以这里也不是你传递数据大小是多少就读取多少的内容。<br>。分析到这里相信大家明白了我上述例子中代码的问题。那么要实现这个功能有没有比较简单的方法呢？其实是有的。很多的工具类都提供了这个解决方案。例如Apache和Guava。下面提供一种guava的实现方案。具体的实现我就不分析了，有兴趣可以去看看guava的源代码。 </p>
<p>guava的实现：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"><span class="keyword">try</span> (InputStream inputStream = httpResponse.getEntity().getContent()) &#123;  </div><div class="line"></div><div class="line">           <span class="keyword">byte</span>[] dataContent = ByteStreams.toByteArray(inputStream);  </div><div class="line"></div><div class="line">           <span class="keyword">return</span> dataContent;  </div><div class="line"></div><div class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;  </div><div class="line"></div><div class="line">           logger.error(<span class="string">"download qrcode cause exception"</span>, e);  </div><div class="line"></div><div class="line">       &#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近写了一个项目，需要将HTTP请求的数据读取到一个byte数组中。我的写法如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;
    
    </summary>
    
      <category term="Java" scheme="http://guochenglai.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://guochenglai.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Linux恢复误删除的文件</title>
    <link href="http://guochenglai.com/2016/10/14/linux-find-deleted-file/"/>
    <id>http://guochenglai.com/2016/10/14/linux-find-deleted-file/</id>
    <published>2016-10-14T11:54:10.000Z</published>
    <updated>2017-05-29T12:52:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用过Linux的同学，一定都有过错误使用<code>rm -rf</code>命令的经过。一旦使用错误就会将宝贵的资源删除掉。如果后续的处理不当将会造成不可恢复的后果。本文将浅析Linux文件删除的原理，并提供一个简单的方法恢复被删除的文件。  </p>
<a id="more"></a>
<h2 id="文件删除的原理"><a href="#文件删除的原理" class="headerlink" title="文件删除的原理"></a>文件删除的原理</h2><p>所有的文件都是以二进制存储在磁盘上的一个磁盘块（称为磁盘节点）。我们每创建一个文件在磁盘上创建一个磁盘节点，并创建一个指针指向磁盘块。然后删除文件的时候，并不是删除磁盘节点，而是将指向磁盘节点的指针减一，当一个磁盘节点的指针减少到0之后，表示这个磁盘节点对应的文件已经没有引用了，那么这个磁盘节点就可以被其他的进程重写。当其他的进程将该磁盘块写完之后。文件内容才会彻底没有。所以理论上当其他进程没有完全写完一个磁盘节点的时候，被误删除的文件总是能够全部或者部分恢复。根据上面的文件删除过程我们可以按照文件恢复的难度划分为如下三个恢复点： </p>
<ul>
<li>1 文件的引用标识没有被删除到0的时候。此时被删除的文件可以完全恢复。</li>
<li>2 文件的引用标识被删除到0了，但是其他进程没有重写此磁盘。理论上被删除的文件可以完全恢复。</li>
<li>3 文件的引用标识被删除到0了，此磁盘块被其他进行重写了一部分。理论上被删除的文件可以部分恢复。</li>
</ul>
<p>本文将介绍第一个阶段的文件如果恢复。注意要想被删除的文件状态停留在第一个阶段。必须有一个前提：占用被删除文件的进程没有被关闭！！！(所以删除文件之后一定要冷静，一定不要关机或者重启)如果占用被删除文件的进程以及被关闭。那么会直接进入，第二或者第三个阶段。恢复文件的难度要大大增加。目前我还在尝试处于第二或者第三阶段的文件恢复方法。如果成功。会在后面的文章之中继续更新。 </p>
<p>下面是为啥不能关闭占用被删除文件的进程的原因：<br>Linux系统所有项目都是用文件来表示的包括系统的文件，端口，进程，Linux系统没启动一个进程都会在<code>/proc</code>目录下面建立一个文件夹，然后改进程的所有项目，都会在该文件夹下面用一个文件来表示。当执行<code>rm -rf</code>删除一个文件之后此时的文件对应的磁盘块的指针并没有减少到0。因为在/prco目录下面还会有对文件的指针。下面将以一个例子来介绍。如果利用这个文件的指针恢复被删除的文件。 </p>
<h2 id="误删除文件恢复详细教程"><a href="#误删除文件恢复详细教程" class="headerlink" title="误删除文件恢复详细教程"></a>误删除文件恢复详细教程</h2><p>假设我们有一个Java进程（进程号：23245）在写一个日志文件catalina.out。我们就删除这个文件。然后讲述怎么恢复这个文件。<br>1 删除文件执行：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo rm -rf catalina.out</div></pre></td></tr></table></figure>
<p><img src="http://7xutce.com1.z0.glb.clouddn.com/20161018147677833260093.jpg?imageView2/0/format/jpg" alt=""><br>现在文件以及被删除了。此时占用次文件的进程并没有被关闭。所以此时磁盘节点的指针为1，不是0。<br>2 查看进程被删除的文件。但是文件指针大于0的文件。<br><img src="http://7xutce.com1.z0.glb.clouddn.com/20161018147677856294380.jpg?imageView2/0/format/jpg" alt=""><br>可以看到：1标准输出，2标准错误输出都指向了这个文件。<br>3 执行恢复操作恢复文件。<br><img src="http://7xutce.com1.z0.glb.clouddn.com/20161018147677876780784.jpg?imageView2/0/format/jpg" alt=""><br>4 查看test.out的内容发现test.out就是我们要恢复的catalina.out的文件的内容。<br>如果想要批量自动恢复文件读者可以自己写一个脚本。应该很简单了吧。 </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用过Linux的同学，一定都有过错误使用&lt;code&gt;rm -rf&lt;/code&gt;命令的经过。一旦使用错误就会将宝贵的资源删除掉。如果后续的处理不当将会造成不可恢复的后果。本文将浅析Linux文件删除的原理，并提供一个简单的方法恢复被删除的文件。  &lt;/p&gt;
    
    </summary>
    
      <category term="Linux常用技巧" scheme="http://guochenglai.com/categories/Linux%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Linux常用技巧" scheme="http://guochenglai.com/tags/Linux%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>解决Mac电脑端口被占用</title>
    <link href="http://guochenglai.com/2016/09/30/fix-mac-port-occupy/"/>
    <id>http://guochenglai.com/2016/09/30/fix-mac-port-occupy/</id>
    <published>2016-09-30T11:44:51.000Z</published>
    <updated>2017-05-21T11:53:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>在日常开发过程中经常遇到端口被占用的情况。这种情况的一般解决思路是:首先找到找到本端口占用的进程的进程号，然后杀掉该进程号对应的进程。Ubuntu/Centos/RedHat等Linux操作系统下一般采用如下的方法。  </p>
<a id="more"></a>
<p>1 找到被占用端口的进程。我们以43900端口为例：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo netstat -nap | grep <span class="number">43900</span></div></pre></td></tr></table></figure>
<p>输出如下：  </p>
<p><img src="http://7xutce.com1.z0.glb.clouddn.com/20160930147520783710797.jpg?imageView2/0/format/jpg" alt=""><br>2 可以看到43900端口是被进程号为26456的Java进程所占用。如果在确认该进程无用的情况下可以执行如下的命令杀掉该进程，那么端口占用就会被解决：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo kill -<span class="number">9</span> <span class="number">26456</span></div></pre></td></tr></table></figure>
<p>MAC解决方案<br>但是在MAC系统中没有netstat命令。我们可以用lsof(list open file)来找到占用端口的进程。然后后面的操作一样。<br>1 找到占用端口的进程：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo lsof -i -n -P | grep <span class="number">8080</span></div></pre></td></tr></table></figure></p>
<p>输出如下：</p>
<p><img src="http://7xutce.com1.z0.glb.clouddn.com/20160930147520857940747.jpg?imageView2/0/format/jpg" alt=""><br>2 杀掉占用端口的进程：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo kill -<span class="number">9</span> <span class="number">49406</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在日常开发过程中经常遇到端口被占用的情况。这种情况的一般解决思路是:首先找到找到本端口占用的进程的进程号，然后杀掉该进程号对应的进程。Ubuntu/Centos/RedHat等Linux操作系统下一般采用如下的方法。  &lt;/p&gt;
    
    </summary>
    
      <category term="Mac常用技巧" scheme="http://guochenglai.com/categories/Mac%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Mac常用技巧" scheme="http://guochenglai.com/tags/Mac%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>百度无法爬取Github Pages静态网站解决方案</title>
    <link href="http://guochenglai.com/2016/09/26/baidu-crow-github-page/"/>
    <id>http://guochenglai.com/2016/09/26/baidu-crow-github-page/</id>
    <published>2016-09-26T11:34:10.000Z</published>
    <updated>2017-05-29T12:55:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Github Pages上面托管了自己的静态博客，经过一段时间的运行发现自己网站的流量基本都是来自与谷歌、必应、搜狗等等搜索引擎，确没有百度的搜索引擎的流量，最后谷歌一下发现原因是：  </p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">百度爬取GitHub太频繁了，甚至引起了GitHub的服务不稳</div><div class="line">定，最后GitHub直接把百度屏蔽了，也就是说，所有托管</div><div class="line">到GitHub Pages上的静态博客都是无法被百度搜索到。</div></pre></td></tr></table></figure>
<p>可以用如下的方法进行验证：<br>打开百度站长平台—&gt;网页抓取—-&gt;抓取诊断。然后点击抓取。完成之后发现抓取状态是失败。这时候点击进入详情发现，返回的HTPP状态是<code>HTTP/1.0 403 Forbidden</code>（403表示链接被拒绝）。如下： </p>
<p><img src="http://7xutce.com1.z0.glb.clouddn.com/20160926147488124746928.jpg?imageView2/0/format/jpg" alt=""><br>解决这个问题可以有很多的方案，比如： </p>
<ol>
<li>自己买个VPS云主机，将自己的博客发布到云主机上面。这个做法的缺点是：成本较高，我们采用GitHub Pages托管静态博客就是为了节省成本。所以这种方案显然是不可行的。</li>
<li>将自己的服务托管到Coding上（前身是GitCafe，是国内模仿了一个GitHub，他们的关系可以理解成百度和谷歌的关系）。Coding完全模仿了GitHub 也提供了静态博客Pages服务。如果目前客户只是国内的用户，方案二应该是最简单可行的方案</li>
<li>将自己的博客分别搭建在Coding Pages和GitHub Pages上，然后配置DNS的时候选择让国内的线路流量打到Coding上，其他的线路流量打到GitHub上。因为百度在国内，所以百度抓取的时候会去Coding上面抓取。所以这种方案应该是最理想的方案。</li>
</ol>
<p><strong><em>下面是方案三的具体实现</em>：</strong></p>
<h2 id="将静态Pages同时托管到Coding和GitHub上"><a href="#将静态Pages同时托管到Coding和GitHub上" class="headerlink" title="将静态Pages同时托管到Coding和GitHub上"></a>将静态Pages同时托管到Coding和GitHub上</h2><h3 id="注册Coding并开启Pages服务"><a href="#注册Coding并开启Pages服务" class="headerlink" title="注册Coding并开启Pages服务"></a>注册Coding并开启Pages服务</h3><p>这个过程和GitHub的配置基本一样，只需要注意如下五点： </p>
<p>1 项目的名称必须和用户名一致。例如我的用户名叫:guochenglai，项目名称也应该叫:guochenglai。否则会出现静态文件路径不对的问题。比如没有样式。<br>2 项目必须是共有的。<br>3 开启Pages的时候注意分支问题。你项目的分支在master，但是pages服务默认分支不是，这个记得修改。<br>4 需要将你的CNAME文件也推送到Coding项目的根目录上<br>5 需要绑定自己的域名，如下图：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/20160926147488246182051.jpg?imageView2/0/format/jpg" alt=""><br>验证Coding Pages配置成功可以在浏览器输入Pages服务地址：<code>guochenglai.coding.me</code>(改成你的项目名和用户名)如果网页正常出现。说明配置成功。 </p>
<h3 id="将Pages实现双部署"><a href="#将Pages实现双部署" class="headerlink" title="将Pages实现双部署"></a>将Pages实现双部署</h3><p>修改hexo的根配置文件。将deploy选项修改如下： </p>
<pre><code class="java"># Deployment  
## Docs: https://hexo.io/docs/deployment.html  
deploy:   
  type: git  
  branch: master  
  repo:   
    github: git@github.com:guochenglai/guochenglai.github.io.git ##这里是你的GitHub Pages项目  
    coding: git@git.coding.net:guochenglai/guochenglai.git ## 这里是你的Coding项目
</code></pre>
<h2 id="注册dnspod配置dns流量分发"><a href="#注册dnspod配置dns流量分发" class="headerlink" title="注册dnspod配置dns流量分发"></a>注册dnspod配置dns流量分发</h2><p>因为我的域名是在阿里云购买的。所以这里已阿里云使用dnspod解析域名为例。 </p>
<h3 id="注册一个dnspod账号"><a href="#注册一个dnspod账号" class="headerlink" title="注册一个dnspod账号"></a>注册一个dnspod账号</h3><p>注册dnspod，并在域名解析页面添加自己的域名如下：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/20160926147488331211114.jpg?imageView2/0/format/jpg" alt=""></p>
<p>点击配置的域名，会将你以前在阿里云配置的域名解析信息导入，前面两条是阿里云上面配置的域名后面两条是dnspod默认添加的可以不管。页面如下：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/20160926147488351231587.jpg?imageView2/0/format/jpg" alt=""></p>
<h3 id="修改阿里云的域名服务器"><a href="#修改阿里云的域名服务器" class="headerlink" title="修改阿里云的域名服务器"></a>修改阿里云的域名服务器</h3><p>找到如下的页面：<br>![][5]<br>将DNS服务器修改为如下两个  </p>
<pre><code>[5]: http://7xutce.com1.z0.glb.clouddn.com/20160926147488381465618.jpg?imageView2/0/format/jpg
</code></pre><pre><code class="java">f1g1ns1.dnspod.net   

f1g1ns2.dnspod.net
</code></pre>
<h3 id="dnspod配置流量分发"><a href="#dnspod配置流量分发" class="headerlink" title="dnspod配置流量分发"></a>dnspod配置流量分发</h3><p>页面的信息如下：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/20160926147488398940006.jpg?imageView2/0/format/jpg" alt=""></p>
<table>
<thead>
<tr>
<th>主机记录</th>
<th>记录类型</th>
<th>线路类型</th>
<th>记录值</th>
<th>权重</th>
<th>MAX优先级</th>
<th>TTL说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>@</td>
<td>A</td>
<td>默认</td>
<td>192.30.252.153</td>
<td>—-</td>
<td>—-</td>
<td>6000</td>
<td>国外Github IP的配置 </td>
</tr>
<tr>
<td>@</td>
<td>A</td>
<td>默认</td>
<td>192.30.252.154</td>
<td>—-</td>
<td>—-</td>
<td>6000</td>
<td>国外Github IP的配置 </td>
</tr>
<tr>
<td>@</td>
<td>CNAME</td>
<td>国内</td>
<td>guochenglai.coding.me.</td>
<td>—-</td>
<td>—-</td>
<td>6000</td>
<td>国内域名别名 </td>
</tr>
<tr>
<td>WWW</td>
<td>CNAME</td>
<td>默认</td>
<td>guochenglai.github.io.</td>
<td>—-</td>
<td>—-</td>
<td>6000</td>
<td>国外WWW域名别名 </td>
</tr>
<tr>
<td>WWW</td>
<td>CNAME</td>
<td>国内</td>
<td>guochenglai.coding.me.</td>
<td>—-</td>
<td>—-</td>
<td>6000</td>
<td>国域WWW域名别名 </td>
</tr>
</tbody>
</table>
<h2 id="验证百度抓取"><a href="#验证百度抓取" class="headerlink" title="验证百度抓取"></a>验证百度抓取</h2><p>对比抓取失败需要关注两个点：<br>1 网站IP发生了变化，变成了国内的Coding的IP<br>2 抓取状态变成了200表示已经成功<br>如果上面两点都满足说明你的网站已经可以被百度抓取了。剩下的就是等待被百度收录然后建立索引（这个时间一周到一个月不等）。<br><img src="http://7xutce.com1.z0.glb.clouddn.com/20160926147488195627420.jpg?imageView2/0/format/jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Github Pages上面托管了自己的静态博客，经过一段时间的运行发现自己网站的流量基本都是来自与谷歌、必应、搜狗等等搜索引擎，确没有百度的搜索引擎的流量，最后谷歌一下发现原因是：  &lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://guochenglai.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://guochenglai.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
