<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[javafx打包为执行的exe/dmg文件]]></title>
      <url>/2017/02/17/javafx-deploy-exe-dmg-file/</url>
      <content type="html"><![CDATA[<p>Java具有一次编写导出运行的特点，而新一代的Java桌面支持程序JavaFx，更是将这种支持方式表现到了极致。我们可以将我们编写的JavaFx程序打包成直接可运行的程序。这种打包方式，会将本平台的JDK也一同打包入可执行的程序。也就是说这种打包的程序在没有JDK的环境也照样运行。  </p>
<a id="more"></a>
<h2 id="打包方法"><a href="#打包方法" class="headerlink" title="打包方法"></a>打包方法</h2><p>网上了使用Ant打包的方法，这种方式古老又不方便。下面提供一种简单的方式。 </p>
<ol>
<li>添加打包依赖的maven项目</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">&lt;!--  这个plugin得作用是将依赖的jar包都打入可执行的程序 --&gt;  </div><div class="line"></div><div class="line">&lt;plugin&gt;  </div><div class="line"></div><div class="line">    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  </div><div class="line"></div><div class="line">    &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;  </div><div class="line"></div><div class="line">        &lt;version&gt;2.10&lt;/version&gt;  </div><div class="line"></div><div class="line">        &lt;executions&gt;  </div><div class="line"></div><div class="line">            &lt;execution&gt;  </div><div class="line"></div><div class="line">                &lt;id&gt;copy-dependencies&lt;/id&gt;  </div><div class="line"></div><div class="line">                &lt;phase&gt;package&lt;/phase&gt;  </div><div class="line"></div><div class="line">                &lt;configuration&gt;  </div><div class="line"></div><div class="line">                    &lt;overWriteReleases&gt;false&lt;/overWriteReleases&gt;  </div><div class="line"></div><div class="line">                    &lt;overWriteSnapshots&gt;false&lt;/overWriteSnapshots&gt;  </div><div class="line"></div><div class="line">                    &lt;overWriteIfNewer&gt;true&lt;/overWriteIfNewer&gt;  </div><div class="line"></div><div class="line">                &lt;/configuration&gt;  </div><div class="line"></div><div class="line">                &lt;goals&gt;  </div><div class="line"></div><div class="line">                    &lt;goal&gt;copy-dependencies&lt;/goal&gt;  </div><div class="line"></div><div class="line">                &lt;/goals&gt;  </div><div class="line"></div><div class="line">            &lt;/execution&gt;  </div><div class="line"></div><div class="line">        &lt;/executions&gt;  </div><div class="line"></div><div class="line">&lt;/plugin&gt;  </div><div class="line"></div><div class="line">&lt;plugin&gt;  </div><div class="line"></div><div class="line">    &lt;groupId&gt;com.zenjava&lt;/groupId&gt;  </div><div class="line"></div><div class="line">    &lt;artifactId&gt;javafx-maven-plugin&lt;/artifactId&gt;  </div><div class="line"></div><div class="line">    &lt;version&gt;8.8.3&lt;/version&gt;  </div><div class="line"></div><div class="line">    &lt;configuration&gt;  </div><div class="line"></div><div class="line">        &lt;!-- 指明javafx的入口类 --&gt;  </div><div class="line"></div><div class="line">        &lt;mainClass&gt;net.gcl.ticket.ui.Main&lt;/mainClass&gt;  </div><div class="line"></div><div class="line">        &lt;!-- 我是在MAC系统进行打包所以这里是dmg文件 --&gt;  </div><div class="line"></div><div class="line">        &lt;bundler&gt;dmg&lt;/bundler&gt;  </div><div class="line"></div><div class="line">        &lt;!-- 指明打包后文件的存储位置 --&gt;  </div><div class="line"></div><div class="line">        &lt;jfxAppOutputDir&gt;$&#123;project.build.directory&#125;/app&lt;/jfxAppOutputDir&gt;  </div><div class="line"></div><div class="line">        &lt;nativeOutputDir&gt;$&#123;project.build.directory&#125;/native&lt;/nativeOutputDir&gt;  </div><div class="line"></div><div class="line">        &lt;appName&gt;Ticket&lt;/appName&gt;  </div><div class="line"></div><div class="line">        &lt;vendor&gt;net.gcl.ticket&lt;/vendor&gt;  </div><div class="line"></div><div class="line">    &lt;/configuration&gt;  </div><div class="line"></div><div class="line">&lt;/plugin&gt;</div></pre></td></tr></table></figure>
<ol>
<li>执行打包命令：</li>
</ol>
<pre><code class="java">mvn jfx:<span class="keyword">native</span>
</code></pre>
<p>dmg文件就会打包到指定的文件目录，不过我试了几次有时候在桌面，可能是intellij的bug吧。但是打包肯定成功，程序可以直接运行 </p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java并发编程之11——Future/ListenableFuture]]></title>
      <url>/2017/02/13/java-concurrent11-future-listenablefuture/</url>
      <content type="html"><![CDATA[<p>Java在最初的多线程实现程序<code>Thread</code>、<code>Runnable</code>之中，是没有返回值的。这样的接口带来了很多处理多线程程序的不便。所以后来又引入了<code>Callable</code>接口，以及与之对应的<code>Future</code>接口。这样我们的多线程程序提交到线程池执行的时候就可以返回一个<code>Future</code>对象。然后调用<code>Future.get()</code>就可以获取线程的返回值。  </p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>下面的两个例子给出了。多线程获取返回值的两种实现方式。一个是Java自己提供的原生Future，另外一个是Guava提供的封装接口ListenableFuture。 </p>
<h3 id="Java之Future示例"><a href="#Java之Future示例" class="headerlink" title="Java之Future示例"></a>Java之Future示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> <span class="comment">/*    </span></div><div class="line"> * Created by guochenglai on 2/13/17.  </div><div class="line"> */  </div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTest</span> </span>&#123;  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line"></div><div class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">3</span>);  </div><div class="line"></div><div class="line">        Future&lt;Cinema&gt; addressFuture = executorService.submit(<span class="keyword">new</span> Callable&lt;Cinema&gt;() &#123;  </div><div class="line"></div><div class="line">            <span class="meta">@Override</span>  </div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">public</span> Cinema <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line"></div><div class="line">                <span class="keyword">return</span> Cinema;  </div><div class="line"></div><div class="line">            &#125;  </div><div class="line"></div><div class="line">        &#125;);  </div><div class="line"></div><div class="line">        Future&lt;Movie&gt; movieFuture = executorService.submit(<span class="keyword">new</span> Callable&lt;Movie&gt;() &#123;  </div><div class="line"></div><div class="line">            <span class="meta">@Override</span>  </div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">public</span> Movie <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line"></div><div class="line">                <span class="keyword">return</span> Movie;  </div><div class="line"></div><div class="line">            &#125;  </div><div class="line"></div><div class="line">        &#125;);  </div><div class="line"></div><div class="line">        Cinema cinema = CiaddressFuture.get();  </div><div class="line"></div><div class="line">        Movie movie = movieFuture.get();  </div><div class="line"></div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Guava之ListenableFuture示例"><a href="#Guava之ListenableFuture示例" class="headerlink" title="Guava之ListenableFuture示例"></a>Guava之ListenableFuture示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> <span class="comment">/*    </span></div><div class="line"> * Created by guochenglai on 2/23/17.      </div><div class="line"> */  </div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListenableFutureTest</span> </span>&#123;  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line"></div><div class="line">        ListeningExecutorService executorService = MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(<span class="number">3</span>));  </div><div class="line"></div><div class="line">        ListenableFuture&lt;Cinema&gt; cinemaListenableFuture = executorService.submit(<span class="keyword">new</span> Callable&lt;Cinema&gt;() &#123;  </div><div class="line"></div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> Cinema <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line"></div><div class="line">                <span class="keyword">return</span> cinema;  </div><div class="line"></div><div class="line">            &#125;  </div><div class="line"></div><div class="line">        &#125;);  </div><div class="line"></div><div class="line">        Futures.addCallback(cinemaListenableFuture, <span class="keyword">new</span> FutureCallback&lt;Cinema&gt;() &#123;  </div><div class="line"></div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Cinema cinema)</span> </span>&#123;  </div><div class="line"></div><div class="line">            &#125;  </div><div class="line"></div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable throwable)</span> </span>&#123;  </div><div class="line"></div><div class="line">            &#125;  </div><div class="line"></div><div class="line">        &#125;);  </div><div class="line"></div><div class="line">  </div><div class="line"></div><div class="line">        ListenableFuture&lt;Movie&gt; movieListenableFuture = executorService.submit(<span class="keyword">new</span> Callable&lt;Movie&gt;() &#123;  </div><div class="line"></div><div class="line">            <span class="meta">@Override</span>  </div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">public</span> Movie <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line"></div><div class="line">                  </div><div class="line"></div><div class="line">                <span class="keyword">return</span> movie;  </div><div class="line"></div><div class="line">            &#125;  </div><div class="line"></div><div class="line">        &#125;);  </div><div class="line"></div><div class="line">        Futures.addCallback(movieListenableFuture, <span class="keyword">new</span> FutureCallback&lt;Movie&gt;() &#123;  </div><div class="line"></div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Movie movie)</span> </span>&#123;  </div><div class="line">    </div><div class="line">            &#125;  </div><div class="line"></div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable throwable)</span> </span>&#123;  </div><div class="line"></div><div class="line">            &#125;  </div><div class="line"></div><div class="line">        &#125;);  </div><div class="line"></div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Future与ListenableFuture对比"><a href="#Future与ListenableFuture对比" class="headerlink" title="Future与ListenableFuture对比"></a>Future与ListenableFuture对比</h2><p>通过上面的对比我们可以发现，使用Java的Future对象，我们必须自己去手动检查线程的返回结果。而在ListenableFuture中我们确不必这样。我们只需要写好回调函数即可。但是这并不能说明这两种实现谁更好。他们有着不同的适用场景。比如： </p>
<h3 id="使用Future的场景"><a href="#使用Future的场景" class="headerlink" title="使用Future的场景"></a>使用Future的场景</h3><ul>
<li>在一个方法中有多个外部IO，而在方法的最后需要整合这些IO的处理结果。</li>
</ul>
<h3 id="使用Listenable的场景"><a href="#使用Listenable的场景" class="headerlink" title="使用Listenable的场景"></a>使用Listenable的场景</h3><ul>
<li>在UI操作的中间步骤中，给出相应的步骤提示。</li>
</ul>
<h2 id="ListenableFuture对Future的扩展"><a href="#ListenableFuture对Future的扩展" class="headerlink" title="ListenableFuture对Future的扩展"></a>ListenableFuture对Future的扩展</h2><h3 id="JdkFutureAdapters-listenInPoolThread-future"><a href="#JdkFutureAdapters-listenInPoolThread-future" class="headerlink" title="JdkFutureAdapters.listenInPoolThread(future)"></a>JdkFutureAdapters.listenInPoolThread(future)</h3><p>JdkFutureAdapters.listenInPoolThread(future)是Guava提供的一种将JDK原生Future转化为ListenableFuture的方法。<br>例如： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Future&lt;Movie&gt; movieFuture = executorService.submit(<span class="keyword">new</span> Callable&lt;Movie&gt;() &#123;  </div><div class="line"></div><div class="line">    <span class="meta">@Override</span> </div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;    </div><div class="line">        <span class="keyword">return</span> Movie;  </div><div class="line">    &#125;  </div><div class="line">&#125;);  </div><div class="line"></div><div class="line">ListenableFuture&lt;Movie&gt; movieListenableFuture = JdkFutureAdapters.listenInPoolThread(movieFuture);</div></pre></td></tr></table></figure>
<h3 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h3><p>对ListenableFuture的返回值进行转化<br>例如： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Future&lt;Movie&gt; movieFuture = executorService.submit(<span class="keyword">new</span> Callable&lt;Movie&gt;() &#123;  </div><div class="line"></div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line">        <span class="keyword">return</span> Movie;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;);  </div><div class="line"></div><div class="line">  </div><div class="line"></div><div class="line">ListenableFuture&lt;UIMovie&gt; uiMovieListenableFuture = Futures.transform(movieFuture, <span class="keyword">new</span> AsyncFunction&lt;Movie, UIMovie&gt;() &#123;  </div><div class="line"></div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> ListenableFuture&lt;UIMovie&gt; <span class="title">apply</span><span class="params">(Movie i)</span> <span class="keyword">throws</span> Exception </span>&#123;            <span class="keyword">return</span> UIMovie;  </div><div class="line"></div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="allAsList"><a href="#allAsList" class="headerlink" title="allAsList"></a>allAsList</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">ListeningExecutorService executorService = MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(<span class="number">3</span>));  </div><div class="line">ListenableFuture&lt;Cinema&gt; cinemaListenableFuture1 = executorService.submit(<span class="keyword">new</span> Callable&lt;Cinema&gt;() &#123;  </div><div class="line"></div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> Cinema <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line">                <span class="keyword">return</span> cinema;  </div><div class="line">            &#125;  </div><div class="line"></div><div class="line">        &#125;);  </div><div class="line"></div><div class="line">ListenableFuture&lt;Cinema&gt; cinemaListenableFuture2 = executorService.submit(<span class="keyword">new</span> Callable&lt;Cinema&gt;() &#123;  </div><div class="line"></div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> Cinema <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line">                <span class="keyword">return</span> Cinema;  </div><div class="line">            &#125;  </div><div class="line"></div><div class="line">        &#125;);  </div><div class="line"></div><div class="line">ListenableFuture&lt;Cinema&gt; cinemaListenableFuture = Futures.allAsList(cinemaListenableFuture1, cinemaListenableFuture2);  </div><div class="line"></div><div class="line">ListenableFuture&lt;UICiema&gt; uiCiemaListenableFuture = Futures.transform(cinemaListenableFuture, <span class="keyword">new</span> AsyncFunction&lt;Cinema, UICineam&gt;() &#123;  </div><div class="line"></div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> ListenableFuture&lt;UICineam&gt; <span class="title">apply</span><span class="params">(Cinema i)</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line"></div><div class="line">            &#125;  </div><div class="line"></div><div class="line">        &#125;);</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> Java并发编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java并发编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java语法糖]]></title>
      <url>/2017/02/09/java-syntactic-sugar/</url>
      <content type="html"><![CDATA[<p>语法糖就是方便程序员使用但是对语言的功能没有影响的语法。Java语言提供很多的语法糖。学习和了解这些语法糖。有利于我们编写更好的代码以及对代码有更深的理解。<br><a id="more"></a></p>
<h2 id="常见语法糖"><a href="#常见语法糖" class="headerlink" title="常见语法糖"></a>常见语法糖</h2><p>到目前为止Java已经提供了10多种语法糖，下面这些语法糖是在我们日常开发中常见的 </p>
<h3 id="泛型与类型擦除"><a href="#泛型与类型擦除" class="headerlink" title="泛型与类型擦除"></a>泛型与类型擦除</h3><p>泛型与类型擦除是JDK1.5之后引入的最有名的语法糖。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; nameList = <span class="keyword">new</span> ArrayList&lt;&gt;();  </div><div class="line"></div><div class="line">nameList.add(<span class="string">"gcl"</span>);  </div><div class="line"></div><div class="line">nameList.add(<span class="string">"hpx"</span>);</div></pre></td></tr></table></figure>
<p>以上的代码被编译成字节码之后的代码如下： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">List nameList = <span class="keyword">new</span> ArrayList();  </div><div class="line"></div><div class="line">nameList.add(<span class="string">"gcl"</span>);  </div><div class="line"></div><div class="line">nameList.add(<span class="string">"hpx"</span>);</div></pre></td></tr></table></figure>
<p>可见在经过编译之后泛型类型就被擦除了。这也就是为什么不能使用泛型来作为重载参数。 </p>
<h3 id="枚举和字符串的switch"><a href="#枚举和字符串的switch" class="headerlink" title="枚举和字符串的switch"></a>枚举和字符串的switch</h3><p>对字符串的枚举是在Java7中引入的。在JDK1.7之前的版本中并不支持此语法。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">String name = <span class="string">"gcl"</span>;  </div><div class="line"><span class="keyword">switch</span> (name) &#123;  </div><div class="line"></div><div class="line">    <span class="keyword">case</span> <span class="string">"gcl"</span>:&#123;  </div><div class="line"></div><div class="line">        System.out.println(<span class="string">"good !!!"</span>);  </div><div class="line"></div><div class="line">        <span class="keyword">break</span>;  </div><div class="line"></div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    <span class="keyword">case</span> <span class="string">"hpx"</span>:&#123;  </div><div class="line"></div><div class="line">        System.out.println(<span class="string">"haha "</span>);  </div><div class="line"></div><div class="line">        <span class="keyword">break</span>;  </div><div class="line"></div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="try-with-resource定义关闭资源"><a href="#try-with-resource定义关闭资源" class="headerlink" title="try-with-resource定义关闭资源"></a>try-with-resource定义关闭资源</h3><p>我前面专门写过一遍文章 [使用try-with-resource改进代码异常处理机制][<a href="http://guochenglai.com/2016/06/01/try-with-resource/]专门介绍了如何使用这个语法糖。来解决解决资源关闭的问题。有兴趣的可以看看。下面只列出这种语法的写法。">http://guochenglai.com/2016/06/01/try-with-resource/]专门介绍了如何使用这个语法糖。来解决解决资源关闭的问题。有兴趣的可以看看。下面只列出这种语法的写法。</a> </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testExecuteQueryNew</span><span class="params">()</span> </span>&#123;    </div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;    </div><div class="line"></div><div class="line">            Class.forName(DRIVER_CLASS);    </div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;    </div><div class="line"></div><div class="line">            LOGGER.error(<span class="string">"can not find driver class"</span>,e);    </div><div class="line">            <span class="keyword">return</span>;    </div><div class="line"></div><div class="line">        &#125;    </div><div class="line"></div><div class="line">        <span class="keyword">try</span> (Connection connection = DriverManager.getConnection(URL, USER_NAME, PASSWORD); PreparedStatement preparedStatement = connection.prepareStatement(SQL); ResultSet resultSet = preparedStatement.executeQuery();) &#123;    </div><div class="line">        </div><div class="line">            <span class="keyword">if</span> (resultSet.next()) &#123;    </div><div class="line">        System.out.println(resultSet.getObject(<span class="number">1</span>)+<span class="string">" : "</span>+resultSet.getObject(<span class="number">2</span>));    </div><div class="line"></div><div class="line">            &#125;    </div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;    </div><div class="line"></div><div class="line">            e.printStackTrace();    </div><div class="line"></div><div class="line">        &#125;    </div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="自动装箱和拆箱"><a href="#自动装箱和拆箱" class="headerlink" title="自动装箱和拆箱"></a>自动装箱和拆箱</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">    Integer i = 1;  </div><div class="line">    </div><div class="line">    int j = i + 2;  </div><div class="line">```    </div><div class="line">    </div><div class="line"></div><div class="line">### for-each遍历 </div><div class="line">    </div><div class="line">```java</div><div class="line">    </div><div class="line">    List&lt;String&gt; nameList = new ArrayList&lt;&gt;();  </div><div class="line">    </div><div class="line">    for (String name : nameList) &#123;  </div><div class="line">    </div><div class="line">        System.out.println(name);  </div><div class="line">    </div><div class="line">    &#125;  </div><div class="line">```    </div><div class="line">    </div><div class="line"></div><div class="line">### 变长参数 </div><div class="line">    </div><div class="line">```java</div><div class="line">    </div><div class="line">    public int calculateSum(Integer... integers) &#123;  </div><div class="line">        int sum = 0;  </div><div class="line">        for (Integer tmp : integers) &#123;  </div><div class="line">            sum += tmp;  </div><div class="line">        &#125;  </div><div class="line">        return sum;  </div><div class="line">    </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> StateEnum &#123;  </div><div class="line"></div><div class="line">    VALID(<span class="number">1</span>,<span class="string">"状态有效"</span>),INVALID(<span class="number">0</span>,<span class="string">"状态无效"</span>), DELETE(<span class="number">2</span>, <span class="string">"被删除"</span>);  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> code;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String memo;  </div><div class="line"></div><div class="line">    StateEnum(<span class="keyword">int</span> code, String memo) &#123;  </div><div class="line">        <span class="keyword">this</span>.code = code;  </div><div class="line">        <span class="keyword">this</span>.memo = memo; </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> code;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMemo</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> memo;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat对URI和Parameter中文字符解码详解]]></title>
      <url>/2017/02/07/tomcat-encoding/</url>
      <content type="html"><![CDATA[<p>前段时间修改了一个web项目，遇到了一个bug是这样的：浏览器的header中的编码，服务器tomcat的编码，服务器机器默认编码，以及服务器代码的编码，都是UTF-8。服务器也在web.xml中使用字符编码过滤器，设置了UTF-8编码来进行字符串编码过滤。但是服务端接收到的参数却乱码。  </p>
<p>查了好就最后确定了问题的原因：web.xml中关于字符的编码的过滤器没有放到第一位，那么问题的原因到底是什么呢？我们先从下面的一个URL分析开始讲解。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line">    http://guochenglai.com/测试?param=测试  </div><div class="line">```    </div><div class="line">    </div><div class="line"></div><div class="line">可以看到这个URL参数中有两个地方出现了中文字符。一个是URI部分，有一个中文字符“测试”，一个是Parameter部分出现了中文字符“测试”。这个地方就会出现一个问题浏览器对URI和Parameter的编码是不一样的。URI的编码是你的程序中指定的如果JS指定为UTF-8这个编码就会是UTF-8编码。而Parameter的编码则是取决于用户电脑环境的默认编码设置，以及浏览器的设置（现在新版的浏览器基本都会采用UTF-8统一编码，）。那么服务器会怎样处理这个两个部分的字符的解码呢？ </div><div class="line"></div><div class="line">## Tomca对URI的解码规则 </div><div class="line"></div><div class="line">我们先看看Tomcat对URI的解码的源代码（我只摘抄了关于URL解码的源代码）： </div><div class="line">    </div><div class="line">```java</div><div class="line">    </div><div class="line">    public class CoyoteAdapter implements Adapter &#123;  </div><div class="line">        /**  </div><div class="line">         * Character conversion of the URI.  </div><div class="line">         */  </div><div class="line">        protected void convertURI(MessageBytes uri, Request request)   </div><div class="line">            throws Exception &#123;  </div><div class="line">    </div><div class="line">            ByteChunk bc = uri.getByteChunk();  </div><div class="line">    </div><div class="line">            int length = bc.getLength();  </div><div class="line">    </div><div class="line">            CharChunk cc = uri.getCharChunk();  </div><div class="line">    </div><div class="line">            cc.allocate(length, -1);  </div><div class="line">    </div><div class="line">            //先去拿配置conf/server.xml文件中connector属性中的编码的配置  </div><div class="line">    </div><div class="line">            String enc = connector.getURIEncoding();   </div><div class="line">    </div><div class="line">            if (enc != null) &#123;  </div><div class="line">    </div><div class="line">                B2CConverter conv = request.getURIConverter();  </div><div class="line">    </div><div class="line">                try &#123;  </div><div class="line">    </div><div class="line">                    if (conv == null) &#123;  </div><div class="line">    </div><div class="line">                        conv = new B2CConverter(enc);  </div><div class="line">    </div><div class="line">                        request.setURIConverter(conv);  </div><div class="line">    </div><div class="line">                    &#125;  </div><div class="line">    </div><div class="line">                &#125; catch (IOException e) &#123;  </div><div class="line">    </div><div class="line">                    // Ignore  </div><div class="line">    </div><div class="line">                    log.error("Invalid URI encoding; using HTTP default");  </div><div class="line">    </div><div class="line">                    connector.setURIEncoding(null);  </div><div class="line">    </div><div class="line">                &#125;  </div><div class="line">    </div><div class="line">                if (conv != null) &#123;  </div><div class="line">    </div><div class="line">                    try &#123;  </div><div class="line">    </div><div class="line">                        conv.convert(bc, cc, cc.getBuffer().length - cc.getEnd());  </div><div class="line">    </div><div class="line">                        uri.setChars(cc.getBuffer(), cc.getStart(),   </div><div class="line">    </div><div class="line">                                     cc.getLength());  </div><div class="line">    </div><div class="line">                        return;  </div><div class="line">    </div><div class="line">                    &#125; catch (IOException e) &#123;  </div><div class="line">                        log.error("Invalid URI character encoding; trying ascii");  </div><div class="line">                        cc.recycle();  </div><div class="line">                    &#125;  </div><div class="line">                &#125;   </div><div class="line">            &#125;  </div><div class="line">   </div><div class="line">            //如果配置文件没有配置URI的编码字符，则采用本系统默认的编码  </div><div class="line">    </div><div class="line">            byte[] bbuf = bc.getBuffer();  </div><div class="line">            char[] cbuf = cc.getBuffer();  </div><div class="line">            int start = bc.getStart();  </div><div class="line">    </div><div class="line">            for (int i = 0; i &lt; length; i++) &#123;  </div><div class="line">                cbuf[i] = (char) (bbuf[i + start] &amp; 0xff);  </div><div class="line">            &#125;   </div><div class="line">            uri.setChars(cbuf, 0, length);  </div><div class="line">   </div><div class="line">        &#125;   </div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>通过分析上面的可以看到Tomcat对URI的解码处理是通过两个步骤来完成的。第一步如果配置文件中配置了URI的解码，则按照配置文件的字符码解码，如果没有配置，则按照本系统默认的字符集进行解码我们这里服务器的默认字符集都是UTF-8。也就是说URI的这个部分如果客户端使用UTF-8编码，并且服务器在Connectors中也配置了UTF-8，那么这个是不会出现问题的。真正容易出现问题的是Parameter部分的解码。<br>附件：<br><code>tomcat root path –&gt;conf–&gt;server.xml</code>配置文件中关于connectors的配置如下：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;Connector port=<span class="string">"8888"</span> protocol=<span class="string">"HTTP/1.1"</span>  </div><div class="line"></div><div class="line">           maxThreads=<span class="string">"200"</span> connectionTimeout=<span class="string">"20000"</span>  </div><div class="line"></div><div class="line">           enableLookups=<span class="string">"false"</span> compression=<span class="string">"on"</span>  </div><div class="line"></div><div class="line">           redirectPort=<span class="string">"8443"</span>  </div><div class="line"></div><div class="line">           URIEncoding=<span class="string">"UTF-8"</span>  </div><div class="line"></div><div class="line">           compressableMimeType=<span class="string">"text/csv,text/html,text/xml,text/css,text/plain,text/javascript,application/javascript,application/x-javascript,application/json,application/xml"</span>  </div><div class="line"></div><div class="line">    /&gt;</div></pre></td></tr></table></figure>
<h2 id="Tomcat对Parameter的解码规则"><a href="#Tomcat对Parameter的解码规则" class="headerlink" title="Tomcat对Parameter的解码规则"></a>Tomcat对Parameter的解码规则</h2><p>我们项目出现问题的原因也就是没有理解Tomcat对Parameter解码的规则。其实Tomcat对Parameter的解码规则是如下的：  </p>
<ul>
<li>所有的Parameter中的参数都作为Parameter保存的  </li>
<li>Parameter的解码操作发生在第一次调用时。首先获取Request.setEncoding中对参数的编码（这个有两个地方设置1是客户端设置，2是服务器使用过滤器设置），并且查看是否将这个编码规则适用于URI的编码。  </li>
<li><p>如果没有就采用Tomcat的默认编码IOS8859-1，至于为什么默认是这个编码，原因是HTTP规范和Servlet规范都是默认使用这个编码。  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> <span class="keyword">implements</span> <span class="title">HttpServletRequest</span> </span>&#123;  </div><div class="line">    <span class="comment">/**  </span></div><div class="line">     * Parse request parameters.  </div><div class="line">     */  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseParameters</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="comment">//当调用这个方法解码参数时，就设置解码标志位true，这样以后就直接从缓存中拿解码参数  </span></div><div class="line">        parametersParsed = <span class="keyword">true</span>;  </div><div class="line">        <span class="comment">//先获取未被解码的参数  </span></div><div class="line"></div><div class="line">        Parameters parameters = coyoteRequest.getParameters();  </div><div class="line"></div><div class="line">        <span class="comment">//1  获取参数的解码字符编码，这里是获取的就是request.setEncoding中设置的字符编码  </span></div><div class="line"></div><div class="line">        String enc = getCharacterEncoding();  </div><div class="line"></div><div class="line">        <span class="comment">//下面就是判断request中是否设置了编码，如果设置了编码，就使用request的编码，如果没有设置编码，就是用Tomcat默认的编码ISO8859-1，注意不是别的。因为这个默认编码是继承自http1.0的默认编码规范  </span></div><div class="line"></div><div class="line">        <span class="keyword">boolean</span> useBodyEncodingForURI = connector.getUseBodyEncodingForURI();  </div><div class="line"></div><div class="line">        <span class="keyword">if</span> (enc != <span class="keyword">null</span>) &#123;  </div><div class="line"></div><div class="line">            <span class="comment">//设置参数的编码为enc  </span></div><div class="line"></div><div class="line">            parameters.setEncoding(enc);  </div><div class="line"></div><div class="line">            <span class="comment">//useBodyEncodingForURI也是connector中配置的属性，如果配置为True，这里就会设置URI的编码为enc,否则就使用connector中的URIEncoding设置的编码来解码URI  </span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> (useBodyEncodingForURI) &#123;  </div><div class="line">                parameters.setQueryStringEncoding(enc);  </div><div class="line">            &#125;  </div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line"></div><div class="line">            parameters.setEncoding  </div><div class="line">                (org.apache.coyote.Constants.DEFAULT_CHARACTER_ENCODING);  </div><div class="line"></div><div class="line">            <span class="keyword">if</span> (useBodyEncodingForURI) &#123;  </div><div class="line"></div><div class="line">                parameters.setQueryStringEncoding  </div><div class="line">     (org.apache.coyote.Constants.DEFAULT_CHARACTER_ENCODING);  </div><div class="line"></div><div class="line">            &#125;  </div><div class="line"></div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="comment">//按照上述获取的编码规则，来解析参数  </span></div><div class="line"></div><div class="line">        parameters.handleQueryParameters();  </div><div class="line"></div><div class="line">        <span class="keyword">if</span> (usingInputStream || usingReader)  </div><div class="line">            <span class="keyword">return</span>;  </div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!getMethod().equalsIgnoreCase(<span class="string">"POST"</span>)) </div><div class="line">            <span class="keyword">return</span>;  </div><div class="line"></div><div class="line">        String contentType = getContentType();  </div><div class="line"></div><div class="line">        <span class="keyword">if</span> (contentType == <span class="keyword">null</span>)  </div><div class="line"></div><div class="line">            contentType = <span class="string">""</span>;  </div><div class="line"></div><div class="line">        <span class="keyword">int</span> semicolon = contentType.indexOf(<span class="string">';'</span>);  </div><div class="line"></div><div class="line">        <span class="keyword">if</span> (semicolon &gt;= <span class="number">0</span>) &#123;  </div><div class="line"></div><div class="line">            contentType = contentType.substring(<span class="number">0</span>, semicolon).trim();  </div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line"></div><div class="line">            contentType = contentType.trim();  </div><div class="line"></div><div class="line">        &#125;  </div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="string">"multipart/form-data"</span>.equals(contentType)) &#123;  </div><div class="line"></div><div class="line">            parseParts();  </div><div class="line"></div><div class="line">            <span class="keyword">return</span>;  </div><div class="line"></div><div class="line">        &#125;  </div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!(<span class="string">"application/x-www-form-urlencoded"</span>.equals(contentType)))  </div><div class="line"></div><div class="line">            <span class="keyword">return</span>;  </div><div class="line"></div><div class="line">        <span class="keyword">int</span> len = getContentLength();  </div><div class="line"></div><div class="line">        <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;  </div><div class="line"></div><div class="line">            <span class="keyword">int</span> maxPostSize = connector.getMaxPostSize();  </div><div class="line"></div><div class="line">            <span class="keyword">if</span> ((maxPostSize &gt; <span class="number">0</span>) &amp;&amp; (len &gt; maxPostSize)) &#123;  </div><div class="line"></div><div class="line">                <span class="keyword">if</span> (context.getLogger().isDebugEnabled()) &#123;  </div><div class="line"></div><div class="line">                    context.getLogger().debug(  </div><div class="line"> sm.getString(<span class="string">"coyoteRequest.postTooLarge"</span>));  </div><div class="line"></div><div class="line">                &#125;  </div><div class="line"></div><div class="line">                <span class="keyword">return</span>;  </div><div class="line"></div><div class="line">            &#125;  </div><div class="line"></div><div class="line">            <span class="keyword">byte</span>[] formData = <span class="keyword">null</span>;  </div><div class="line"></div><div class="line">            <span class="keyword">if</span> (len &lt; CACHED_POST_LEN) &#123;  </div><div class="line"></div><div class="line">                <span class="keyword">if</span> (postData == <span class="keyword">null</span>)  </div><div class="line"></div><div class="line">                    postData = <span class="keyword">new</span> <span class="keyword">byte</span>[CACHED_POST_LEN];  </div><div class="line"></div><div class="line">                formData = postData;  </div><div class="line"></div><div class="line">            &#125; <span class="keyword">else</span> &#123;  </div><div class="line"></div><div class="line">                formData = <span class="keyword">new</span> <span class="keyword">byte</span>[len];  </div><div class="line"></div><div class="line">            &#125;  </div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;  </div><div class="line">                <span class="keyword">if</span> (readPostBody(formData, len) != len) &#123;  </div><div class="line">                    <span class="keyword">return</span>;  </div><div class="line"></div><div class="line">                &#125;  </div><div class="line"></div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;  </div><div class="line"></div><div class="line">                <span class="comment">// Client disconnect  </span></div><div class="line"></div><div class="line">                <span class="keyword">if</span> (context.getLogger().isDebugEnabled()) &#123;  </div><div class="line"></div><div class="line">                    context.getLogger().debug(  </div><div class="line">                            sm.getString(<span class="string">"coyoteRequest.parseParameters"</span>), e);  </div><div class="line"></div><div class="line">                &#125;  </div><div class="line"></div><div class="line">                <span class="keyword">return</span>;  </div><div class="line">            &#125;  </div><div class="line"></div><div class="line">            parameters.processParameters(formData, <span class="number">0</span>, len);  </div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"chunked"</span>.equalsIgnoreCase(  </div><div class="line"></div><div class="line">                coyoteRequest.getHeader(<span class="string">"transfer-encoding"</span>))) &#123;  </div><div class="line"></div><div class="line">            <span class="keyword">byte</span>[] formData = <span class="keyword">null</span>;  </div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;  </div><div class="line"></div><div class="line">                formData = readChunkedPostBody();  </div><div class="line"></div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;  </div><div class="line"></div><div class="line">                <span class="comment">// Client disconnect  </span></div><div class="line"></div><div class="line">                <span class="keyword">if</span> (context.getLogger().isDebugEnabled()) &#123;  </div><div class="line"></div><div class="line">                    context.getLogger().debug(  </div><div class="line">    sm.getString(<span class="string">"coyoteRequest.parseParameters"</span>), e);  </div><div class="line"></div><div class="line">                &#125;  </div><div class="line"></div><div class="line">                <span class="keyword">return</span>;  </div><div class="line"></div><div class="line">            &#125;  </div><div class="line"></div><div class="line">            <span class="keyword">if</span> (formData != <span class="keyword">null</span>) &#123;  </div><div class="line"></div><div class="line">                parameters.processParameters(formData, <span class="number">0</span>, formData.length);  </div><div class="line"></div><div class="line">            &#125;  </div><div class="line"></div><div class="line">        &#125;  </div><div class="line"></div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>通过分析Parameter的参数编码规则可以看到我们代码的问题。我们现在的代码都没有在客户端显示设置<code>request.setEncoding=XXXX</code>，采用的替代方案是在服务器的web.xml中采用过滤器，过滤每个请求设置这个参数。而如果没有把过滤器放在第一位。就会出现一个问题，会采用Tomcat的默认编码IOS8859-1，来解析参数。这也就是为什么我的代码里面所有地方都设置了UTF-8编码。最后也会出现乱码的原因。所以这里提醒大家一定要把web.xml中关于字符编码的过滤器放在第一位。</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AppleScript简明教程]]></title>
      <url>/2017/02/06/apple-script-guide/</url>
      <content type="html"><![CDATA[<p>AppleScript是一个类似英语语法的语言。有直观、简单、易读、易学的特点。不会程序的人一会儿也能入门，并编写一些提高工作效率的软件，使用Mac的用户基本都应该会一点。如果你使用AlfredWorkflow那么AppleScript和它结合开发workflow简直是神兵利器。 </p>
<a id="more"></a>
<h2 id="AppleScript的编辑器"><a href="#AppleScript的编辑器" class="headerlink" title="AppleScript的编辑器"></a>AppleScript的编辑器</h2><p>Mac电脑提供了一个专门用来开发调试AppleScript的编辑器，在 <code>Application –&gt; Utilities –&gt; ScriptEditor</code>中，软件的图标如下：<br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/2017020614863818239547.png" alt=""><br>个人觉得就AppleScript的简单程度来说。这个软件已经足够使用了。当然如果你不满意这个软件。网上还有一些收费软件。读者可以自行Google下载。这里我还要给你推荐一个软件那就是大名鼎鼎的<code>JetBrains Intellij Idea</code>这个是用来开发Java程序的。但是里面提供了AppleScript脚本的插件。安装上这个插件之后，当你编写AppleScript脚本时候会自动弹出代码提示。非常方便。 </p>
<h2 id="HelloWord"><a href="#HelloWord" class="headerlink" title="HelloWord"></a>HelloWord</h2><p>新建一个名叫<code>Hello.scpt</code>的文件。然后双击打开，此时默认使用ScriptEditor打开。在编辑框输入如下内容。然后点击横线所示的三角运行，就会在finder中显示Hello。如下图所示：  </p>
<p><img src="http://7xutce.com2.z0.glb.qiniucdn.com/20170206148638278423152.png" alt=""><br>代码如下: </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tell application <span class="string">"Finder"</span>  </div><div class="line">  display dialog <span class="string">"Hello"</span>  </div><div class="line">end tell</div></pre></td></tr></table></figure>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><strong>Boolean（布尔型）</strong></p>
<p>仅仅包含两个值：True和False </p>
<p><strong>Number（数字型）、Integer（整型）和Real（实型）</strong></p>
<p>如：1，2，1.0，1.1，3.14，-1.56<br>Number类可进一步分为Integer（整数型）和Real（实数型）。 </p>
<p><strong>Text（文本型）和 String（字符串型）</strong></p>
<p>如：”This is a text”。 请注意引号为英文引号，以后都是这样。<br>在目前的AppleScript中，Text和String两个类型是一致的7。 </p>
<p><strong>Date（日期型）</strong></p>
<p>如：date “2009年8月30日星期日 下午12:31:34”。<br>此格式的具体形式由“系统偏好设置-语言与文本”的相关设置决定。 </p>
<p><strong>Constant（常量型）</strong></p>
<p>如：yes，no，ask<br>这些常量可以是已经被AppleScript预定义的，也可以是用户定义的不可变变量。这种<br>类型的数据一经确定不可更改。此外可以认为所有关键字都是常量型的数据 </p>
<p><strong>List（列表型）</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;，&#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;a,b,c&#125;,&#125;，&#123;<span class="number">1</span>,<span class="number">1.9</span>, <span class="string">"text"</span>&#125;</div></pre></td></tr></table></figure>
<p>列表型数据由{}包裹，一个列表中可以再包含列表，形成多维列表，列表里的具体数<br>据可以是同类型的。 </p>
<p><strong>Record（记录型）</strong></p>
<p>如：{firstName:”iDoraemon”, lastName:”Nathan”}<br>记录就是带有名称的列表。记录中的每一项都有名称（标识符）。我们可以认为List<br>是每个数据都是匿名的Record。Record也可以进一步包含另一个Record。<br>此例中，包含两个Text型数据 “iDoraemon”和 “Nathan”，它们的标识符分别是<br>firstName和lastName。通过of关键字可以得到想要的数据：<br>firstName of {firstName:”iDoraemon”, lastName:”Nathan”} </p>
<h2 id="执行shell脚本"><a href="#执行shell脚本" class="headerlink" title="执行shell脚本"></a>执行shell脚本</h2><p>AppleScript中执行shell脚本的语法模板如下：<code>do shell script “ 这里填入shell脚本 “</code><br>例如在AppleScript中执行shell脚本，关闭本机WiFi功能。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">do</span> shell script <span class="string">"networksetup -setairportpower en1 off"</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Mac常用技巧 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac常用技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sublime3技巧]]></title>
      <url>/2017/02/04/sublime-guide/</url>
      <content type="html"><![CDATA[<h2 id="命令行打开sublime"><a href="#命令行打开sublime" class="headerlink" title="命令行打开sublime"></a>命令行打开sublime</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">ln -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/sublime</div></pre></td></tr></table></figure>
<p>这样以后在使用sublime打开文件的时候可以直接在命令行打开，例如我要打开<code>test.json</code><br>则可以直接在命令行输入如下： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sublime test.json</div></pre></td></tr></table></figure>
<h2 id="安装package-control"><a href="#安装package-control" class="headerlink" title="安装package-control"></a>安装package-control</h2><p>package-control是sublime用来安装插件的一个插件。有了他可以很方便地在线安装各种牛逼的插件。<br><code>view–&gt;showConsule</code>在最下面的那个小横条中粘贴如下的python代码： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> urllib.request,os,hashlib; h = <span class="string">'df21e130d211cfc94d9b0905775a7c0f'</span> + <span class="string">'1e3d39e33b79698005270310898eea76'</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class="string">'http://packagecontrol.io/'</span> + pf.replace(<span class="string">' '</span>, <span class="string">'%20'</span>)).read(); dh = hashlib.sha256(by).hexdigest(); print(<span class="string">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class="keyword">if</span> dh != <span class="function">h <span class="keyword">else</span> <span class="title">open</span><span class="params">(os.path.join( ipp, pf)</span>, 'wb' ).<span class="title">write</span><span class="params">(by)</span></span></div></pre></td></tr></table></figure>
<p>等待上述操作完成就可以自由安装插件了。这时候按下<code>command + shift + p</code> 输入<code>install</code><br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/20170206148634653631842.png" alt=""><br>选择<code>Install Package</code>我们以安装一个<code>json</code>插件为例：<br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/2017020614863466514309.png" alt=""><br>安装完成之后。就可以自由格式化我们输入的json字符串了。 </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[pac-backup]]></title>
      <url>/2017/02/03/pac-backup/</url>
      <content type="html"><![CDATA[<p><a href="https://raw.githubusercontent.com/guochenglai/gfw/master/glwlist.pac" target="_blank" rel="external">https://raw.githubusercontent.com/guochenglai/gfw/master/glwlist.pac</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Alfred Workflow 自动切换网络和代理]]></title>
      <url>/2017/01/28/mac-auto-proxy/</url>
      <content type="html"><![CDATA[<p>公司有一个翻墙的pac代理。我自己也买了一个shadowsocket代理。但是公司的代理的速度明显比我自己的要快。所以决定在公司使用公司的代理pac文件，在家使用自己shadowsocket的代理。但是手工切换的方式比较不友好，每次需要打开<code>system –&gt;network –&gt;advance–&gt;auto proxy</code>来手动更改代理文件的设置。非常麻烦而且容易忘记。我们完全可以采用如下的一种全自动的方式来实现。代理的自动切换。  </p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>本文使用Alfred的workflow来建立两个工作流当在Alfred的输入框中输入<code>home</code>的时候，就自动打开<code>WiFi</code>并打开<code>shadowsocket</code>使用自己的代理。当在公司的时候，就关闭<code>WiFi</code>关闭<code>shadowscoket</code>并修改<code>network</code>中的<code>Automatic Proxy Configuration</code><br>到公司的pac文件。如下图所示<br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/20170206148637911339907.png" alt=""></p>
<h2 id="办公网络切换至家庭网络"><a href="#办公网络切换至家庭网络" class="headerlink" title="办公网络切换至家庭网络"></a>办公网络切换至家庭网络</h2><ol>
<li>点击Alfred workflow的左下角<code>+号</code>选择<code>BlankWorkflow</code>新建一个空的workflow如下图所示：<br>![][2]</li>
<li>选择新建之后会出现如下的文本框。在红色下划线上输入你自己的内容（这个随意填写，自己知道就行，也可以照我的例子填写）<br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/20170206148637945561652.png" alt=""></li>
<li>在空白的画布上右击选择<code>inputs–&gt;keyword</code><br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/20170206148637962071241.png" alt=""></li>
<li>出现如下的界面KeyWord中填写一个名字（注意这里名字不能乱写，要易于记忆，比如我要做的是将网络环境切换到家庭网络，所以我这里取名为home）<br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/20170206148637970456228.png" alt=""></li>
<li>继续，新建一个script如下图：<br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/20170206148637994874734.png" alt=""><br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/20170206148638003119113.png" alt=""><br>script的代码如下：</li>
</ol>
<pre><code>[2]: http://7xutce.com2.z0.glb.qiniucdn.com/20170206148637927731477.png
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">do</span> shell script <span class="string">"open /Applications/ShadowsocksX.app"</span>  </div><div class="line"></div><div class="line"><span class="keyword">do</span> shell script <span class="string">"networksetup -setairportpower en1 on"</span></div></pre></td></tr></table></figure>
<ol>
<li>将<code>Keyword</code>与<code>Run Script</code>链接起来如下图所示。<br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/20170206148638018027578.png" alt=""></li>
<li>至此自动切换到家庭网络的功能已经完成。</li>
</ol>
<h2 id="家庭网络切换至办公网络"><a href="#家庭网络切换至办公网络" class="headerlink" title="家庭网络切换至办公网络"></a>家庭网络切换至办公网络</h2><p>家庭网络切换至办公网络和上面的过程类似。下面我只贴出script代码：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line">tell application <span class="string">"ShadowsocksX"</span>  </div><div class="line"></div><div class="line">        quit  </div><div class="line"></div><div class="line">end tell  </div><div class="line"></div><div class="line"><span class="keyword">do</span> shell script <span class="string">"sudo networksetup -setautoproxyurl 'Ethernet' '这里填入公司给你的pac文件.pac' "</span>  </div><div class="line"></div><div class="line"><span class="keyword">do</span> shell script <span class="string">"networksetup -setairportpower en1 off"</span></div></pre></td></tr></table></figure></p>
<p>整个操作完成之后如下图所示。<br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/20170206148638043747633.png" alt=""></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用<code>alt+ space</code>调出Alfred的输入框。输入<code>home</code>就会切换至wifi,并使用shdowsocket作为代理上网。输入<code>qunar</code>就会切换至公司有线网络。并只用公司自己的翻墙代理上网。如下图：<br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/20170206148638067658321.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Mac常用技巧 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac常用技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mac软件设置启动快捷键]]></title>
      <url>/2017/01/22/mac-software-shortcut/</url>
      <content type="html"><![CDATA[<p>Linux系统设置了非常多的软件系统快捷键。例如在Ubuntu系统中可以按<code>ctrl + shift + t</code> 启动用户终端。但是Mac系统并没有提供这些软件启动的快捷键。如下介绍一个方法可以为Mac的任意软件设置启动快捷键。  </p>
<a id="more"></a>
<p>首先打开Application中的Automator软件：如下图所示：<br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/20170203148611077767969.png" alt=""><br>选择<code>Service</code><br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/20170203148611080438397.png" alt=""><br>然后会出现如下的界面：<br>选择 Utilities –&gt; Launch Application<br>在service recevies中选择”no input”，然后在launch application下面选择需要快捷打开的软件如下图所示：<br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/20170203148611084557651.png" alt=""><br>当完成上述操作之后。点击保存为软件起一个名称。这里需要记住你所起的名称。 </p>
<p>打开System–&gt;keyboard–&gt;shortcuts–&gt;service–&gt;general<br>找到你刚才起名字的那个软件，然后在后面添加自己的快捷键，如下图所示即可。<br><img src="http://7xutce.com2.z0.glb.qiniucdn.com/2017020314861108802584.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Mac常用技巧 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac常用技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[InputStream读取问题]]></title>
      <url>/2016/10/30/inputstream-to-byte/</url>
      <content type="html"><![CDATA[<p>最近写了一个项目，需要将HTTP请求的数据读取到一个byte数组中。我的写法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//下面这段代码想做到的功能大概是：先获取inputStream中数据内容的大小。然后实例化一个数组。最后将所有的数据内容读取到这个数组之中。  </span></div><div class="line"></div><div class="line"><span class="keyword">try</span> (InputStream inputStream = httpResponse.getEntity().getContent()) &#123;  </div><div class="line">            <span class="keyword">int</span> size = inputStream.available();  </div><div class="line">            <span class="keyword">byte</span>[] dataContent = <span class="keyword">new</span> <span class="keyword">byte</span>[size];  </div><div class="line">            inputStream.read(dataContent);  </div><div class="line">            <span class="keyword">return</span> dataContent;  </div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;  </div><div class="line">    logger.error(<span class="string">"download qrcode cause exception"</span>, e);  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码看起来没什么问题。但是最后测试的时候，总是发现数据和想象中的不一样。搜了好久也没有看到解决方案，于是决定去看Java中InputStream的代码，这个代码其实有两个错误的地方。分别是对available函数和read函数的理解。下面我们看看Java源代码中对着两个函数的解释。 </p>
<p>首先看看available()函数  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**  </span></div><div class="line">     * Returns an estimate of the number of bytes that can be read (or  </div><div class="line">     * skipped over) from this input stream without blocking by the next  </div><div class="line">     * invocation of a method for this input stream. The next invocation  </div><div class="line">     * might be the same thread or another thread.  A single read or skip of this  </div><div class="line">     * many bytes will not block, but may read or skip fewer bytes.  </div><div class="line">     *  </div><div class="line">     * &lt;p&gt; Note that while some implementations of &#123;<span class="doctag">@code</span> InputStream&#125; will return  </div><div class="line">     * the total number of bytes in the stream, many will not.  It is  </div><div class="line">     * never correct to use the return value of this method to allocate  </div><div class="line">     * a buffer intended to hold all data in this stream.  </div><div class="line">     *  </div><div class="line">     * &lt;p&gt; A subclass' implementation of this method may choose to throw an  </div><div class="line">     * &#123;<span class="doctag">@link</span> IOException&#125; if this input stream has been closed by  </div><div class="line">     * invoking the &#123;<span class="doctag">@link</span> #close()&#125; method.  </div><div class="line">     *  </div><div class="line">     * &lt;p&gt; The &#123;<span class="doctag">@code</span> available&#125; method for class &#123;<span class="doctag">@code</span> InputStream&#125; always  </div><div class="line">     * returns &#123;<span class="doctag">@code</span> 0&#125;.  </div><div class="line">     *  </div><div class="line">     * &lt;p&gt; This method should be overridden by subclasses.  </div><div class="line">     *  </div><div class="line">     * <span class="doctag">@return</span>     an estimate of the number of bytes that can be read (or skipped  </div><div class="line">     *             over) from this input stream without blocking or &#123;<span class="doctag">@code</span> 0&#125; when  </div><div class="line">     *             it reaches the end of the input stream.  </div><div class="line">     * <span class="doctag">@exception</span>  IOException if an I/O error occurs.  </div><div class="line">     */  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">available</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//这里可以看到available函数默认值返回的是0，可能具体的实现方式返回的数值不同，但是可以肯定的一点是。这里返回的不是HTTP请求所获取的总数据的长度。  </span></div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>上面的注释的意思大概是，这个函数返回一个从inputStream中获取数据的估计值（注意不是精确值）。这个值也可能是0。一般情况下不是数据的总量。 </p>
<p>再看看read()函数 </p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**  </span></div><div class="line"> * Reads some number of bytes from the input stream and stores them into  </div><div class="line"> * the buffer array &lt;code&gt;b&lt;/code&gt;. The number of bytes actually read is  </div><div class="line"> * returned as an integer.  This method blocks until input data is  </div><div class="line"> * available, end of file is detected, or an exception is thrown.  </div><div class="line"> *  </div><div class="line"> * &lt;p&gt; If the length of &lt;code&gt;b&lt;/code&gt; is zero, then no bytes are read and  </div><div class="line"> * &lt;code&gt;0&lt;/code&gt; is returned; otherwise, there is an attempt to read at  </div><div class="line"> * least one byte. If no byte is available because the stream is at the  </div><div class="line"> * end of the file, the value &lt;code&gt;-1&lt;/code&gt; is returned; otherwise, at </div><div class="line"> * least one byte is read and stored into &lt;code&gt;b&lt;/code&gt;.  </div><div class="line"> *  </div><div class="line"> * &lt;p&gt; The first byte read is stored into element &lt;code&gt;b[0]&lt;/code&gt;, the  </div><div class="line"> * next one into &lt;code&gt;b[1]&lt;/code&gt;, and so on. The number of bytes read is,  </div><div class="line"> * at most, equal to the length of &lt;code&gt;b&lt;/code&gt;. Let &lt;i&gt;k&lt;/i&gt; be the  </div><div class="line"> * number of bytes actually read; these bytes will be stored in elements  </div><div class="line"> * &lt;code&gt;b[0]&lt;/code&gt; through &lt;code&gt;b[&lt;/code&gt;&lt;i&gt;k&lt;/i&gt;&lt;code&gt;-1]&lt;/code&gt;,  </div><div class="line"> * leaving elements &lt;code&gt;b[&lt;/code&gt;&lt;i&gt;k&lt;/i&gt;&lt;code&gt;]&lt;/code&gt; through  </div><div class="line"> * &lt;code&gt;b[b.length-1]&lt;/code&gt; unaffected.  </div><div class="line"> *  </div><div class="line"> * &lt;p&gt; The &lt;code&gt;read(b)&lt;/code&gt; method for class &lt;code&gt;InputStream&lt;/code&gt;  </div><div class="line"> * has the same effect as: &lt;pre&gt;&lt;code&gt; read(b, 0, b.length) &lt;/code&gt;&lt;/pre&gt;  </div><div class="line"> *  </div><div class="line"> * <span class="doctag">@param</span>      b   the buffer into which the data is read.  </div><div class="line"> * <span class="doctag">@return</span>     the total number of bytes read into the buffer, or  </div><div class="line"> *             &lt;code&gt;-1&lt;/code&gt; if there is no more data because the end of  </div><div class="line"> *             the stream has been reached.  </div><div class="line"> * <span class="doctag">@exception</span>  IOException  If the first byte cannot be read for any reason  </div><div class="line"> * other than the end of the file, if the input stream has been closed, or  </div><div class="line"> * if some other I/O error occurs.  </div><div class="line"> * <span class="doctag">@exception</span>  NullPointerException  if &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;. </div><div class="line"> * <span class="doctag">@see</span>        java.io.InputStream#read(byte[], int, int)  </div><div class="line"> */  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span> b[])</span> <span class="keyword">throws</span> IOException </span>&#123;  </div><div class="line"></div><div class="line">    <span class="keyword">return</span> read(b, <span class="number">0</span>, b.length);  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>read函数的解释是读取byte数组中的内容，能够读取到多少就读取多少。将实际读取的内容存放在byte数组中。 所以这里也不是你传递数据大小是多少就读取多少的内容。<br>。分析到这里相信大家明白了我上述例子中代码的问题。那么要实现这个功能有没有比较简单的方法呢？其实是有的。很多的工具类都提供了这个解决方案。例如Apache和Guava。下面提供一种guava的实现方案。具体的实现我就不分析了，有兴趣可以去看看guava的源代码。 </p>
<p>guava的实现：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"><span class="keyword">try</span> (InputStream inputStream = httpResponse.getEntity().getContent()) &#123;  </div><div class="line"></div><div class="line">           <span class="keyword">byte</span>[] dataContent = ByteStreams.toByteArray(inputStream);  </div><div class="line"></div><div class="line">           <span class="keyword">return</span> dataContent;  </div><div class="line"></div><div class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;  </div><div class="line"></div><div class="line">           logger.error(<span class="string">"download qrcode cause exception"</span>, e);  </div><div class="line"></div><div class="line">       &#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux恢复误删除的文件]]></title>
      <url>/2016/10/14/linux-find-deleted-file/</url>
      <content type="html"><![CDATA[<p>使用过Linux的同学，一定都有过错误使用<code>rm -rf</code>命令的经过。一旦使用错误就会将宝贵的资源删除掉。如果后续的处理不当将会造成不可恢复的后果。本文将浅析Linux文件删除的原理，并提供一个简单的方法恢复被删除的文件。  </p>
<a id="more"></a>
<h2 id="文件删除的原理"><a href="#文件删除的原理" class="headerlink" title="文件删除的原理"></a>文件删除的原理</h2><p>所有的文件都是以二进制存储在磁盘上的一个磁盘块（称为磁盘节点）。我们每创建一个文件在磁盘上创建一个磁盘节点，并创建一个指针指向磁盘块。然后删除文件的时候，并不是删除磁盘节点，而是将指向磁盘节点的指针减一，当一个磁盘节点的指针减少到0之后，表示这个磁盘节点对应的文件已经没有引用了，那么这个磁盘节点就可以被其他的进程重写。当其他的进程将该磁盘块写完之后。文件内容才会彻底没有。所以理论上当其他进程没有完全写完一个磁盘节点的时候，被误删除的文件总是能够全部或者部分恢复。根据上面的文件删除过程我们可以按照文件恢复的难度划分为如下三个恢复点： </p>
<ul>
<li>1 文件的引用标识没有被删除到0的时候。此时被删除的文件可以完全恢复。</li>
<li>2 文件的引用标识被删除到0了，但是其他进程没有重写此磁盘。理论上被删除的文件可以完全恢复。</li>
<li>3 文件的引用标识被删除到0了，此磁盘块被其他进行重写了一部分。理论上被删除的文件可以部分恢复。</li>
</ul>
<p>本文将介绍第一个阶段的文件如果恢复。注意要想被删除的文件状态停留在第一个阶段。必须有一个前提：占用被删除文件的进程没有被关闭！！！(所以删除文件之后一定要冷静，一定不要关机或者重启)如果占用被删除文件的进程以及被关闭。那么会直接进入，第二或者第三个阶段。恢复文件的难度要大大增加。目前我还在尝试处于第二或者第三阶段的文件恢复方法。如果成功。会在后面的文章之中继续更新。 </p>
<p>下面是为啥不能关闭占用被删除文件的进程的原因：<br>Linux系统所有项目都是用文件来表示的包括系统的文件，端口，进程，Linux系统没启动一个进程都会在<code>/proc</code>目录下面建立一个文件夹，然后改进程的所有项目，都会在该文件夹下面用一个文件来表示。当执行<code>rm -rf</code>删除一个文件之后此时的文件对应的磁盘块的指针并没有减少到0。因为在/prco目录下面还会有对文件的指针。下面将以一个例子来介绍。如果利用这个文件的指针恢复被删除的文件。 </p>
<h2 id="误删除文件恢复详细教程"><a href="#误删除文件恢复详细教程" class="headerlink" title="误删除文件恢复详细教程"></a>误删除文件恢复详细教程</h2><p>假设我们有一个Java进程（进程号：23245）在写一个日志文件catalina.out。我们就删除这个文件。然后讲述怎么恢复这个文件。<br>1 删除文件执行：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo rm -rf catalina.out</div></pre></td></tr></table></figure>
<p><img src="http://7xutce.com1.z0.glb.clouddn.com/20161018147677833260093.jpg?imageView2/0/format/jpg" alt=""><br>现在文件以及被删除了。此时占用次文件的进程并没有被关闭。所以此时磁盘节点的指针为1，不是0。<br>2 查看进程被删除的文件。但是文件指针大于0的文件。<br><img src="http://7xutce.com1.z0.glb.clouddn.com/20161018147677856294380.jpg?imageView2/0/format/jpg" alt=""><br>可以看到：1标准输出，2标准错误输出都指向了这个文件。<br>3 执行恢复操作恢复文件。<br><img src="http://7xutce.com1.z0.glb.clouddn.com/20161018147677876780784.jpg?imageView2/0/format/jpg" alt=""><br>4 查看test.out的内容发现test.out就是我们要恢复的catalina.out的文件的内容。<br>如果想要批量自动恢复文件读者可以自己写一个脚本。应该很简单了吧。 </p>
]]></content>
      
        <categories>
            
            <category> Linux常用技巧 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux常用技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决Mac电脑端口被占用]]></title>
      <url>/2016/09/30/fix-mac-port-occupy/</url>
      <content type="html"><![CDATA[<p>在日常开发过程中经常遇到端口被占用的情况。这种情况的一般解决思路是:首先找到找到本端口占用的进程的进程号，然后杀掉该进程号对应的进程。Ubuntu/Centos/RedHat等Linux操作系统下一般采用如下的方法。  </p>
<a id="more"></a>
<p>1 找到被占用端口的进程。我们以43900端口为例：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo netstat -nap | grep <span class="number">43900</span></div></pre></td></tr></table></figure>
<p>输出如下：  </p>
<p><img src="http://7xutce.com1.z0.glb.clouddn.com/20160930147520783710797.jpg?imageView2/0/format/jpg" alt=""><br>2 可以看到43900端口是被进程号为26456的Java进程所占用。如果在确认该进程无用的情况下可以执行如下的命令杀掉该进程，那么端口占用就会被解决：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo kill -<span class="number">9</span> <span class="number">26456</span></div></pre></td></tr></table></figure>
<p>MAC解决方案<br>但是在MAC系统中没有netstat命令。我们可以用lsof(list open file)来找到占用端口的进程。然后后面的操作一样。<br>1 找到占用端口的进程：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo lsof -i -n -P | grep <span class="number">8080</span></div></pre></td></tr></table></figure></p>
<p>输出如下：</p>
<p><img src="http://7xutce.com1.z0.glb.clouddn.com/20160930147520857940747.jpg?imageView2/0/format/jpg" alt=""><br>2 杀掉占用端口的进程：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo kill -<span class="number">9</span> <span class="number">49406</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Mac常用技巧 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac常用技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[百度无法爬取Github Pages静态网站解决方案]]></title>
      <url>/2016/09/26/baidu-crow-github-page/</url>
      <content type="html"><![CDATA[<p>在Github Pages上面托管了自己的静态博客，经过一段时间的运行发现自己网站的流量基本都是来自与谷歌、必应、搜狗等等搜索引擎，确没有百度的搜索引擎的流量，最后谷歌一下发现原因是：  </p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">百度爬取GitHub太频繁了，甚至引起了GitHub的服务不稳</div><div class="line">定，最后GitHub直接把百度屏蔽了，也就是说，所有托管</div><div class="line">到GitHub Pages上的静态博客都是无法被百度搜索到。</div></pre></td></tr></table></figure>
<p>可以用如下的方法进行验证：<br>打开百度站长平台—&gt;网页抓取—-&gt;抓取诊断。然后点击抓取。完成之后发现抓取状态是失败。这时候点击进入详情发现，返回的HTPP状态是<code>HTTP/1.0 403 Forbidden</code>（403表示链接被拒绝）。如下： </p>
<p><img src="http://7xutce.com1.z0.glb.clouddn.com/20160926147488124746928.jpg?imageView2/0/format/jpg" alt=""><br>解决这个问题可以有很多的方案，比如： </p>
<ol>
<li>自己买个VPS云主机，将自己的博客发布到云主机上面。这个做法的缺点是：成本较高，我们采用GitHub Pages托管静态博客就是为了节省成本。所以这种方案显然是不可行的。</li>
<li>将自己的服务托管到Coding上（前身是GitCafe，是国内模仿了一个GitHub，他们的关系可以理解成百度和谷歌的关系）。Coding完全模仿了GitHub 也提供了静态博客Pages服务。如果目前客户只是国内的用户，方案二应该是最简单可行的方案</li>
<li>将自己的博客分别搭建在Coding Pages和GitHub Pages上，然后配置DNS的时候选择让国内的线路流量打到Coding上，其他的线路流量打到GitHub上。因为百度在国内，所以百度抓取的时候会去Coding上面抓取。所以这种方案应该是最理想的方案。</li>
</ol>
<p><strong><em>下面是方案三的具体实现</em>：</strong></p>
<h2 id="将静态Pages同时托管到Coding和GitHub上"><a href="#将静态Pages同时托管到Coding和GitHub上" class="headerlink" title="将静态Pages同时托管到Coding和GitHub上"></a>将静态Pages同时托管到Coding和GitHub上</h2><h3 id="注册Coding并开启Pages服务"><a href="#注册Coding并开启Pages服务" class="headerlink" title="注册Coding并开启Pages服务"></a>注册Coding并开启Pages服务</h3><p>这个过程和GitHub的配置基本一样，只需要注意如下五点： </p>
<p>1 项目的名称必须和用户名一致。例如我的用户名叫:guochenglai，项目名称也应该叫:guochenglai。否则会出现静态文件路径不对的问题。比如没有样式。<br>2 项目必须是共有的。<br>3 开启Pages的时候注意分支问题。你项目的分支在master，但是pages服务默认分支不是，这个记得修改。<br>4 需要将你的CNAME文件也推送到Coding项目的根目录上<br>5 需要绑定自己的域名，如下图：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/20160926147488246182051.jpg?imageView2/0/format/jpg" alt=""><br>验证Coding Pages配置成功可以在浏览器输入Pages服务地址：<code>guochenglai.coding.me</code>(改成你的项目名和用户名)如果网页正常出现。说明配置成功。 </p>
<h3 id="将Pages实现双部署"><a href="#将Pages实现双部署" class="headerlink" title="将Pages实现双部署"></a>将Pages实现双部署</h3><p>修改hexo的根配置文件。将deploy选项修改如下： </p>
<pre><code class="java"># Deployment  
## Docs: https://hexo.io/docs/deployment.html  
deploy:   
  type: git  
  branch: master  
  repo:   
    github: git@github.com:guochenglai/guochenglai.github.io.git ##这里是你的GitHub Pages项目  
    coding: git@git.coding.net:guochenglai/guochenglai.git ## 这里是你的Coding项目
</code></pre>
<h2 id="注册dnspod配置dns流量分发"><a href="#注册dnspod配置dns流量分发" class="headerlink" title="注册dnspod配置dns流量分发"></a>注册dnspod配置dns流量分发</h2><p>因为我的域名是在阿里云购买的。所以这里已阿里云使用dnspod解析域名为例。 </p>
<h3 id="注册一个dnspod账号"><a href="#注册一个dnspod账号" class="headerlink" title="注册一个dnspod账号"></a>注册一个dnspod账号</h3><p>注册dnspod，并在域名解析页面添加自己的域名如下：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/20160926147488331211114.jpg?imageView2/0/format/jpg" alt=""></p>
<p>点击配置的域名，会将你以前在阿里云配置的域名解析信息导入，前面两条是阿里云上面配置的域名后面两条是dnspod默认添加的可以不管。页面如下：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/20160926147488351231587.jpg?imageView2/0/format/jpg" alt=""></p>
<h3 id="修改阿里云的域名服务器"><a href="#修改阿里云的域名服务器" class="headerlink" title="修改阿里云的域名服务器"></a>修改阿里云的域名服务器</h3><p>找到如下的页面：<br>![][5]<br>将DNS服务器修改为如下两个  </p>
<pre><code>[5]: http://7xutce.com1.z0.glb.clouddn.com/20160926147488381465618.jpg?imageView2/0/format/jpg
</code></pre><pre><code class="java">f1g1ns1.dnspod.net   

f1g1ns2.dnspod.net
</code></pre>
<h3 id="dnspod配置流量分发"><a href="#dnspod配置流量分发" class="headerlink" title="dnspod配置流量分发"></a>dnspod配置流量分发</h3><p>页面的信息如下：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/20160926147488398940006.jpg?imageView2/0/format/jpg" alt=""></p>
<table>
<thead>
<tr>
<th>主机记录</th>
<th>记录类型</th>
<th>线路类型</th>
<th>记录值</th>
<th>权重</th>
<th>MAX优先级</th>
<th>TTL说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>@</td>
<td>A</td>
<td>默认</td>
<td>192.30.252.153</td>
<td>—-</td>
<td>—-</td>
<td>6000</td>
<td>国外Github IP的配置 </td>
</tr>
<tr>
<td>@</td>
<td>A</td>
<td>默认</td>
<td>192.30.252.154</td>
<td>—-</td>
<td>—-</td>
<td>6000</td>
<td>国外Github IP的配置 </td>
</tr>
<tr>
<td>@</td>
<td>CNAME</td>
<td>国内</td>
<td>guochenglai.coding.me.</td>
<td>—-</td>
<td>—-</td>
<td>6000</td>
<td>国内域名别名 </td>
</tr>
<tr>
<td>WWW</td>
<td>CNAME</td>
<td>默认</td>
<td>guochenglai.github.io.</td>
<td>—-</td>
<td>—-</td>
<td>6000</td>
<td>国外WWW域名别名 </td>
</tr>
<tr>
<td>WWW</td>
<td>CNAME</td>
<td>国内</td>
<td>guochenglai.coding.me.</td>
<td>—-</td>
<td>—-</td>
<td>6000</td>
<td>国域WWW域名别名 </td>
</tr>
</tbody>
</table>
<h2 id="验证百度抓取"><a href="#验证百度抓取" class="headerlink" title="验证百度抓取"></a>验证百度抓取</h2><p>对比抓取失败需要关注两个点：<br>1 网站IP发生了变化，变成了国内的Coding的IP<br>2 抓取状态变成了200表示已经成功<br>如果上面两点都满足说明你的网站已经可以被百度抓取了。剩下的就是等待被百度收录然后建立索引（这个时间一周到一个月不等）。<br><img src="http://7xutce.com1.z0.glb.clouddn.com/20160926147488195627420.jpg?imageView2/0/format/jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Guava学习教程之4-Guava集合之间转换]]></title>
      <url>/2016/09/19/guava4-guava-collections/</url>
      <content type="html"><![CDATA[<p>我们常常会遇到集合之间的转换，例如：List集合转换成Map的集合，Map的集合转换为List的集合。通常情况下我们都需要进行集合的遍历，然后进行转换，这个实现略low，包括甲骨文公司自己也认识到了这个问题，所以在Java8中引入了流机制来实现非遍历的转换。Java8一下版本的JDK我们可以使用Guava来实现非遍历的集合转换。<br><a id="more"></a><br>下面给我几个常见的非遍历的集合转换示例。 </p>
<h2 id="List转MultiMap"><a href="#List转MultiMap" class="headerlink" title="List转MultiMap"></a>List转MultiMap</h2><p>这个是最常见的一种数据结构的转换，常见的场景如下：<br>1 计算每个班级所有学生的平均分(将学生按照班级聚合成MultiMap)<br>2 计算每个城市酒店的平均产单量(将酒店按照城市聚合成MultiMap)<br>如果是传统的Java实现方式，则必须进行遍历：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">List&lt;Hotel&gt; hotelList = <span class="keyword">new</span> ArrayList&lt;&gt;();  </div><div class="line">...  </div><div class="line">Map&lt;String,List&lt;Hotel&gt;&gt; cityHotelMap = <span class="keyword">new</span> HashMap&lt;String,List&lt;Hote&gt;&gt;  </div><div class="line"><span class="keyword">for</span>(Hotel hotel:hotelList)&#123;  </div><div class="line">   <span class="keyword">if</span>(!cityHotelMap.contrains(hotel.getCityCode()))&#123;  </div><div class="line">        cityHotelMap.put(hotel.getCityCode(),<span class="keyword">new</span> ArrayList&lt;Hotel&gt;())  </div><div class="line">   &#125;  </div><div class="line">   cityHotelMap.get(hotel.getCityCode()).add(hotel);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>采用Guava的无遍历实现：</strong></p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">List&lt;Hotel&gt; hotelList = <span class="keyword">new</span> ArrayList&lt;&gt;();  </div><div class="line">....  </div><div class="line">MultiMap&lt;String,Hotel&gt; cityHotelMap = MultiMaps.index(hotelList,<span class="keyword">new</span> Function()&#123;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(Hotel input)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> input.getCityCode();  </div><div class="line">    &#125;   </div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="List转Map"><a href="#List转Map" class="headerlink" title="List转Map"></a>List转Map</h2><p>List转换成Map如果采用Java的实现，也需要进行遍历。下面直接贴出Guava实现的代码。<br>如下的例子：将一个酒店列表，转换成按照hotelSeq聚合的Map。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">List&lt;Hotel&gt; hotelList = <span class="keyword">new</span> ArrayList&lt;&gt;();  </div><div class="line">....  </div><div class="line">Map&lt;String,Hotel&gt; hotelMap = Maps.uniqueIndex(hotelList,<span class="keyword">new</span> Function()&#123;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(Hotel input)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> input.getHotelSeq();  </div><div class="line">    &#125;     </div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="MultiMap的遍历"><a href="#MultiMap的遍历" class="headerlink" title="MultiMap的遍历"></a>MultiMap的遍历</h2> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">for</span>(Map.Entry&lt;String,Collection&lt;Hotel&gt;&gt; entry:cityHotelMap.asMap().entrySet())&#123;  </div><div class="line">    String cityCode = entry.getKey();   </div><div class="line">    Collection&lt;Hotel&gt; hotelCollections = entry.getValue();  </div><div class="line"></div><div class="line">    ......  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="MultiMap转List"><a href="#MultiMap转List" class="headerlink" title="MultiMap转List"></a>MultiMap转List</h2><p>MultiMap转换成List有几种情况： </p>
<ul>
<li>将所有的Key转换成List</li>
<li>将所有的Value集合转换成Map</li>
</ul>
<h3 id="将MultiMap的key转换成List"><a href="#将MultiMap的key转换成List" class="headerlink" title="将MultiMap的key转换成List"></a>将MultiMap的key转换成List</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Set&lt;String&gt; cityCodeList =  cityHotelMap.keySet()</div></pre></td></tr></table></figure>
<h3 id="将MultiMap的value集合转换成"><a href="#将MultiMap的value集合转换成" class="headerlink" title="将MultiMap的value集合转换成"></a>将MultiMap的value集合转换成</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;Hotel&gt; hotelList = cityHotelMap.values()</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Guava教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Guava教程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java日志框架之Logback详解]]></title>
      <url>/2016/09/14/java-logback-analysis/</url>
      <content type="html"><![CDATA[<p>Java的日志系统经过了漫长的发展，最后确认为slf4j加logback的结构。充分证明了logback的生命力。<br><a id="more"></a></p>
<h2 id="java日志的发展"><a href="#java日志的发展" class="headerlink" title="java日志的发展"></a>java日志的发展</h2><p><strong>1 起步阶段</strong><br>在Java发展的初期是没有真正的日志框架的，当时为了排查问题都是使用<code>System.out</code>或者<code>System.err</code>来进行关键信息的记录。然后利用系统的重定向功能将这些关键信息，记录到特定的文件之中。起到记录日志排查问题的作用。这样做有一个很大的缺陷：不灵活不可配置。代码已发布到生产环境便不可更改，除非重新发布代码。 </p>
<p><strong>2 日志框架出现</strong><br>有需求就会有人提供服务，面对Java的这种日志问题。出现了第一个试图解决Java日志问题的框架–<code>Log4j</code>。log4j确实是一个开创性的产品，里面提出的很多理念都深深地影响着现在的日志系统。最重要的是他几乎解决了当时Java日志系统的所有问题。包括后面的几个日志框架都没有替代它，直到现在他还有很强的生命力。 </p>
<p><strong>3 SUN公司重视日志框架</strong><br>在Log4j出现之后，SUN公司意识到了日志系统的重要性。于是在JDK1.4之中也加入了logging日志模块。他没有直接将log4j收入囊中，而是参照log4j自己写了一套。但是写的并没有log4j好。最后自己就放弃了。 </p>
<p><strong>4 Apache公司试图解决日志问题</strong><br>common-logging是apache提供的一个通用的日志接口。用户可以自由选择第三方的日志组件作为具体实现，像log4j，或者jdk自带的logging， common-logging会通过动态查找的机制，在程序运行时自动找出真正使用的日志库。这样做的好处是避免了日志方案的直接耦合。接口是commons-logging实现确可以随时更改而不用更改代码。但是他也有很大的缺陷：由于它使用了ClassLoader寻找和载入底层的日志库， 导致了象OSGI这样的框架无法正常工作，因为OSGI的不同的插件使用自己的ClassLoader。 OSGI的这种机制保证了插件互相独立，然而却使Apache Common-Logging无法工作。所以几乎没有人使用这个日志框架 </p>
<p><strong>5 日志框架的确定</strong><br>直到SLF4J加Logback的出现，Java的日志系统终于天下归一统了。slf4j类似commons-logging，向应用层提供API接口，所有用户的编程都是面向slf4j的，而底层的实现可以是任何日志框架，现在最好的是logback。他们的优点我就不说了，网上一大堆。 </p>
<h2 id="logback配置详解"><a href="#logback配置详解" class="headerlink" title="logback配置详解"></a>logback配置详解</h2><p>下面的配置文件可以认为是一个最全的logback的配置文件。在日常的开发中，我们只需要摘取其中的子集就可以了。  </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;        </div><div class="line">&lt;configuration debug="false" scan="true" scanPeriod="5000"&gt;  </div><div class="line">    &lt;contextName&gt;logback_context&lt;/contextName&gt;  </div><div class="line">    &lt;property name="log.dir" value="/home/chenglai.guo/log" /&gt;  </div><div class="line">    &lt;appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender"&gt;  </div><div class="line">        &lt;encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder"&gt;  </div><div class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %class:%line - %msg%n&lt;/pattern&gt;  </div><div class="line">        &lt;/encoder&gt;  </div><div class="line">    &lt;/appender&gt;  </div><div class="line"></div><div class="line">    &lt;appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt;  </div><div class="line">        &lt;encoder&gt;  </div><div class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %class:%line - %msg%n&lt;/pattern&gt;  </div><div class="line">            &lt;charset&gt;UTF-8&lt;/charset&gt;  </div><div class="line">        &lt;/encoder&gt;  </div><div class="line">        &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt;  </div><div class="line">            &lt;FileNamePattern&gt;$&#123;log.dir&#125;/%d&#123;yyyy-MM-dd&#125;.error.log&lt;/FileNamePattern&gt;  </div><div class="line">            &lt;MaxHistory&gt;10&lt;/MaxHistory&gt;  </div><div class="line">        &lt;/rollingPolicy&gt;  </div><div class="line">    &lt;/appender&gt;  </div><div class="line"></div><div class="line">    &lt;appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt;  </div><div class="line">        &lt;encoder&gt;  </div><div class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %class:%line - %msg%n&lt;/pattern&gt;  </div><div class="line">            &lt;charset&gt;UTF-8&lt;/charset&gt;  </div><div class="line">        &lt;/encoder&gt;  </div><div class="line"></div><div class="line">        &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt;  </div><div class="line">            &lt;FileNamePattern&gt;$&#123;log.dir&#125;/%d&#123;yyyy-MM-dd&#125;.error.log&lt;/FileNamePattern&gt;  </div><div class="line">            &lt;MaxHistory&gt;30&lt;/MaxHistory&gt;  </div><div class="line">        &lt;/rollingPolicy&gt;  </div><div class="line"></div><div class="line">        &lt;filter class="ch.qos.logback.classic.filter.LevelFilter"&gt;  </div><div class="line">            &lt;level&gt;ERROR&lt;/level&gt;  </div><div class="line">            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;  </div><div class="line">            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;  </div><div class="line">        &lt;/filter&gt;  </div><div class="line"></div><div class="line">          </div><div class="line"></div><div class="line">        &lt;triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"&gt;  </div><div class="line">            &lt;MaxFileSize&gt;1000MB&lt;/MaxFileSize&gt;  </div><div class="line">        &lt;/triggeringPolicy&gt;  </div><div class="line">    &lt;/appender&gt;  </div><div class="line"></div><div class="line">    &lt;appender name="SQL_FILE"  class="ch.qos.logback.core.rolling.RollingFileAppender"&gt;  </div><div class="line"></div><div class="line">        &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt;  </div><div class="line">            &lt;FileNamePattern&gt;$&#123;log.dir&#125;/dbaccess.log.%d&#123;yyyy-MM-dd&#125;.log&lt;/FileNamePattern&gt;  </div><div class="line">            &lt;MaxHistory&gt;30&lt;/MaxHistory&gt;      </div><div class="line">        &lt;/rollingPolicy&gt;  </div><div class="line"></div><div class="line">        &lt;encoder&gt;  </div><div class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;  [%thread] %-5level %class:%line - %msg%n&lt;/pattern&gt;  </div><div class="line">            &lt;charset&gt;UTF-8&lt;/charset&gt;  </div><div class="line">        &lt;/encoder&gt;  </div><div class="line"></div><div class="line">        &lt;filter class="ch.qos.logback.classic.filter.LevelFilter"&gt;  </div><div class="line">            &lt;level&gt;INFO&lt;/level&gt;  </div><div class="line">            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;  </div><div class="line">            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;  </div><div class="line">        &lt;/filter&gt;  </div><div class="line">    &lt;/appender&gt;  </div><div class="line"></div><div class="line">    &lt;logger name="org.springframework" level="ERROR"/&gt;  </div><div class="line">    &lt;logger name="org.apache.ibatis" level="ERROR"/&gt;  </div><div class="line">    &lt;logger name="java.sql.Connection" level="ERROR"/&gt;  </div><div class="line">    &lt;logger name="java.sql.Statement" level="ERROR"/&gt;  </div><div class="line">    &lt;logger name="java.sql.PreparedStatement" level="ERROR"/&gt;  </div><div class="line">    &lt;logger name="com.qunar.des.common.dao" additivity="false" level="INFO"&gt;  </div><div class="line">        &lt;appender-ref ref="SQL_FILE"/&gt;  </div><div class="line">    &lt;/logger&gt;  </div><div class="line"></div><div class="line">    &lt;root level="INFO"&gt;  </div><div class="line">        &lt;appender-ref ref="STDOUT"/&gt;  </div><div class="line">        &lt;appender-ref ref="FILE"/&gt;  </div><div class="line">        &lt;appender-ref ref="ERROR_FILE"/&gt;  </div><div class="line">    &lt;/root&gt;  </div><div class="line"></div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Guava学习教程之3-Predict,Predicts,Function,Functions函数详解]]></title>
      <url>/2016/09/10/guava3-predict-predicts-function-functions/</url>
      <content type="html"><![CDATA[<p>Guava提供了一些接口和类，提供了一种类似函数式的编程风格。这个有一定的吸引力，但是远远没有Java8中lamada表达式配合函数式编程来的爽，而且Guava提供的这些接口的主要功能并不是在使用函数式编程风格，而是一下的使用方式。这些类/接口主要有： <a id="more"></a></p>
<ul>
<li>Predicate接口：用来判断一个对象是否满足某些条件。</li>
<li>Predicates类：提供了对Predicate接口的操作方法。</li>
<li>Function接口：将一种类型的对象转换成另外一种类型的对象。</li>
<li>Functons类：提供了对Function接口的操作方法。</li>
</ul>
<p>Predicate接口的主要作用是配合集合工具类进行过滤。<br>过滤出名字中含有”g”的所有名字：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Predicate&lt;String&gt; nameFilter = <span class="keyword">new</span> Predicate&lt;String&gt;()&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(String input)</span></span>&#123;  </div><div class="line">          <span class="keyword">if</span>(Strings.isNullOrEmpty(input))&#123;  </div><div class="line">              <span class="keyword">return</span> <span class="keyword">false</span>;  </div><div class="line">          &#125;  </div><div class="line"></div><div class="line">          <span class="keyword">if</span>(input.contrains(<span class="string">"g"</span>))&#123;  </div><div class="line">             <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">          &#125;  </div><div class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;  </div><div class="line">    &#125;   </div><div class="line">&#125;     </div><div class="line"></div><div class="line">List&lt;String&gt; names = Lists.newArrayList(<span class="string">"gcl"</span>,<span class="string">"guo"</span>,<span class="string">"zs"</span>,<span class="string">"hpx"</span>);  </div><div class="line"></div><div class="line">Collection&lt;String&gt; result = Collections2.filter(names, predicate);</div></pre></td></tr></table></figure>
<p>说明：<br>在企业开发了经常会有集合的过滤操作，我们往往写一系列类继承自Predicate接口，来进行一系列的过滤。  </p>
<p>Predicate常用的集合过滤方法： </p>
<table>
<thead>
<tr>
<th>集合类型</th>
<th>过滤方法说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td>Collection</td>
<td>Collections2.filter(Collection, Predicate)将一个collection按照predicate条件进行过滤返回另外一collection </td>
</tr>
<tr>
<td>Set</td>
<td>Sets.filter(Set, Predicate) 将一个set按照predicate条件进行过滤返回另外一个set </td>
</tr>
<tr>
<td>Map</td>
<td>Maps.filterKeys(Map, Predicate)  Maps.filterValues(Map,Predicate)  Maps.filterEntries(Map,Predicate) 将一个map按照predicate条件进行过滤返回另外一个map </td>
</tr>
<tr>
<td>Multimap</td>
<td>Multimaps.filterKeys(Multimap,Predicate) Multimaps.filterValues(Multimap,Predicate) Multimaps.filterEntries(Multimap,Predicate) 将一个Multimap按照predicate条件进行过滤返回另外一个Multimap </td>
</tr>
<tr>
<td>SortedMap</td>
<td>Maps.filterKeys(SortedMap,Predicate)  Maps.filterValues(SortddMap, Predicate)  Maps.filterEntries(SortedMap, Predicate) 将一个SortedMap按照predicate条件进行过滤返回另外一个SortedMap </td>
</tr>
<tr>
<td>Iterable</td>
<td>Iterables.filter(Iterable, Predicate) 将一个可迭代的接口列表转换成另外一个可迭代的接口列表 </td>
</tr>
<tr>
<td>Iterator</td>
<td>Iterators.filter(Iterator, Predicate) 将一个迭代器按照predicate条件转换成另外一个迭代器 </td>
</tr>
</tbody>
</table>
<p>注意：<br>这里没有对List进行过滤的方法，如果想要过滤返回一个List集合可以采用如下方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List targetList = Lists.newArrayList(Collections2.filter(originList,predicate))</div></pre></td></tr></table></figure>
<p>Predicates主要有两个作用： </p>
<ul>
<li>提供了常见使用的Predicate方法</li>
<li>提供了对Predicate接口的操作方法</li>
</ul>
<p>过滤出名字中包含字母“g”的所有名字  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">List&lt;String&gt; names = Lists.newArrayList(<span class="string">"gcl"</span>,<span class="string">"guo"</span>,<span class="string">"zs"</span>,<span class="string">"hpx"</span>);  </div><div class="line"></div><div class="line">List&lt;String&gt; filterNames = Lists.newArrayList(Collections2.filter(names,Predicates.contrainsPattern(<span class="string">"g"</span>))</div></pre></td></tr></table></figure>
<p>排除所有名字为null的名字  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; names = Lists.newArrayList(<span class="string">"gcl"</span>,<span class="keyword">null</span>,<span class="string">"guo"</span>,<span class="string">"zs"</span>,<span class="keyword">null</span>,<span class="string">"hpx"</span>);  </div><div class="line"></div><div class="line">Collection&lt;String&gt; result = Collections.filter(names,Predicates.notNull())</div></pre></td></tr></table></figure>
<p>Predicate的and/or/not操作： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Predicate andPredicate = Predicates.and(predicateA, predicateB);  </div><div class="line"></div><div class="line">Predicate orPredicate = Predicates.or(predicateA, predicateB);  </div><div class="line"></div><div class="line">Predicate andPredicate = Predicates.not(predicateA);</div></pre></td></tr></table></figure>
<h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p>Function可以用来将一种类型的对象转换成另外一种类型的对象，最常用的是用法是将一种类型的集合转换成另外一种类型的集合。<br>将名字集合中的所有名字后面都加上”baobao”二字（学习支付宝）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Function&lt;String,String&gt; transFunction = <span class="keyword">new</span> Function(String,String)()&#123;  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(input)</span></span>&#123;  </div><div class="line"></div><div class="line">       <span class="keyword">return</span> input+<span class="string">"baobao"</span>;  </div><div class="line"></div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;  </div><div class="line"></div><div class="line">List&lt;String&gt; names = Lists.newArrayList(<span class="string">"gcl"</span>,<span class="string">"guo"</span>,<span class="string">"zs"</span>,<span class="string">"hpx"</span>);  </div><div class="line"></div><div class="line">  </div><div class="line"></div><div class="line">List&lt;String&gt; result = Lists.transform(names,transFunction);</div></pre></td></tr></table></figure></p>
<p>Function常用的集合转换方法： </p>
<table>
<thead>
<tr>
<th>集合类型</th>
<th>过滤方法说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Collection</td>
<td>Collections2.transform(Collection, Function) 将一个collection按照function函数转换成另外一个collection </td>
</tr>
<tr>
<td>List</td>
<td>Lists.transform(List, Function) 将一个list按照function函数转换成另外一个list </td>
</tr>
<tr>
<td>Map</td>
<td>Maps.transformValues(Map,Function)  Maps.transformEntries(Map,EntryTransformer) 将一个map按照function函数转换成另外一个map </td>
</tr>
<tr>
<td>Multimap</td>
<td>Multimaps.transformValues(Multimap,Function)  Multimaps.transformEntries(Multimap,EntryTransformer) 将一个Multimap按照function函数转换成另外一个Multimap </td>
</tr>
<tr>
<td>Iterator</td>
<td>Iterators.transform(Iterator, Function) 将一个迭代器按照function函数转换成另外一个迭代器 </td>
</tr>
<tr>
<td>Iterable</td>
<td>Iterables.transform(Iterable, Function) 将一个可迭代接口列表按照function函数转换成另外一个可迭代接口列表 </td>
</tr>
</tbody>
</table>
<p>注意：这里没有对Set进行转换的方法，如果需要转换返回一个Set集合可以采用如下的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Set targetSet = Sets.newHashSet(Collectios2.transform(originSet,function))</div></pre></td></tr></table></figure>
<h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><p>Functions是用来对Function接口进行操作：<br>例如：想讲名字的列表转换成字符长度的列表，然后判断字符长度是否是偶数。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Function&lt;String,Integer&gt; f1 = <span class="keyword">new</span> Function&lt;String,Integer&gt;()&#123;  </div><div class="line"></div><div class="line">    <span class="meta">@Override</span>  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(String input)</span> </span>&#123;  </div><div class="line"></div><div class="line">        <span class="keyword">return</span> input.length();  </div><div class="line"></div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;;  </div><div class="line"></div><div class="line">Function&lt;Integer,Boolean&gt; f2 = <span class="keyword">new</span> Function&lt;Integer,Boolean&gt;()&#123;  </div><div class="line"></div><div class="line">    <span class="meta">@Override</span>  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">apply</span><span class="params">(Integer input)</span> </span>&#123;  </div><div class="line"></div><div class="line">        <span class="keyword">return</span> input % <span class="number">2</span> == <span class="number">0</span>;  </div><div class="line"></div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;;  </div><div class="line"></div><div class="line">List&lt;String&gt; names = Lists.newArrayList(<span class="string">"John"</span>, <span class="string">"Jane"</span>, <span class="string">"Adam"</span>, <span class="string">"Tom"</span>);  </div><div class="line"></div><div class="line">List&lt;Boolean&gt; result = Lists.transform(names, Functions.compose(f2, f1));</div></pre></td></tr></table></figure>
<p>将名字中含有字母g的名字，转换成字母的长度 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Predicate&lt;String&gt; predicate = <span class="keyword">new</span> Predicate&lt;String&gt;() &#123;  </div><div class="line"></div><div class="line">    <span class="meta">@Override</span>  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(String input)</span> </span>&#123;  </div><div class="line"></div><div class="line">        <span class="keyword">return</span> input.contrains(<span class="string">"a"</span>);  </div><div class="line"></div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;;  </div><div class="line"></div><div class="line">Function&lt;String, Integer&gt; func = <span class="keyword">new</span> Function&lt;String,Integer&gt;()&#123;  </div><div class="line"></div><div class="line">    <span class="meta">@Override</span>  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(String input)</span> </span>&#123;  </div><div class="line"></div><div class="line">        <span class="keyword">return</span> input.length();  </div><div class="line"></div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;;  </div><div class="line"></div><div class="line">  </div><div class="line">List&lt;String&gt; names = Lists.newArrayList(<span class="string">"gcl"</span>,<span class="string">"guo"</span>,<span class="string">"zs"</span>,<span class="string">"hpx"</span>);  </div><div class="line"></div><div class="line">List&lt;Integer&gt; result = FluentIterable.from(names)  </div><div class="line"></div><div class="line">                        .filter(predicate)  </div><div class="line"></div><div class="line">                        .transform(func)  </div><div class="line"></div><div class="line">                        .toList();</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Guava教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Guava教程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python连接Hive详细教程]]></title>
      <url>/2016/09/04/python-connect-hive/</url>
      <content type="html"><![CDATA[<p>最近一段时间，做一些分析运营相关的工作，和hive打的交道比较多。每次需要看数据的时候都需要写一个SQL去验证一下，有的时候甚至不知道表结构，但是hive并不像MySQL那样使用方便。目前我司使用hive查询只有两个入口: </p>
<ul>
<li>通过公司的HUE管理页面，这个是推荐的方法，但是有一个问题，每一张表都需要申请。很麻烦，而且我们部门审批hive表的那个XXX太XXX了，申请比较困难。</li>
<li>使用JDBC进行连接。这个是可以，但是Java使用起来还是不方便。</li>
</ul>
<p>所以我就想写一个Python脚本来执行SQL。本来觉得很容易，但是发现这里面的坑太多了。主要问题是Python的库都太弱并且好多库都没人维护了。折腾了一天终于找到了一个比较好的库，下面就是具体的过程： </p>
<h2 id="安装Python依赖库"><a href="#安装Python依赖库" class="headerlink" title="安装Python依赖库"></a>安装Python依赖库</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">pip install impyla</div></pre></td></tr></table></figure>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">__author__ = <span class="string">'guochenglai'</span>   </div><div class="line">from impala.dbapi <span class="keyword">import</span> connect  </div><div class="line">hive_config = &#123;&#125;  </div><div class="line">hive_config[<span class="string">'online'</span>] = &#123;  </div><div class="line">    <span class="string">'host'</span>: <span class="string">'l-xxx.com'</span>,  </div><div class="line">    <span class="string">'db'</span>: <span class="string">'xxx'</span>,  </div><div class="line">    <span class="string">'port'</span>: <span class="number">12001</span> </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function">def <span class="title">get_hive_cursor</span><span class="params">(conf)</span>:  </span></div><div class="line">    conn = connect(host=conf[<span class="string">'host'</span>], port=conf[<span class="string">'port'</span>], database=conf[<span class="string">'db'</span>], auth_mechanism=<span class="string">'PLAIN'</span>)  </div><div class="line">    <span class="keyword">return</span> conn.cursor()  </div><div class="line"></div><div class="line"><span class="function">def <span class="title">execute_sql</span><span class="params">(cursor,sql)</span>:     </span></div><div class="line">    cursor.<span class="title">execute</span><span class="params">(sql)</span>  </div><div class="line">    return cursor.<span class="title">fetchall</span><span class="params">()</span>  </div><div class="line"></div><div class="line">def <span class="title">assemble_sql</span><span class="params">()</span>:  </div><div class="line">    sql=<span class="string">''</span><span class="string">'SHOW Tables'</span><span class="string">''</span>  </div><div class="line">    <span class="keyword">return</span> sql  </div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:  </div><div class="line">    hive = hive_config[<span class="string">'online'</span>]  </div><div class="line">    cursor = get_hive_cursor(hive)  </div><div class="line">    sql = assemble_sql()  </div><div class="line">    <span class="function">print <span class="title">execute_sql</span><span class="params">(cursor,sql)</span></span></div></pre></td></tr></table></figure>
<p>如果是学习的小伙伴上面两部链接hive应该的已经成功了。下面是我尝试其他方法遇到的问题。与教程无关，如果是小白用户就不用看了。 </p>
<h2 id="其他链接方法中遇到的坑"><a href="#其他链接方法中遇到的坑" class="headerlink" title="其他链接方法中遇到的坑"></a>其他链接方法中遇到的坑</h2><p>在前期尝试了很多其他的方法遇到了很多坑，至今没有解决。如果有人遇到以下的问题，并且已经解决。烦请多交流。<br>遇到的第一个问题程序报错如下： </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">  File "build/bdist.macosx-10.11-intel/egg/pyhs2/__init__.py", line 7, in connect  </div><div class="line">    # Copyright (c) 1999 by Secret Labs AB.  </div><div class="line">  File "build/bdist.macosx-10.11-intel/egg/pyhs2/connections.py", line 47, in __init__  </div><div class="line">  File "build/bdist.macosx-10.11-intel/egg/pyhs2/TCLIService/TCLIService.py", line 154, in OpenSession  </div><div class="line">  File "build/bdist.macosx-10.11-intel/egg/pyhs2/TCLIService/TCLIService.py", line 165, in recv_OpenSession  </div><div class="line">  File "build/bdist.macosx-10.11-intel/egg/thrift/protocol/TBinaryProtocol.py", line 140, in readMessageBegin  </div><div class="line">  File "build/bdist.macosx-10.11-intel/egg/thrift/transport/TTransport.py", line 58, in readAll  </div><div class="line">  File "build/bdist.macosx-10.11-intel/egg/thrift/transport/TTransport.py", line 159, in read  </div><div class="line">  File "build/bdist.macosx-10.11-intel/egg/thrift/transport/TSocket.py", line 120, in read  </div><div class="line">thrift.transport.TTransport.TTransportException: TSocket read 0 bytes</div></pre></td></tr></table></figure>
<p>遇到问题二程序报错如下： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/usr/local/lib/python2.7/site-packages/setuptools-<span class="number">12.3</span>-py2.7.egg/pkg_resources/init.py:<span class="number">1224</span>: UserWarning: /home/tap/.python-eggs is writable by group/others and vulnerable to attack when used with get_resource_filename. <span class="function">Consider a more secure <span class="title">location</span> <span class="params">(set with .set_extraction_path or the PYTHON_EGG_CACHE environment variable)</span>.  </span></div><div class="line"><span class="title">Traceback</span> <span class="params">(most recent call last)</span>:  </div><div class="line">File "testPktFlow2.py", line 7, in   </div><div class="line">database=<span class="string">'default'</span>) as conn:  </div><div class="line">File <span class="string">"build/bdist.linux-x86_64/egg/pyhs2/init.py"</span>, line <span class="number">7</span>, in connect  </div><div class="line">File <span class="string">"build/bdist.linux-x86_64/egg/pyhs2/connections.py"</span>, line <span class="number">45</span>, in init  </div><div class="line">File <span class="string">"build/bdist.linux-x86_64/egg/pyhs2/cloudera/thrift_sasl.py"</span>, line <span class="number">66</span>, in open  </div><div class="line">thrift.transport.TTransport.TTransportException: Could not start SASL: <span class="function">Error in <span class="title">sasl_client_start</span> <span class="params">(<span class="number">-4</span>)</span> <span class="title">SASL</span><span class="params">(<span class="number">-4</span>)</span>: no mechanism available: No worthy mechs found</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Linux常用技巧 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux常用技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Guava学习教程之2-字符串各种操作详解]]></title>
      <url>/2016/08/30/guava2-strings-joiner-spillter/</url>
      <content type="html"><![CDATA[<p>在本系列的第一篇文章当中，我们介绍了<a href="http://guochenglai.com/2016/08/30/guava1-map-operation/">如何使用Guava来简化Map类</a>的操作。本文将继续承接上文的内容。来分享Guava为字符串操作带来的便利。 </p>
<a id="more"></a>
<h2 id="Joiner-字符串链接工具类"><a href="#Joiner-字符串链接工具类" class="headerlink" title="Joiner:字符串链接工具类"></a>Joiner:字符串链接工具类</h2><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><p>在日常开发过程中会经常遇到这样一个需求：将一个List中的元素按照逗号分隔拆分成一个字符串，如果使用原生的Java来编写，我们可能需要如下的几步：<br>1 循环遍历List。<br>2 判断某一项不为null，就加入String中并添加逗号<br>3 删除拼接的字符串的最后一个逗号<br>具体可用如下的代码来表示：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">....  </div><div class="line"></div><div class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">"A"</span>,<span class="string">"null"</span>,<span class="string">"B"</span>);  </div><div class="line"></div><div class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();  </div><div class="line"></div><div class="line"><span class="keyword">for</span>(String str:list)&#123;  </div><div class="line"></div><div class="line">   <span class="keyword">if</span>(!Strings.isNullOrEmpty)&#123;  </div><div class="line"></div><div class="line">      sb.append(Str).append(,)  </div><div class="line"></div><div class="line">   &#125;  </div><div class="line"></div><div class="line">&#125;  </div><div class="line"></div><div class="line">sb.setLength(stringBuilder.length()-<span class="number">1</span>);  </div><div class="line"></div><div class="line"><span class="keyword">return</span> sb.toString();</div></pre></td></tr></table></figure>
<p>功能很简单但是很繁琐吧，而且里面还有很多的坑，比如list需要判空，而且在进行截取操作的时候也需要判空，和长度判断。如何改用Guava实现。可以简化为如下的代码，而且不需要进行各种条件判断。  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">"A"</span>,<span class="string">"null"</span>,<span class="string">"B"</span>);  </div><div class="line"></div><div class="line"><span class="keyword">return</span> Joiner.on(<span class="string">","</span>).skipNulls.join(list);</div></pre></td></tr></table></figure>
<h3 id="URL拼接"><a href="#URL拼接" class="headerlink" title="URL拼接"></a>URL拼接</h3><p>拼接生成一个如下的URL  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">http:<span class="comment">//guochenglai.com?name=gcl&amp;age=26&amp;address=beijing</span></div></pre></td></tr></table></figure>
<p>这里就不在说Java怎么写了直接上Guava的写法:  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">String str = <span class="string">"http://guochenglai.com?"</span> +Joiner.on(<span class="string">"&amp;"</span>).withKeyValueSeparator(<span class="string">"="</span>).join(ImmutableMap.of(<span class="string">"name"</span>,<span class="string">"gcl"</span>,<span class="string">"age"</span>,<span class="string">"26"</span>,<span class="string">"address"</span>,<span class="string">"beijing"</span>));</div></pre></td></tr></table></figure>
<h2 id="Spliter-字符串拆分工具类"><a href="#Spliter-字符串拆分工具类" class="headerlink" title="Spliter:字符串拆分工具类"></a>Spliter:字符串拆分工具类</h2><h3 id="字符串拆分"><a href="#字符串拆分" class="headerlink" title="字符串拆分"></a>字符串拆分</h3><p>1 Spliter类可以方便地根据正则表达式来拆分字符串，可以去电拆分结果中的空串，还可以做trim操作。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; splitResults = Splitter.onPattern(<span class="string">","</span>).omitEmptyStrings().trimResults(CharMatcher.NONE).splitToList(<span class="string">"hello,word,,世界,,水平,null"</span>);</div></pre></td></tr></table></figure>
<p>2 Spliter类还可以做二次拆分，将字符串直接拆分成Map。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">String str = <span class="string">"id=1;name=gcl,age=26"</span>;  </div><div class="line"></div><div class="line"><span class="comment">//按照正则表达式拆分，拆分结构就一行代码  </span></div><div class="line"></div><div class="line">Map&lt;String, String&gt; map = Splitter.onPattern(<span class="string">"[;,]"</span>).withKeyValueSeparator(<span class="string">"="</span>).split(str);  </div><div class="line"></div><div class="line"><span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;  </div><div class="line"></div><div class="line">    System.out.println(entry.getKey()+<span class="string">"----&gt;"</span>+entry.getValue());  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="URL拆分"><a href="#URL拆分" class="headerlink" title="URL拆分"></a>URL拆分</h3><p>将如下URL的参数拆分到Map中  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">String url = <span class="string">"http://guochenglai.com?name=gcl&amp;age=26&amp;address=beijing"</span>;  </div><div class="line"></div><div class="line"><span class="comment">//拆分代码就如下一行  </span></div><div class="line">Map&lt;String, String&gt; params = Splitter.on(<span class="string">"&amp;"</span>).withKeyValueSeparator(<span class="string">"="</span>).split(url.substring(url.indexOf(<span class="string">"?"</span>)+<span class="number">1</span>));  </div><div class="line"></div><div class="line"><span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : params.entrySet()) &#123;  </div><div class="line"></div><div class="line">    System.out.println(entry.getKey()+<span class="string">"----&gt;"</span>+entry.getValue());  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Strings-字符串操作工具类"><a href="#Strings-字符串操作工具类" class="headerlink" title="Strings:字符串操作工具类"></a>Strings:字符串操作工具类</h2><p>1 判断字符串是否为Null或者Empty  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">boolean</span> isNullOrEmpty = Strings.isNullOrEmpty(input);</div></pre></td></tr></table></figure>
<p>2 获得两个字符串相同的前缀或者后缀  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String commonPrefix = Strings.commonPrefix(strA,strB);  </div><div class="line"></div><div class="line">String commonSuffix = Strings.commonSuffix(strA,strB);</div></pre></td></tr></table></figure>
<p>3 Strings的padStart和padEnd方法来补全字符串 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">String padEndResult = Strings.padEnd(<span class="string">"123"</span>, <span class="number">4</span>, <span class="string">'#'</span>);  </div><div class="line">String padStartResult = Strings.padStart(<span class="string">"123"</span>, <span class="number">4</span>, <span class="string">'#'</span>);</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Guava教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Guava教程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Guava学习教程之1-Map操作详解]]></title>
      <url>/2016/08/30/guava1-map-operation/</url>
      <content type="html"><![CDATA[<p>在一开始接触guava的时候我是抵触的。当时这样觉得：相比C++，Java的运行速度有点慢，那么Guava是基于Java封装的运行速度肯定比Java慢，所以不应该使用Java。现在回头来看当时的想法真的有点可笑，真是应了一句话：凡是你排斥的就是你要学习的。下面写几个Guava的优点：<br><a id="more"></a></p>
<ul>
<li>优化良好，运行速度快，不要觉得封装的就会速度慢，很多人一看到封装两字就会觉得慢，真是肤浅。guava的封装一条语句完成一系列复杂操作。以这一系列操作来看使用，在最优的实现上来看是一样的。Guava基本上已经优化到了最优，而你自己编写一系列代码，不一定最优，所以guava得速度更快</li>
<li>提高代码的可读性，代码简介易读。这个在后续的文章之中读者会看到。</li>
<li>稳定性高，没有bug。</li>
<li>支持函数式编程，Java在Java8中才有</li>
</ul>
<h2 id="MultiMap-在Map的Value中存放多个元素"><a href="#MultiMap-在Map的Value中存放多个元素" class="headerlink" title="MultiMap:在Map的Value中存放多个元素"></a>MultiMap:在Map的Value中存放多个元素</h2><p>MultiMap是一个一个Key对应多个Value的数据结构，他的外部结构类似于java.util.Map，但是实质上他们并没有联系。先看一个例子：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line">Map&lt;String, HashSet&lt;String&gt;&gt; hMap = <span class="keyword">new</span> HashMap&lt;String, HashSet&lt;String&gt;&gt;();</div></pre></td></tr></table></figure>
<p>从我开始写Java的时候已经不知道遇到这种恶心的结构多少次了。采用Java原生方法的写法如下：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">如下的代码是将person的list转换成以name为key，person列表为value的Map  </div><div class="line"></div><div class="line">Map&lt;String, HashSet&lt;String&gt;&gt; hMap = <span class="keyword">new</span> HashMap&lt;String, HashSet&lt;String&gt;&gt;();  </div><div class="line"></div><div class="line"><span class="keyword">for</span>(Person p: personList)&#123;   </div><div class="line"></div><div class="line">    HashSet&lt;Person&gt; set = hMap.get(p.getName());   </div><div class="line"></div><div class="line">    <span class="keyword">if</span>(set == <span class="keyword">null</span>)&#123;   </div><div class="line"></div><div class="line">        set = <span class="keyword">new</span> HashSet&lt;Person&gt;();   </div><div class="line"></div><div class="line">        hMap.put(p.getName(), set);   </div><div class="line"></div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    set.add(p);   </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相信只要写Java程序的人都会遇到上面的数据结构，每次看到上面这一坨代码，就难受。换成Guava的MultiMap写法如下：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">   </div><div class="line">Multimap&lt;String, String&gt; map = HashMultimap.create();   </div><div class="line"></div><div class="line"><span class="keyword">for</span>(Person p: personList)&#123;   </div><div class="line"></div><div class="line">   map.put(p.getName(), p);   </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简单明了，看起来清爽多了。<br>MultiMap的主要实现类有如下几个，可以对比Map类来理解。 </p>
<table>
<thead>
<tr>
<th>实现类</th>
<th>详细解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>HashMultimap</td>
<td>key是HashMap的key,value是一个HashSet的集合 </td>
</tr>
<tr>
<td>ArrayListMultimap</td>
<td>key是HashMap的key,value是一个ArrayList的集合 </td>
</tr>
<tr>
<td>LinkedHashMultimap</td>
<td>key是LinkedHashMap的key,value是一个LinkedHashSet的集合 </td>
</tr>
<tr>
<td>TreeMultimap</td>
<td>key是TreeMap的key,value是一个TreeSet的集合 </td>
</tr>
<tr>
<td>ImmutableMultimap</td>
<td>不可修改的MultiMap，其他的结构类似HashMultiMap </td>
</tr>
</tbody>
</table>
<h2 id="BiMap-双向Map"><a href="#BiMap-双向Map" class="headerlink" title="BiMap: 双向Map"></a>BiMap: 双向Map</h2><p>BiMap实现了java.util.Map。它的特点是它的value和key都是不可以重复的，换句话说，它的key和value是等价的，如果你向BiMap中存放了重复的元素，它会抛出IllegalArgumentException。<br>示例：众所周知Map数据结构支持用key来查找value，而且非常方便，但是在很多的应用当中，我们需要根据value来查找key那么使用Map结构就会很麻烦。我们通常会按照如下的代码来操作：  </p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(Map.Entry&lt;User,Address&gt; entry:map.entrySet())&#123;  </div><div class="line"></div><div class="line">   <span class="keyword">if</span>(entry.getValue.equals(targetAddress))&#123;  </div><div class="line"></div><div class="line">      <span class="keyword">return</span> entry.getKey();  </div><div class="line"></div><div class="line">   &#125;  </div><div class="line"></div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div></pre></td></tr></table></figure>
<p>如果我们将User和Address放在Guava的BiMap数据结构中，查找过程就可以简化为如下的代码：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">BiMap&lt;User,Address&gt; biMap = <span class="keyword">new</span> HashBiMap&lt;User,Address&gt;();  </div><div class="line"></div><div class="line"><span class="keyword">return</span> biMap.inverse().get(targetAddress);</div></pre></td></tr></table></figure>
<p>BiMap的常用实现如下： </p>
<table>
<thead>
<tr>
<th>实现类</th>
<th>详细解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>HashBiMap</td>
<td>key和value集合都有hashmap的实现 </td>
</tr>
<tr>
<td>EnumBiMap</td>
<td>key和value都必须是 enum类型 </td>
</tr>
<tr>
<td>ImmutableiMap</td>
<td>不可修改的BiMap </td>
</tr>
</tbody>
</table>
<h2 id="MapMaker-ConcurrentMap的构造工具"><a href="#MapMaker-ConcurrentMap的构造工具" class="headerlink" title="MapMaker: ConcurrentMap的构造工具"></a>MapMaker: ConcurrentMap的构造工具</h2><p>MapMaker可以用来构建ConcurrentMap，选项多，操作灵活。<br>例如：<br>1 构造一个有8把锁的ConcurrentMap  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ConcurrentMap&lt;String,Object&gt; map = <span class="keyword">new</span> MapMaker().concurrencyLevel(<span class="number">8</span>).makeMap();</div></pre></td></tr></table></figure>
<p>2 构造一个自动过期移除的ConcurrentMap  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">ConcurrentMap&lt;String,Object&gt; map = <span class="keyword">new</span> MapMaker().expireAfterWrite(<span class="number">30</span>,TimeUnit.SECONDS).makeMap();</div></pre></td></tr></table></figure>
<p>3 构造一个有最大数目限制的ConcurrentMap  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">ConcurrentMap&lt;String,Object&gt; map = <span class="keyword">new</span> MapMaker().maximumSize(<span class="number">100</span>).makeMap();</div></pre></td></tr></table></figure>
<p>4 构造一个上面几个选项联合的map<br>………………. </p>
<h2 id="MapDifference-Map的交集并集差集操作"><a href="#MapDifference-Map的交集并集差集操作" class="headerlink" title="MapDifference: Map的交集并集差集操作"></a>MapDifference: Map的交集并集差集操作</h2><p>MapDifference主要是用来进行两个Map的比较操作，例如交集，并集，差集……..<br>1 求出两个Map完全相同的entry </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MapDifference&lt;String,Object&gt; mapDifference = Maps.difference(mapA,mapB);  </div><div class="line">    </div><div class="line">Map&lt;String,Object&gt; commonMap = mapDifference.entriesInCommon();</div></pre></td></tr></table></figure>
<p>2 求出两个Map中的key相同，但是value不相同的entry<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">MapDifference&lt;String,Object&gt; mapDifference = Maps.difference(mapA,mapB);  </div><div class="line">    </div><div class="line">Map&lt;String,Object&gt; entriesDiffering = mapDifference.entriesDiffering();</div></pre></td></tr></table></figure></p>
<p>3 求出两个map，左边有，右边没有的entry  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">MapDifference&lt;String,Object&gt; mapDifference = Maps.difference(mapA,mapB);  </div><div class="line">    </div><div class="line">Map&lt;String,Object&gt; entriesOnlyOnLeft = mapDifference.entriesEntriesOnlyOnLeft();</div></pre></td></tr></table></figure>
<p>4 求出两个Map，右边有，左边没有的entry  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line">MapDifference&lt;String,Object&gt; mapDifference = Maps.difference(mapA,mapB);  </div><div class="line">    </div><div class="line">Map&lt;String,Object&gt; entriesOnlyOnRight = mapDifference.entriesEntriesOnlyOnRight();</div></pre></td></tr></table></figure>
<h2 id="Maps-map工具类集合"><a href="#Maps-map工具类集合" class="headerlink" title="Maps:map工具类集合"></a>Maps:map工具类集合</h2><p>1 将一个List转换成Map<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">List&lt;Person&gt; personList = <span class="keyword">new</span> ArrayList&lt;Person&gt;();  </div><div class="line"></div><div class="line">....  </div><div class="line"></div><div class="line">Map&lt;String,Person&gt; personMaps = Maps.uniqueIndex(personList,<span class="keyword">new</span> Function&lt;Person,String&gt;()&#123;  </div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(Person person)</span></span>&#123;  </div><div class="line"></div><div class="line">      retuan person.getName();  </div><div class="line"></div><div class="line">   &#125;  </div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>2 将properties转换成Map<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Properties properties = <span class="keyword">new</span> Properties();  </div><div class="line"></div><div class="line">........  </div><div class="line"></div><div class="line">Map&lt;String,String&gt; map = Maps.fromProperties(properties);</div></pre></td></tr></table></figure></p>
<p>3 对Map按照entry进行过滤，过滤出用户地址为“中关村”的map集合  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line">Map&lt;String,Person&gt; map = <span class="keyword">new</span> HashMap&lt;String,Person&gt;();  </div><div class="line">    </div><div class="line">Predicate&lt;Entry&lt;String,Person&gt;&gt; perdicate = <span class="keyword">new</span> Predicate&lt;Map.Entry&lt;String,Person&gt;&gt; ()&#123;  </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(Entry&lt;String,Person&gt; input)</span></span>&#123;  </div><div class="line">    </div><div class="line">       retuen input.getValue().getAddress().equales(<span class="string">"中关村"</span>);  </div><div class="line">    </div><div class="line">     &#125;  </div><div class="line">    </div><div class="line">&#125;  </div><div class="line">    </div><div class="line">Map&lt;String,Person&gt; resultMap = Maps.filterEntries(map,predicate);</div></pre></td></tr></table></figure>
<p>4 对Map按照key进行过滤<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line">Map&lt;String,Person&gt; map = <span class="keyword">new</span> HashMap&lt;String,Person&gt;();  </div><div class="line"></div><div class="line">Predicate&lt;String&gt; perdicate = <span class="keyword">new</span> Predicate&lt;String&gt; ()&#123;  </div><div class="line">    </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(String input)</span></span>&#123;  </div><div class="line">    </div><div class="line">            retuen input.contains(<span class="string">"gcl"</span>);  </div><div class="line">    </div><div class="line">        &#125;  </div><div class="line">    </div><div class="line">    &#125;  </div><div class="line">    </div><div class="line">Map&lt;String,Person&gt; resultMap = Maps.filterEntries(map,predicate);</div></pre></td></tr></table></figure></p>
<p>5 对Map按照value进行过滤<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line">Map&lt;String,Person&gt; map = <span class="keyword">new</span> HashMap&lt;String,Person&gt;();  </div><div class="line">    </div><div class="line">Predicate&lt;Person&gt; perdicate = <span class="keyword">new</span> Predicate&lt;Person&gt; ()&#123;  </div><div class="line">    </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(Person input)</span></span>&#123;  </div><div class="line">    </div><div class="line">            retuen input.getAge()&gt;=<span class="number">22</span>;  </div><div class="line">    </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    </div><div class="line">Map&lt;String,Person&gt; resultMap = Maps.filterEntries(map,predicate);</div></pre></td></tr></table></figure></p>
<h2 id="RangeMap：key为一个区间的Map"><a href="#RangeMap：key为一个区间的Map" class="headerlink" title="RangeMap：key为一个区间的Map"></a>RangeMap：key为一个区间的Map</h2><p>例如：成绩 85-100评级为A,成绩70-84评级为，成绩60-69为，成绩0-59为D。 </p>
<pre><code class="java">
RaneMap&lt;Integer,String&gt; rangeMap = TreeRangeMap.create();  

rangeMap.put(Range.closed(<span class="number">85</span>,<span class="number">100</span>),<span class="string">"A"</span>);  

rangeMap.put(Range.closed(<span class="number">70</span>,<span class="number">84</span>),<span class="string">"C"</span>);  

rangeMap.put(Range.closed(<span class="number">60</span>,<span class="number">69</span>),<span class="string">"B"</span>);  

rangeMap.put(Range.closed(<span class="number">0</span>,<span class="number">59</span>),<span class="string">"D"</span>);  

String level = rangeMap.get(<span class="number">87</span>);
</code></pre>
<p>得到结果为；A  </p>
]]></content>
      
        <categories>
            
            <category> Guava教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Guava教程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[netcat 实现不同服务器机器传输文件详解]]></title>
      <url>/2016/08/23/netcat-file-send/</url>
      <content type="html"><![CDATA[<p>在日常的开发过程中经常会遇到这种需求：将服务器一上的某个文件拷贝到服务器二机器上。因为服务器的机器都只能和堡垒机（跳板机）通信，所以最开始的做法都是通过scp先将服务器一的文件拷贝到跳板机，然后在将跳板机的文件传递到服务器二，这种做法很原始低效。在一次无意中被一位大神看到，给我介绍了<code>NetCat</code>工具。从此便对齐爱不释手。 </p>
<h2 id="NetCat简介"><a href="#NetCat简介" class="headerlink" title="NetCat简介"></a>NetCat简介</h2><p>NetCat是一个利用TCP或者UDP网络链接来进行信息读写的程序，被誉为网络工具中的瑞士军刀。我们通常可以利用他来完成以下的几个功能： </p>
<ul>
<li>实现不同Linux机器之间文件传输</li>
<li>制作蜜罐收集客户端信息</li>
<li>端口扫描</li>
</ul>
<p><strong>下面是一些网友对NetCat的功能总结：</strong></p>
<ul>
<li>支持连出和连入(outbound and inbound connection)，TCP和UDP，任意源和目的端口</li>
<li>全部DNS正向/反向检查，给出恰当的警告</li>
<li>使用任何源端口</li>
<li>使用任何本地设置的网络资源地址</li>
<li>内建端口扫描功能，带有随机数发生器</li>
<li>内建loose source-routing功能</li>
<li>可能标准输入读取命令行参数</li>
<li>慢发送模式，每N秒发送一行</li>
<li>以16进制显示传送或接收的数据</li>
<li>允许其它程序服务建立连接，可选</li>
<li>对Telnet应答，可选</li>
</ul>
<h2 id="NetCat的安装"><a href="#NetCat的安装" class="headerlink" title="NetCat的安装"></a>NetCat的安装</h2><p>如果机器上面没有netcat可以手动安装<br>centos类系统的安装命令：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">   </div><div class="line">sudo yum install nc</div></pre></td></tr></table></figure>
<p>deban类系统的安装命令： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">   </div><div class="line">sudo apt-get install nc</div></pre></td></tr></table></figure>
<h2 id="NetCat参数说明"><a href="#NetCat参数说明" class="headerlink" title="NetCat参数说明"></a>NetCat参数说明</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">-g&lt;网关&gt; 设置路由器跃程通信网关，最丢哦可设置<span class="number">8</span>个。  </div><div class="line">    </div><div class="line">-G&lt;指向器数目&gt; 设置来源路由指向器，其数值为<span class="number">4</span>的倍数。  </div><div class="line">    </div><div class="line">-h 在线帮助。  </div><div class="line">    </div><div class="line">-i&lt;延迟秒数&gt; 设置时间间隔，以便传送信息及扫描通信端口。  </div><div class="line">    </div><div class="line">-l 使用监听模式，管控传入的资料。  </div><div class="line">    </div><div class="line">-n 直接使用IP地址，而不通过域名服务器。  </div><div class="line">    </div><div class="line">-o&lt;输出文件&gt; 指定文件名称，把往来传输的数据以<span class="number">16</span>进制字码倾倒成该文件保存。  </div><div class="line">    </div><div class="line">-p&lt;通信端口&gt; 设置本地主机使用的通信端口。  </div><div class="line">    </div><div class="line">-r 乱数指定本地与远端主机的通信端口。  </div><div class="line">    </div><div class="line">-s&lt;来源位址&gt; 设置本地主机送出数据包的IP地址。  </div><div class="line">    </div><div class="line">-u 使用UDP传输协议。  </div><div class="line">    </div><div class="line">-v 显示指令执行过程。  </div><div class="line">    </div><div class="line">-w&lt;超时秒数&gt; 设置等待连线的时间。  </div><div class="line">    </div><div class="line">-z 使用<span class="number">0</span>输入/输出模式，只在扫描通信端口时使用  </div><div class="line">    </div><div class="line">-k 此参数用在服务器端 用来保证服务器的</div></pre></td></tr></table></figure>
<h2 id="NetCat实现服务器机器通信"><a href="#NetCat实现服务器机器通信" class="headerlink" title="NetCat实现服务器机器通信"></a>NetCat实现服务器机器通信</h2><p>假设我们需要将服务器一（机器名称 : l-foo.google.com）的文件传送到服务器二（机器名称：l-bar.google.com）上面 </p>
<h3 id="传递压缩文件夹"><a href="#传递压缩文件夹" class="headerlink" title="传递压缩文件夹"></a>传递压缩文件夹</h3><p>一:服务器一（机器名称 : l-foo.google.com）上面执行：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">tar -zcf - test.google.com/ | nc -l <span class="number">5678</span></div></pre></td></tr></table></figure>
<p>二: 在服务器二（机器名称：l-bar.google.com）上面执行：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">nc l-foo.google.com <span class="number">5678</span> | sudo tar -xzf -</div></pre></td></tr></table></figure>
<p>分别在两个机器上执行这两条命令可以发现，在bar机器上已经有了foo机器上的<code>test.qunar.com</code>文件夹 </p>
<h3 id="传递非压缩文件"><a href="#传递非压缩文件" class="headerlink" title="传递非压缩文件"></a>传递非压缩文件</h3><p>一:服务器一（机器名称 : l-foo.google.com）上面执行： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line">sudo nc -l <span class="number">2222</span> &lt;a.txt</div></pre></td></tr></table></figure>
<p>二: 在服务器二（机器名称：l-bar.google.com）上面执行： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">sudo nc l-foo.google.com <span class="number">2222</span> &gt; a.txt</div></pre></td></tr></table></figure>
<p>执行上面两条命令可以发现在服务器bar机器上已经有了foo机器上的<code>a.txt</code>文件 </p>
<h2 id="NetCat制作蜜罐收集客户端信息"><a href="#NetCat制作蜜罐收集客户端信息" class="headerlink" title="NetCat制作蜜罐收集客户端信息"></a>NetCat制作蜜罐收集客户端信息</h2><p>蜜罐简介：蜜罐形象地描述就是将蜜蜂引入到罐子中，主要用于收集黑客信息。就是我制作一个假的服务器让黑客攻击，然后收集他的信息，用作证据。 </p>
<p>在foo机器启动一个蜜罐 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">sudo nc -l <span class="number">80</span></div></pre></td></tr></table></figure>
<p>当黑客攻击如下URL时： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">http:<span class="comment">//l-foo.google.com/</span></div></pre></td></tr></table></figure>
<p>foo机器就会得到如下的信息，然后保存起来。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    GET / HTTP/<span class="number">1.1</span>  </div><div class="line">    </div><div class="line">    Host: l-foo.google.com  </div><div class="line">    </div><div class="line">    Connection: keep-alive  </div><div class="line">    </div><div class="line">    Cache-Control: max-age=<span class="number">0</span>  </div><div class="line">    </div><div class="line">    Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/webp,*<span class="comment">/*;q=0.8  </span></div><div class="line">    </div><div class="line">    Upgrade-Insecure-Requests: 1  </div><div class="line">    </div><div class="line">    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.86 Safari/537.36  </div><div class="line">    </div><div class="line">    Accept-Encoding: gzip, deflate, sdch  </div><div class="line">    </div><div class="line">    Accept-Language: zh-CN,zh;q=0.8,en;q=0.6  </div><div class="line">    </div><div class="line">    Cookie: XXX=XXXX;   </div><div class="line">XXXGlobal=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</div></pre></td></tr></table></figure>
<p>这样你就得到了攻击者的详细信息 </p>
<h2 id="NetCat进行TCP端口扫描"><a href="#NetCat进行TCP端口扫描" class="headerlink" title="NetCat进行TCP端口扫描"></a>NetCat进行TCP端口扫描</h2><p>扫描foo机器 1到10000端口是否有TCP链接  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">nc -z -w1 -v l-foo.google.com <span class="number">1</span>-<span class="number">10000</span> | grep <span class="string">'succeed'</span> | awk <span class="string">'&#123;print "host:"$3,$4" port has a tcp connect"&#125;'</span></div></pre></td></tr></table></figure>
<p>得到如下信息：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">host:l-foo.google.com <span class="number">22</span> port has a tcp connect  </div><div class="line">host:l-foo.google.com <span class="number">53</span> port has a tcp connect  </div><div class="line">host:l-foo.google.com <span class="number">3306</span> port has a tcp connect  </div><div class="line">host:l-foo.google.com <span class="number">5666</span> port has a tcp connect  </div><div class="line">host:l-foo.google.com <span class="number">8668</span> port has a tcp connect</div></pre></td></tr></table></figure>
<p>表明： 22，53，3306 … 机器上面有TCP链接。 </p>
]]></content>
      
        <categories>
            
            <category> Linux常用技巧 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux常用技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[UEFI GPT vs BIOS MBR 详解]]></title>
      <url>/2016/08/10/uefi-gpt-vs-bios-mbr/</url>
      <content type="html"><![CDATA[<p>上周回家给岳父买了个台式机，然后在家里组装了一下，发现操作系统默认安装的是win8，怕他们不会使用，所以就打算重装一个win7的系统。本来觉得是小菜一碟的事情，安装的时候提示磁盘是GPT格式的，晚上搜索了一下需要将GPT格式的磁盘转换成MBR的格式就好了。在没有弄清状况的情况下，就直接下载了一个磁盘分区工具，对磁盘进行转换，结果整块磁盘被格式化了。然后一直弄到了凌晨4点，才把系统搞好，本文就结合自己的实战。讲解一下<code>GPT VS MBR</code> 以及 <code>UEFI VS BIOS</code><br><a id="more"></a></p>
<h2 id="UEFI-VS-BIOS"><a href="#UEFI-VS-BIOS" class="headerlink" title="UEFI VS BIOS"></a>UEFI VS BIOS</h2><p><strong>BIOS</strong>（Basic Input Output System）基本输入输出系统，他的实质是固化在计算机ROM芯片上的不可重写的程序，主要用于承载计算机最基本的输入输出程序，开机自检程序，以及系统自启动程序。可以认为它是系统的初始点，没有BIOS就无法启动计算机。在win7以及win7以前的时代主要使用BIOS启动系统，目前正在被更加合理的UEFI所代替。BIOS启动流程：</p>
<ul>
<li>系统开机 - 上电自检（Power On Self Test 或 POST）。</li>
<li>POST过后初始化用于启动的硬件（磁盘、键盘控制器等）。</li>
<li>BIOS会运行BIOS磁盘启动顺序中第一个磁盘的首440bytes（MBR启动代码区域）内的代码。</li>
<li>启动引导代码从BIOS获得控制权，然后引导启动下一阶段的代码（如果有的话）（般是系统的启动引导代码）。</li>
<li>再次被启动的代码（二阶段代码）（即启动引导）会查阅支持和配置文件。</li>
<li>根据配置文件中的信息，启动引导程序会将内核和initramfs文件载入系统的RAM中，然后开始启动内核。</li>
</ul>
<p><strong>UEFI</strong> （Unfied Extensible Firmware Interface）统一可扩展接口，是 Intel 为 PC 固件的体系结构、接口和服务提出的建议标准。其主要目的是为了提供一组在 OS 加载之前（启动前）在所有平台上一致的、正确指定的启动服务，被看做是有近20多年历史的 BIOS 的继任者。UEFI启动流程：</p>
<ul>
<li>系统开机 - 上电自检（Power On Self Test 或 POST）。</li>
<li>UEFI 固件被加载，并由它初始化启动要用的硬件。</li>
<li>固件读取其引导管理器以确定从何处（比如，从哪个硬盘及分区）加载哪个 UEFI 应用。</li>
<li>固件按照引导管理器中的启动项目，加载UEFI 应用。</li>
<li>已启动的 UEFI 应用还可以启动其他应用（对应于 UEFI shell 或 rEFInd 之类的引导管理器的情况）或者启动内核及initramfs（对应于GRUB之类引导器的情况），这取决于 UEFI 应用的配置。</li>
</ul>
<p>BIOS与UEFI的区别：</p>
<ul>
<li>UEFI编码99%都是由C语言完成，而BIOS是用汇编语言编写的</li>
<li>UEFI 一改之前的中断、硬件端口操作的方法，而采用了Driver/protocol的新方式</li>
<li>UEFI 不支持X86实模式，而直接采用Flat mode（也就是不能用DOS了，现在有些 EFI 或 UEFI 能用是因为做了兼容，但实际上这部分不属于UEFI的定义了）；</li>
<li>输出也不再是单纯的二进制code，改为Removable Binary Drivers；</li>
<li>OS启动不再是调用Int19，而是直接利用protocol/device Path；</li>
<li>对于第三方的开发，前者基本上做不到，除非参与BIOS的设计，但是还要受到ROM的大小限制，而后者就便利多了。</li>
<li>弥补BIOS对新硬件的支持不足的问题。</li>
</ul>
<h2 id="GPT-VS-MBR"><a href="#GPT-VS-MBR" class="headerlink" title="GPT VS MBR"></a>GPT VS MBR</h2><p><strong>GPT</strong>（GUID Partition Table）GUID意为全局唯一标识符,这是一个正逐渐取代MBR的新标准。它和UEFI相辅相成——UEFI用于取代老旧的BIOS，而GPT则取代老旧的MBR。之所以叫作“GUID分区表”，是因为你的驱动器上的每个分区都有一个全局唯一的标识符（globally unique identifier，GUID）——这是一个随机生成的字符串，可以保证为地球上的每一个GPT分区都分配完全唯一的标识符。这个标准没有MBR的那些限制。磁盘驱动器容量可以大得多，大到操作系统和文件系统都没法支持。它同时还支持几乎无限个分区数量，限制只在于操作系统——Windows支持最多128个GPT分区，而且你还不需要创建扩展分区。 </p>
<p><strong>MBR</strong> 的意思是“主引导记录”，最早在1983年在IBM提出的。之所以叫“主引导记录”，是因为它是存在于驱动器开始部分的一个特殊的启动扇区。这个扇区包含了已安装的操作系统的启动加载器和驱动器的逻辑分区信息。所谓启动加载器，是一小段代码，用于加载驱动器上其他分区上更大的加载器。如果你安装了Windows，Windows启动加载器的初始信息就放在这个区域里——如果MBR的信息被覆盖导致Windows不能启动，你就需要使用Windows的MBR修复功能来使其恢复正常。 </p>
<p><strong>GPT MBR 的区别</strong></p>
<ul>
<li>MBR支持最大2TB磁盘，它无法处理大于2TB容量的磁盘。MBR还只支持最多4个主分区,如果你想要更多分区，你需要创建所谓“扩展分区”，并在其中创建逻辑分区。<br>MBR已经成为磁盘分区和启动的工业标准。</li>
<li>GPT 没有磁盘大小的限制，也没有分区个数的限制</li>
<li>在MBR磁盘上，分区和启动信息是保存在一起的。如果这部分数据被覆盖或破坏，事情就麻烦了，而MBR则对这些问题无能为力——只有在问题出现后，你才会发现计算机无法启动，或者磁盘分区都不翼而飞了。</li>
<li>GPT在整个磁盘上保存多个这部分信息的副本，因此它更为健壮，并可以恢复被破坏的这部分信息。GPT还为这些信息保存了循环冗余校验码（CRC）以保证其完整和正确——如果数据被破坏，GPT会发觉这些破坏，并从磁盘上的其他地方进行恢复。</li>
<li>MBR的兼容性比较好，win7时代之前的系统最好使用MBR分区</li>
</ul>
<p><strong>GPT MBR 如何选择</strong><br>win7包括win7时代之前的机器建议选择MBR，win7之后磁盘容量在2TB之内的机器也建议选择MBR。 </p>
<h2 id="预装WIN8系统如何安装WIN7"><a href="#预装WIN8系统如何安装WIN7" class="headerlink" title="预装WIN8系统如何安装WIN7"></a>预装WIN8系统如何安装WIN7</h2><p>根据上面的分析需要明白 UEFI是和GPT配合使用的，BIOS是和MBR配合使用的。现在win8的系统都是使用UEFI加GPT的组合，而WIN7建议是BIOS加GPT组合，所以在默认win8系统的电脑安装win7的时候，需要进行两部分转换 ： </p>
<ul>
<li>UEFI转换成BIOS</li>
<li>GPT转换成MBR</li>
</ul>
<h3 id="UEFI转换成BIOS"><a href="#UEFI转换成BIOS" class="headerlink" title="UEFI转换成BIOS"></a>UEFI转换成BIOS</h3><p>这个需要在BIOS中设置，不同的电脑有不同的设置方法，一般在 <code>Security</code>选项下面 </p>
<h3 id="GPT转换成MBR"><a href="#GPT转换成MBR" class="headerlink" title="GPT转换成MBR"></a>GPT转换成MBR</h3><p>这个一般需要制作一个U盘系统，下载一个磁盘转换工具，进行磁盘格式转换 </p>
<p>以上这两部都完成之后，就可以采用正常的步骤安装操作系统了。 </p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用排序面试算法精选总结]]></title>
      <url>/2016/08/01/common-sort-algorithm/</url>
      <content type="html"><![CDATA[<p>常见的几种排序算法按照是否需要进行两个元素的比较可以分为两类： </p>
<ul>
<li>比较排序 。比较排序的时间复杂度的下限是：O(n*lgn)常见的比较排序算法有（冒泡排序、选择排序、快速排序、插入排序、堆排序、归并排序）</li>
<li>非比较排序 。非比较排序的数据输入有一定的要求。比如：输入数据是在某一范围内的整数。这类输入数据的排序时间复杂度可以突破O(n*lgn)的下界。达到O(n)。（常见的非比较排序有：基数排序、计数排序、shell排序）<br>如下的内容将给我各个排序算法的源代码。并对其进行对比分析。<a id="more"></a>
</li>
</ul>
<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p><strong>排序算法稳定性：</strong>在一个待排序的序列中，如果 a[i]=a[j]（其中i在j之前），经过排序之后仍然有a[i]在a[j]之前（i,j的相对顺序不变）则称该排序算法是稳定排序算法，反之如果i,j的顺序发生变化，则称该排序算法为非稳定排序。 </p>
<p><strong>辅助空间：</strong>在该排序算法中除了输入数组需要额外使用的空间。 </p>
<h2 id="各个排序算法的时间复杂度"><a href="#各个排序算法的时间复杂度" class="headerlink" title="各个排序算法的时间复杂度"></a>各个排序算法的时间复杂度</h2><table>
<thead>
<tr>
<th>排序名称</th>
<th>最好时间复杂度</th>
<th>最坏时间复杂度</th>
<th>平均时间复杂度</th>
<th>是否稳定</th>
<th>辅助空间</th>
</tr>
</thead>
<tbody>
<tr>
<td>冒泡排序</td>
<td>O(n)</td>
<td>O(n^2)</td>
<td>O(n^2)</td>
<td>稳定</td>
<td>O(1)</td>
<td></td>
</tr>
<tr>
<td>选择排序</td>
<td>O(n^2)</td>
<td>O(n^2)</td>
<td>O(n^2)</td>
<td>不稳定</td>
<td>O(1)</td>
<td></td>
</tr>
<tr>
<td>插入排序</td>
<td>O(n)</td>
<td>O(n^2)</td>
<td>O(n^2)</td>
<td>稳定</td>
<td>O(1)</td>
<td></td>
</tr>
<tr>
<td>快速排序</td>
<td>O(n*lgn)</td>
<td>O(n^2)</td>
<td>O(n*lgn)</td>
<td>不稳定</td>
<td>O(1)</td>
<td></td>
</tr>
<tr>
<td>归并排序</td>
<td>O(n*lgn)</td>
<td>O(n^2)</td>
<td>O(n*lgn) 2</td>
<td>不稳定</td>
<td>O(n*lgn)</td>
<td></td>
</tr>
<tr>
<td>堆排序</td>
<td>O(n*lgn)</td>
<td>—-</td>
<td>—-</td>
<td>—-</td>
<td>—-</td>
<td></td>
</tr>
<tr>
<td>基数排序</td>
<td>O(d(n+k))</td>
<td>O(d(n+k))</td>
<td>O(d(n+k))</td>
<td>不稳定</td>
<td>—-</td>
<td></td>
</tr>
<tr>
<td>计数排序</td>
<td>O(k+n)</td>
<td>O(k+n)</td>
<td>O(k+n)</td>
<td>不稳定</td>
<td>—-</td>
<td></td>
</tr>
<tr>
<td>桶排序</td>
<td>O(n)</td>
<td>O(n)</td>
<td>O(n^2)</td>
<td>不稳定</td>
<td>—-</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="比较排序"><a href="#比较排序" class="headerlink" title="比较排序"></a>比较排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>冒泡排序需要重复遍历排序的序列，一次比较两个元素，如果他们的顺序与需求的顺序相反，就将他们进行交换，直到没有需要交换的元素为止。 </p>
<p><strong>冒泡排序代码</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.qunar.dzs.datahub.common.sort;  </div><div class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;  </div><div class="line"> </div><div class="line"><span class="comment">/*</span></div><div class="line"> * Created by guochenglai on 8/3/16.  </div><div class="line"> */  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        <span class="keyword">int</span> a[] = &#123;<span class="number">8</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">6</span>&#125;;  </div><div class="line">        System.out.println(<span class="string">"origin array is  :"</span> +JSONObject.toJSONString(a));  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length  ; ++i) &#123;  </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; a.length - <span class="number">1</span> -i ; ++j) &#123;   </div><div class="line">                <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;  </div><div class="line">                    <span class="keyword">int</span> tmp = a[j];  </div><div class="line">                    a[j] = a[j + <span class="number">1</span>];  </div><div class="line">                    a[j + <span class="number">1</span>] = tmp;  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        System.out.println(<span class="string">"sorted array is : "</span>+JSONObject.toJSONString(a));  </div><div class="line"></div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者使用如下的代码排序<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = a.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;  </div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;  </div><div class="line">        <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;  </div><div class="line">               <span class="keyword">int</span> tmp = a[j];  </div><div class="line">               a[j] = a[j + <span class="number">1</span>];  </div><div class="line">               a[j + <span class="number">1</span>] = tmp;  </div><div class="line">         &#125; </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>冒泡排序的注意点：冒泡排序最容易和选择排序弄混淆。在区分这两种排序算法的时候只需要记住一个关键点。冒泡排序采用大数下沉的方法。第一次循环第n个元素为最大值，第二次循环第n-1个元素为次大值，循环的大小每次减一</p>
<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>选择排序首先从未排序的序列中找到最大（小）值，与第一个元素进行交换。然后找到第二大值与第二个元素交换 …. 以此类推。直到排序完成。 </p>
<p>选择排序较冒泡排序对比： </p>
<ul>
<li>选择排序每次只交换一对元素。而冒泡排序每次需要交换O(n)对元素。</li>
<li>选择排序是不稳定的。例如对于序列： 3 3 1 经过第一次选择，第一个元素排到了第三个位置，这样两个“3”的相对位置就发生了变化。所以选择排序是非稳定排序。</li>
</ul>
<p><strong>选择排序代码</strong>  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.qunar.dzs.datahub.common.sort;  </div><div class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;   </div><div class="line"> <span class="comment">/*</span></div><div class="line"> * Created by guochenglai on 8/4/16.  </div><div class="line"> */  </div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectionSort</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </div><div class="line">        <span class="keyword">int</span> a[] = &#123;<span class="number">8</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">6</span>&#125;;  </div><div class="line">        System.out.println(<span class="string">"origin array is  :"</span> + JSONObject.toJSONString(a));  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;  </div><div class="line">            <span class="keyword">int</span> min = i;  </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; a.length; j++) &#123;  </div><div class="line">                <span class="keyword">if</span> (a[min] &gt; a[j]) &#123;  </div><div class="line">                    min = j;  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">int</span> tmp = a[i];  </div><div class="line">            a[i] = a[min];  </div><div class="line">            a[min] = tmp;  </div><div class="line">        &#125;  </div><div class="line">        System.out.println(<span class="string">"sorted array is : "</span>+JSONObject.toJSONString(a));  </div><div class="line"></div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>插入排序的形象化理解就是我们平常在玩牌，取一张新牌插入到手中牌的正确位置。它的工作原理是构建有序序列，对于未排序的数据，在已排序的序列中从后向前扫描，找到相应的位置并插入。<br><strong>插入排序代码</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.qunar.dzs.datahub.common.sort;  </div><div class="line"></div><div class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;  </div><div class="line"></div><div class="line"> <span class="comment">/*    </span></div><div class="line"> * Created by guochenglai on 8/4/16.  </div><div class="line"> */  </div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertionSort</span> </span>&#123;   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        <span class="keyword">int</span> a[] = &#123;<span class="number">8</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">6</span>&#125;;  </div><div class="line">        System.out.println(<span class="string">"origin array is  :"</span> + JSONObject.toJSONString(a));  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length; i++) &#123;  </div><div class="line">            <span class="keyword">int</span> tmp = a[i];  </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; a[j] &gt; tmp; j--) &#123;  </div><div class="line">                a[j + <span class="number">1</span>] = a[j];  </div><div class="line">                a[j] = tmp;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        System.out.println(<span class="string">"sorted array is : "</span>+JSONObject.toJSONString(a));  </div><div class="line"></div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>快速排序是一个典型的使用分治法进行排序的算法。按照分治法的思想，一个快速排序过程分为如下三个过程： </p>
<ul>
<li>Divide 将一个大的排序序列划分为若干个小的排序序列</li>
<li>Conquer 当一个排序序列足够小的对其进行排序或者直接排序</li>
<li>Combine 将若干个小的排序序列进行整合最后得到需要排序的序列<br>根据上述的三个过程可以得到快速排序的伪代码如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">    QUICKSORT(A,p,r)  </div><div class="line">    <span class="keyword">if</span> p&lt;r  </div><div class="line">       q = PARTITION(A,p,r)  </div><div class="line">       QUICKSORT(A,p,q-<span class="number">1</span>)  </div><div class="line">       QUICKSORT(A,q+<span class="number">1</span>,r)  </div><div class="line">```    </div><div class="line">         </div><div class="line">```<span class="function">java </span></div><div class="line">    <span class="title">PARTITION</span><span class="params">(A,p,r)</span>  </div><div class="line">       tmp = A[r]  </div><div class="line">       i = p-<span class="number">1</span>  </div><div class="line">       <span class="keyword">for</span>(j = p to r-<span class="number">1</span>)  </div><div class="line">            <span class="keyword">if</span> A[j] &lt;= tmp  </div><div class="line">               i++  </div><div class="line">               swap(A[i],A[j])   </div><div class="line">        swap(A[i+<span class="number">1</span>],A[r])         </div><div class="line">        <span class="keyword">return</span> i+<span class="number">1</span></div></pre></td></tr></table></figure>
<p><strong>快速排序的代码</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;  </div><div class="line">      <span class="keyword">int</span> index = partition(arr, left, right);  </div><div class="line">      <span class="keyword">if</span> (left &lt; index - <span class="number">1</span>)  </div><div class="line">            quickSort(arr, left, index - <span class="number">1</span>);  </div><div class="line">      <span class="keyword">if</span> (index &lt; right)  </div><div class="line">            quickSort(arr, index, right);  </div><div class="line">&#125;  </div><div class="line"></div><div class="line">  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span>  </span>&#123;  </div><div class="line">      <span class="keyword">int</span> i = left, j = right;  </div><div class="line">      <span class="keyword">int</span> tmp; </div><div class="line">      <span class="keyword">int</span> pivot = arr[(left + right) / <span class="number">2</span>];  </div><div class="line"></div><div class="line">      <span class="keyword">while</span> (i &lt;= j) &#123;  </div><div class="line">            <span class="keyword">while</span> (arr[i] &lt; pivot)  </div><div class="line">                  i++;  </div><div class="line">            <span class="keyword">while</span> (arr[j] &gt; pivot)  </div><div class="line">                  j--;  </div><div class="line">            <span class="keyword">if</span> (i &lt;= j) &#123;  </div><div class="line">                  tmp = arr[i];  </div><div class="line">                  arr[i] = arr[j];  </div><div class="line">                  arr[j] = tmp;  </div><div class="line">                  i++;  </div><div class="line">                  j--;  </div><div class="line">            &#125;  </div><div class="line">      &#125;;  </div><div class="line">      <span class="keyword">return</span> i;  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>归并排序和快速排序一样，都是采用分治的思想，他们的主要区别是： </p>
<ul>
<li>归并排序是将原问题划分为两个子问题之后分别进行排序，然后在对排序之后的结果进行合并操作。</li>
<li>快速排序的子问题进行排序之后，不需要进行归并的过程。</li>
</ul>
<p><strong>归并排序的伪代码</strong>      </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">MERGESORT(A,p,r)  </div><div class="line">   <span class="keyword">if</span> p&lt;r  </div><div class="line">      q=(p+r)/<span class="number">2</span>  </div><div class="line">      MERGESORT(A,p,q)  </div><div class="line">      MERGESORT(A,q+<span class="number">1</span>,r)  </div><div class="line">      MERGE(A,p,q,r)  </div><div class="line"></div><div class="line">MERGE(A,p,q,r)  </div><div class="line">   n1 = q-p+<span class="number">1</span>  </div><div class="line">   n2 = r-q  </div><div class="line">   <span class="keyword">for</span> i=<span class="number">1</span> to n1  </div><div class="line">      L[i] = A[p+i-<span class="number">1</span>]  </div><div class="line">   <span class="keyword">for</span> j=<span class="number">1</span> to n2  </div><div class="line">      R[j] = A[q+j]  </div><div class="line">   <span class="keyword">for</span> k=p to r  </div><div class="line">      <span class="keyword">if</span> L[i] &lt;= R[j]  </div><div class="line">         A[k] = L[i]  </div><div class="line">         i++  </div><div class="line">      ELSE  </div><div class="line">         A[k] = R[j]  </div><div class="line">         j++</div></pre></td></tr></table></figure>
<p><strong>归并排序的代码</strong>      </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line">    public class Mergesort &#123;  </div><div class="line">      private int[] numbers;  </div><div class="line">      private int[] helper;  </div><div class="line">      private int number;  </div><div class="line">    </div><div class="line">      public void sort(int[] values) &#123;  </div><div class="line">    </div><div class="line">        this.numbers = values;  </div><div class="line">    </div><div class="line">        number = values.length;  </div><div class="line">    </div><div class="line">        this.helper = new int[number];  </div><div class="line">    </div><div class="line">        mergesort(0, number - 1);  </div><div class="line">    </div><div class="line">      &#125;  </div><div class="line">    </div><div class="line">      </div><div class="line">    </div><div class="line">      private void mergesort(int low, int high) &#123;  </div><div class="line">    </div><div class="line">        if (low &lt; high) &#123;  </div><div class="line">    </div><div class="line">          int middle = low + (high - low) / 2;  </div><div class="line">    </div><div class="line">          mergesort(low, middle);  </div><div class="line">    </div><div class="line">          mergesort(middle + 1, high);  </div><div class="line">    </div><div class="line">          merge(low, middle, high);  </div><div class="line">    </div><div class="line">        &#125;  </div><div class="line">    </div><div class="line">      &#125;  </div><div class="line">    </div><div class="line">      </div><div class="line">    </div><div class="line">      private void merge(int low, int middle, int high) &#123;  </div><div class="line">    </div><div class="line">        for (int i = low; i &lt;= high; i++) &#123;  </div><div class="line">    </div><div class="line">          helper[i] = numbers[i];  </div><div class="line">    </div><div class="line">        &#125;  </div><div class="line">    </div><div class="line">      </div><div class="line">    </div><div class="line">        int i = low;  </div><div class="line">    </div><div class="line">        int j = middle + 1;  </div><div class="line">    </div><div class="line">        int k = low;  </div><div class="line">    </div><div class="line">        while (i &lt;= middle &amp;&amp; j &lt;= high) &#123;  </div><div class="line">    </div><div class="line">          if (helper[i] &lt;= helper[j]) &#123;  </div><div class="line">    </div><div class="line">            numbers[k] = helper[i];  </div><div class="line">    </div><div class="line">            i++;  </div><div class="line">    </div><div class="line">          &#125; else &#123;  </div><div class="line">    </div><div class="line">            numbers[k] = helper[j];  </div><div class="line">    </div><div class="line">            j++;  </div><div class="line">    </div><div class="line">          &#125;  </div><div class="line">    </div><div class="line">          k++;  </div><div class="line">    </div><div class="line">        &#125;  </div><div class="line">    </div><div class="line">        while (i &lt;= middle) &#123;  </div><div class="line">    </div><div class="line">          numbers[k] = helper[i];  </div><div class="line">    </div><div class="line">          k++;  </div><div class="line">    </div><div class="line">          i++;  </div><div class="line">    </div><div class="line">        &#125;  </div><div class="line">    </div><div class="line">      </div><div class="line">    </div><div class="line">      &#125;  </div><div class="line">    </div><div class="line">    &#125;  </div><div class="line">```   </div><div class="line">    </div><div class="line"></div><div class="line">### 堆排序 </div><div class="line"></div><div class="line">堆排序可以拆解为以下的几个子过程： </div><div class="line"></div><div class="line">  * 建立大根堆</div><div class="line">  * 交换堆定的元素和最后一个元素，并将堆大小减一</div><div class="line">  * 调整大根堆</div><div class="line"></div><div class="line">可用如下的伪代码来表示： </div><div class="line">       </div><div class="line">```java </div><div class="line">    HEAPSORT(A)  </div><div class="line">    </div><div class="line">       BUILD_MAX_HEAP(A)  //建立最大堆  </div><div class="line">    </div><div class="line">       for(i= A.length downto 2)  </div><div class="line">    </div><div class="line">         swap(A[1],A[i])  </div><div class="line">    </div><div class="line">         A.length--  </div><div class="line">    </div><div class="line">         MAX_HEAPIFY(A,1) //维护最大堆的性质</div></pre></td></tr></table></figure>
<p>从上面的伪代码可以看到两个组要过程，BUILD_MAX_HEAP(建立最大堆)和MAX_HEAPIFY(调整最大堆)<br>下面先看一下MAX_HEAP(维护最大堆的性质)的实现过程  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MAX_HEAPIFY(A,i)  </div><div class="line"></div><div class="line">   ....</div></pre></td></tr></table></figure>
<p>有了MAX_HEAP的过程，那么构建最大堆就比较容易了。直接上代码：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">BUILD_MAX_HEAP(A)  </div><div class="line"></div><div class="line">A.heapSize = A.<span class="function">length  </span></div><div class="line"></div><div class="line"><span class="title">for</span><span class="params">( i=A.length/<span class="number">2</span> downto <span class="number">1</span>)</span>  </div><div class="line"></div><div class="line">   <span class="title">MAX_HEAPIFY</span><span class="params">(A,i)</span></div></pre></td></tr></table></figure>
<h2 id="非比较排序"><a href="#非比较排序" class="headerlink" title="非比较排序"></a>非比较排序</h2><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3>]]></content>
      
        <categories>
            
            <category> 数据结构面试精选 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 面试精选 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java命令学习系列5——jstack详解]]></title>
      <url>/2016/07/21/java-command5-jstack/</url>
      <content type="html"><![CDATA[<p>本系列的前面四篇文件从面到点，逐层介绍了如果分析生产环境Java进程的运行状态，其中第一篇<a href="http://guochenglai.com/2016/07/12/java-command1-jps/">jps</a>介绍了如何找到所需要的Java进程，第二篇<a href="http://guochenglai.com/2016/07/13/java-command2-jinfo/">jinfo</a>介绍了如何查看Java进程的配置信息，第三篇<a href="http://guochenglai.com/2016/07/15/java-command3-jmap/">jmap</a>介绍了如何查看Java内存对象信息，以及堆内存信息，第四篇<a href="http://guochenglai.com/2016/07/18/java-command4-jstat/">jstat</a>介绍了如何分析Java进程的GC信息和JIT信息。本文将承接上文内容，利用jstack工具深入分析Java进程内的线程详细信息。<a id="more"></a></p>
<h2 id="jstack介绍"><a href="#jstack介绍" class="headerlink" title="jstack介绍"></a>jstack介绍</h2><p>jstack主要是用来分析Java进程中的Java线程的方法调用堆栈。它的目标是定位线程长时间停顿的原因（如：线程死锁，线程死循环，线程被IO占用）。当你的程序出现以上问题，或者以上的近似问题的时候，你就可以调用jstack查看各个线程的调用堆栈，分析线程具体在做什么，资源消耗在哪里。从而可以知道问题的原因，采取相应的补救措施。就我在公司使用jstack的场景来看，基本上都是使用jstack来分析线程的死锁问题。所以下文将大体介绍一下Java线程的锁。具体的理论知识可以参考我前面的文章：<a href="http://guochenglai.com/2016/06/03/java-concurrent3-java-lock-intro/">Java锁分析</a></p>
<h2 id="java线程介绍"><a href="#java线程介绍" class="headerlink" title="java线程介绍"></a>java线程介绍</h2><h3 id="java线程的几种状态"><a href="#java线程的几种状态" class="headerlink" title="java线程的几种状态"></a>java线程的几种状态</h3><p>要想用jtack查看分析线程的锁信息，首先必须知道Java线程的几种状态。</p>
<ul>
<li>NEW           线程未启动，一般jstack中不会出现这种未运行的线程</li>
<li>RUNNABLE      线程正在执行，这是一种正常的状态</li>
<li>BLOCKED       线程等待获取锁，目前线程被阻塞</li>
<li>WATING        线程主动放弃锁，然后在条件队列中，等待信息重新获取锁。请看前文<a href="http://guochenglai.com/2016/06/26/java-concurrent9-condtion-code-analysis/">如何理解Condition</a></li>
<li>TIMED_WATING  较上一个状态添加了一个等待时间</li>
<li>TERMINATED    线程已经执行完成</li>
</ul>
<p>观察上面的几种线程的状态我们发现，我们首要关注的是:<font color="red">BLOCKED,WATING</font>两种状态。看到这两种状态一定要小心，很可能就是线程死锁的原因。</p>
<h3 id="jstack关注的几个关键字"><a href="#jstack关注的几个关键字" class="headerlink" title="jstack关注的几个关键字"></a>jstack关注的几个关键字</h3><h4 id="locked"><a href="#locked" class="headerlink" title="locked"></a>locked</h4><p>locked &lt;地址&gt; 表示当前线程获取锁成功，锁的地址为 &lt;地址&gt;<br><img src="http://7xutce.com1.z0.glb.clouddn.com/146976495577558.jpg?imageView2/0/format/jpg" alt=""></p>
<h4 id="waiting-to-lock"><a href="#waiting-to-lock" class="headerlink" title="waiting to lock"></a>waiting to lock</h4><p>waiting to lock &lt;地址&gt; 表示当前线程等待获取锁，等待的锁的地址为&lt;地址&gt; </p>
<h4 id="waiting-on"><a href="#waiting-on" class="headerlink" title="waiting on"></a>waiting on</h4><p>waiting on &lt;地址&gt; 表示当前线程获取锁成功之后，主动释放锁，然后在条件队列中等待信号重新去获取锁<br><img src="http://7xutce.com1.z0.glb.clouddn.com/146976478398786.jpg?imageView2/0/format/jpg" alt=""></p>
<h4 id="parking-to-wait-for"><a href="#parking-to-wait-for" class="headerlink" title="parking to wait for"></a>parking to wait for</h4><p><img src="http://7xutce.com1.z0.glb.clouddn.com/146976465996207.jpg?imageView2/0/format/jpg" alt=""></p>
<h2 id="jstack使用教程"><a href="#jstack使用教程" class="headerlink" title="jstack使用教程"></a>jstack使用教程</h2><p><img src="http://7xutce.com1.z0.glb.clouddn.com/146977316414205.jpg?imageView2/0/format/jpg" alt=""><br><strong><font color="red">查看改进程内的所有线程堆栈</font></strong><br><code>jstack pid</code><br><strong><font color="red">查看某个线程的堆栈</font></strong><br>在实际的问题中，往往是Java进程内的一个线程出现了问题需要查看线程的堆栈，而不是直接查看当前Java进程的所有线程的堆栈。因为这样更具有针对性。那么可以采取如下的方法:<br>1 执行 <code>top -p 9968 -H</code> 找到Java进程内的线程的列表<br>2 执行 <code>top 9972</code> 查看线程的堆栈，这里9972是Java进程9968中的线程。</p>
<h2 id="实战分析"><a href="#实战分析" class="headerlink" title="实战分析"></a>实战分析</h2><p><strong>运行一下的Java程序：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.qunar.des.baofang;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by guochenglai on 7/29/16.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JStackTest</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Lock lock1 = <span class="keyword">new</span> ReentrantLock();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Lock lock2 = <span class="keyword">new</span> ReentrantLock();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> DeadLockTest(<span class="keyword">true</span>)).start();</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> DeadLockTest(<span class="keyword">false</span>)).start();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLockTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> flag;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DeadLockTest</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.flag = flag;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (flag) &#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        lock1.lock();</div><div class="line">                        System.out.println(<span class="string">"lock1 :"</span>+Thread.currentThread().getName());</div><div class="line"></div><div class="line">                        lock2.lock();</div><div class="line">                        System.out.println(<span class="string">"lock2 :"</span> + Thread.currentThread().getName());</div><div class="line">                    &#125;<span class="keyword">finally</span> &#123;</div><div class="line">                        lock1.unlock();</div><div class="line">                        lock2.unlock();</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        lock2.lock();</div><div class="line">                        System.out.println(<span class="string">"lock2 :"</span> + Thread.currentThread().getName());</div><div class="line"></div><div class="line">                        lock1.lock();</div><div class="line">                        System.out.println(<span class="string">"lock1 :"</span>+Thread.currentThread().getName());</div><div class="line">                    &#125;<span class="keyword">finally</span> &#123;</div><div class="line">                        lock2.unlock();</div><div class="line">                        lock1.unlock();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>执行 <code>jsp -l </code> 找到Java进程</strong><br><img src="http://7xutce.com1.z0.glb.clouddn.com/146976348294173.jpg?imageView2/0/format/jpg" alt=""><br><strong>执行 <code>jstack 25817</code> 分析Java的线程堆栈</strong><br><img src="http://7xutce.com1.z0.glb.clouddn.com/146976335055549.jpg?imageView2/0/format/jpg" alt=""><font color="red"><br>由图可以看到线程“Thread-1”的线程的地址为“0x000000076b29b578”锁使用者的地址为“0x000000076b29b548”，“Thread-0”线程的地址为“0x000000076b29b548”锁使用者的地址为“0x000000076b29b578”，因此两个线程相互等待对方的锁，也就造成了死问题。</font></p>
<h2 id="分析Java线程的脚本"><a href="#分析Java线程的脚本" class="headerlink" title="分析Java线程的脚本"></a>分析Java线程的脚本</h2><p><strong>以下的一个脚本是我在公司分析Java线程堆栈用的。现在提供出来供大家学习交流。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line"></div><div class="line">JAVA_HOME=/home/q/java/default</div><div class="line">WEB_HOME=/home/q/www</div><div class="line"></div><div class="line">jstack=&quot;$JAVA_HOME/bin/jstack&quot;</div><div class="line"></div><div class="line"></div><div class="line">processId=$1</div><div class="line"></div><div class="line">#如果没有输入进程ID，提示用户输入</div><div class="line">if [ ! -n &quot;$processId&quot; ] ;then</div><div class="line">    echo &quot;please input a java processId &quot;</div><div class="line">	read processId</div><div class="line">fi</div><div class="line"></div><div class="line">echo $processId</div><div class="line"></div><div class="line"></div><div class="line">#如果是标准输出则变成红色，否则正常输出</div><div class="line">redEcho()&#123;</div><div class="line">   if [ -c /dev/stdout ] ; then</div><div class="line">       echo -e &quot;\033[1;31m$@\033[0m&quot;</div><div class="line">   else</div><div class="line">       echo &quot;$@&quot;</div><div class="line">   fi</div><div class="line">&#125;</div><div class="line"></div><div class="line">showProcessAllthreads()&#123;</div><div class="line">   while read eachLine ; do</div><div class="line">      threadId=`echo $eachLine | awk &apos;&#123;print $1&#125;&apos;`</div><div class="line">      threadId0x=`printf %x $&#123;threadId&#125;`</div><div class="line">	  pcpu=`echo $&#123;eachLine&#125; | awk &apos;&#123;print $2&#125;&apos;`</div><div class="line">      totalTime=`echo $&#123;eachLine&#125; | awk &apos;&#123;print $3&#125;&apos;`</div><div class="line"></div><div class="line"></div><div class="line">      #存储文件</div><div class="line">      jstackFile=/tmp/$&#123;uniqueId&#125;_$&#123;processId&#125;</div><div class="line"></div><div class="line"></div><div class="line">	  sudo -u tomcat $jstack $&#123;processId&#125; &gt; $&#123;jstackFile&#125; || &#123;</div><div class="line">	      redEcho &quot;failed to use jstack commond on java process $&#123;processId&#125;&quot;</div><div class="line">		  rm -rf $&#123;jstackFile&#125;</div><div class="line">		  continue</div><div class="line">	  &#125;</div><div class="line"></div><div class="line">      redEcho &quot;java processId is [$&#123;processId&#125;] : current thread is($&#123;threadId&#125;/$&#123;threadId0x&#125;) : cost total process time is [$&#123;totalTime&#125;] : use total cup precent is [$&#123;pcpu&#125;]&quot;</div><div class="line">      sed &quot;/nid=0x$&#123;threadId0x&#125;/,/^$/p&quot; -n $&#123;jstackFile&#125;</div><div class="line">   done</div><div class="line">&#125;</div><div class="line"></div><div class="line">#为当前的程序的文件生成一个唯一的地址(时间+随机数+进程号(注意这个进程号是当前程序的进程号，不是java城市的进程号))</div><div class="line">uniqueId=`date +%s`_$&#123;RANDOM&#125;_$$</div><div class="line"></div><div class="line">echo $uniqueId</div><div class="line"></div><div class="line">top -p $processId -H -n 1 -b | sed -n &quot;8,1000p&quot; | awk &apos;&#123;print $1,$9,$11&#125;&apos; | showProcessAllthreads</div><div class="line"></div><div class="line">rm -rf /tmp/$&#123;uniqueId&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> Java命令工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> jstack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java命令学习系列4——jstat详解]]></title>
      <url>/2016/07/18/java-command4-jstat/</url>
      <content type="html"><![CDATA[<p><code>jstat(JVM Statistics Monitoring Tool)</code>是Oracle公司提供的用户监控虚拟机各种运行状态信息的命令行工具。相比于<code>jmap -dump(上文介绍过：主要是用来监控堆使用情况)</code>它更进一层，可以显示进程中的类装载，内存，垃圾收集，JIT编译等运行时的数据，从而可以对JVM的运行周期内的各个状态有一个宏观的把握。<a id="more"></a></p>
<h2 id="jstat-命令的使用"><a href="#jstat-命令的使用" class="headerlink" title="jstat 命令的使用"></a>jstat 命令的使用</h2><p>可以使用<code>jstat -help</code>命令查看jstat所支持的所有的命令组合。<br><img src="http://7xutce.com1.z0.glb.clouddn.com/146967136046585.jpg?imageView2/0/format/jpg" alt=""><br><strong>几个参数的解释如下：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">option      以何种方式展现GC的情况</div><div class="line">vmid        Java进程的进程号</div><div class="line">interval    显示进行信息的时间间隔</div><div class="line">count       显示进程信息的次数</div></pre></td></tr></table></figure>
<p><font color="red">例如如下命令的意思是：监控进程29487的堆gc情况,每隔500毫秒打印一次，一共打印10次。</font><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo jstat -gcutil 29487 500 10</div></pre></td></tr></table></figure></p>
<p>执行上述命令返回的详细信息如下：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/146967200949492.jpg?imageView2/0/format/jpg" alt=""></p>
<h3 id="option详解"><a href="#option详解" class="headerlink" title="option详解"></a>option详解</h3><p><font color="red"><strong>option选项代表的意思是：用户希望以何种方式组织jvm的返回结果。从功能上分类主要分为如下三类：</strong></font></p>
<ul>
<li>类装载，监控类装载卸载数量，总空间以及类装载耗费的时间。如(-class)</li>
<li>垃圾收集，主要是关注Java堆的各个区域的gc情况，不同的选项有不同的侧重点，将在下文详细介绍。如(-gc,-gcutil,-gccause,-gccapacity,-gcnew,-gcold,-gcnewcapacity …..)</li>
<li>运行期编译情况，输出JIT编译器编译过的方法耗时信息等。如(-compiler,-printcompilation)</li>
</ul>
<h3 id="类装载"><a href="#类装载" class="headerlink" title="类装载"></a>类装载</h3><p>执行：<code>jstat -class 23549</code>得到如下结果：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/146967318853640.jpg?imageView2/0/format/jpg" alt=""><br>详细解释:</p>
<ul>
<li>Loaded    装载类的数量</li>
<li>Bytes     转载了的字节（本示例差不多27M）</li>
<li>Unloaded  卸载类的数量</li>
<li>Bytes     卸载类的字节数</li>
<li>Time      类装载花费的时间</li>
</ul>
<h3 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h3><h4 id="jstat-gcutil"><a href="#jstat-gcutil" class="headerlink" title="jstat -gcutil"></a>jstat -gcutil</h4><p><img src="http://7xutce.com1.z0.glb.clouddn.com/146967200949492.jpg?imageView2/0/format/jpg" alt=""><br>详细解释：</p>
<ul>
<li>s0    年轻代的第一个survivor区占用的比例</li>
<li>s1    年轻代的第二个survivor区占用的比例</li>
<li>E     年轻代的Eden区域的占用比例</li>
<li>O     老年代的占用比例</li>
<li>P     永久代的占用比例</li>
<li>YGC   young gc 的总次数</li>
<li>YGCT  young gc 的总时间</li>
<li>FGC   full gc 的总次数</li>
<li>FGCT  full gc 的总时间</li>
<li>GCT   gc的总时间（young gc的总时间 +  full gc 的总时间）</li>
</ul>
<h4 id="jstat-gccapacity"><a href="#jstat-gccapacity" class="headerlink" title="jstat -gccapacity"></a>jstat -gccapacity</h4><p><img src="http://7xutce.com1.z0.glb.clouddn.com/146967498258817.jpg?imageView2/0/format/jpg" alt=""><br>详细解释：</p>
<ul>
<li>NGCMN 年轻代的最大空间</li>
<li>NGCMX 年轻代的最小空间 </li>
<li>NGC   年轻代的当前空间</li>
<li>S0C   年轻代第一个survior区空间</li>
<li>S1C   年轻代第二个survivor区空间</li>
<li>EC    年轻代Eden区空间</li>
<li>OGCMN 老年代的最小空间</li>
<li>OGCMX 老年代的最大空间</li>
<li>OGC   老年代的当前空间</li>
<li>OC    老年代的实际空间</li>
<li>MCMN  </li>
<li>MCMX   </li>
<li>MC    </li>
<li>CCSMN </li>
<li>CCSMX </li>
<li>CCSC </li>
<li>YGC  年轻代的总GC的次数</li>
<li>FGC  老年代的总GC的次数</li>
</ul>
<h4 id="jstat-gcnew"><a href="#jstat-gcnew" class="headerlink" title="jstat -gcnew"></a>jstat -gcnew</h4><p><img src="http://7xutce.com1.z0.glb.clouddn.com/146967596348910.jpg?imageView2/0/format/jpg" alt=""><br>详细解释：</p>
<ul>
<li>S0C   年轻代第一个survior区空间</li>
<li>S1C   年轻代第二个survivor区空间</li>
<li>S0U   年轻代survivor0已使用空间</li>
<li>S1U   年轻代survivor1已使用空间</li>
<li>TT    </li>
<li>MTT</li>
<li>DSS</li>
<li>EC   年轻代Eden区空间</li>
<li>EU   年轻代Eden区已使用空间</li>
<li>YGC  年轻代的总GC的次数</li>
<li>FGC  老年代的总GC的次数</li>
</ul>
<h4 id="jstat-gcnewcapacity"><a href="#jstat-gcnewcapacity" class="headerlink" title="jstat -gcnewcapacity"></a>jstat -gcnewcapacity</h4><p><img src="http://7xutce.com1.z0.glb.clouddn.com/146967607545638.jpg?imageView2/0/format/jpg" alt=""><br>详细解释：</p>
<ul>
<li>NGCMN 年轻代的最大空间</li>
<li>NGCMX 年轻代的最小空间 </li>
<li>NGC   年轻代的当前空间</li>
<li>S0CMX 年轻代第一个survior区最大空间</li>
<li>S0C   年轻代第一个survior区空间</li>
<li>S1CMX 年轻代第二个survior区最大空间</li>
<li>S1C   年轻代第二个survivor区空间</li>
<li>ECMX  年轻代Eden区最大空间</li>
<li>EC    年轻代Eden区空间</li>
<li>YGC   年轻代的总GC的次数</li>
<li>FGC   老年代的总GC的次数</li>
</ul>
<h4 id="其他选项"><a href="#其他选项" class="headerlink" title="其他选项"></a>其他选项</h4><table>
<thead>
<tr>
<th>命令选项</th>
<th>详细说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>jstat -gcold</td>
<td>old代对象的信息</td>
</tr>
<tr>
<td>stat -gcoldcapacity</td>
<td>old代对象的信息及其占用量</td>
</tr>
<tr>
<td>jstat -gcpermcapacity</td>
<td>perm对象的信息及其占用量</td>
</tr>
</tbody>
</table>
<h3 id="运行时编译"><a href="#运行时编译" class="headerlink" title="运行时编译"></a>运行时编译</h3><h4 id="jstat-compiler"><a href="#jstat-compiler" class="headerlink" title="jstat -compiler"></a>jstat -compiler</h4><p><code>jstat -compiler</code>输出从JVM启动到现在编译过的方法以及耗时信息等：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/146967350832441.jpg?imageView2/0/format/jpg" alt=""><br>详细解释：</p>
<ul>
<li>Compiled      JIT编译过的方法个数</li>
<li>Failed        JIT编译失败的方法个数</li>
<li>Invalid       JIT编译无效的方法个数</li>
<li>Time          JIT编译耗时</li>
<li>FailedType    JIT编译失败的类型</li>
<li>FailedMethod  JIT编译失败的方法</li>
</ul>
<h4 id="jstat-printcompilation"><a href="#jstat-printcompilation" class="headerlink" title="jstat -printcompilation"></a>jstat -printcompilation</h4><p><code>jstat -printcompilation</code>输出当前JVM的即时编译信息<br><img src="http://7xutce.com1.z0.glb.clouddn.com/146967391379142.jpg?imageView2/0/format/jpg" alt=""><br>详细解释：</p>
<ul>
<li>Compiled   JIT已经编译过的方法的个数</li>
<li>Size       </li>
<li>Type       </li>
<li>Method    JIT正在编译的方法</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> Java命令工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> jstat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java命令学习系列3——Jmap详解]]></title>
      <url>/2016/07/15/java-command3-jmap/</url>
      <content type="html"><![CDATA[<p>第一篇介绍 <strong><a href="http://guochenglai.com/2016/07/12/java-command1-jps/">jps</a></strong> 工具的文章中已经介绍了如果找到我们所需要的Java进程，第二篇 <strong><a href="http://guochenglai.com/2016/07/13/java-command2-jinfo/">jinfo</a></strong> 工具的文章中介绍了如何查看指定的Java进程的系统配置信息和用户参数信息，本文将更深入一步，介绍如何使用jmap工具在程序运行期间动态查看堆使用信息，以及Java对象信息。<a id="more"></a></p>
<h2 id="jmap适用场景"><a href="#jmap适用场景" class="headerlink" title="jmap适用场景"></a>jmap适用场景</h2><p>jmap一般使用于以下的几种情况：</p>
<ul>
<li>内存泄漏，线上程序在运行一段时间之后内存越来越大，这是我们要使用jmap命令dump出，内存的对象信息，然后进行分析</li>
<li>内存使用大于预期，这个一般是程序设计不合理，有很多冗余的对象放置在内存中，可以使用jmap查看内存中的对象，看看有些对象是否必要</li>
<li>jvm调优，可以使用jmap查看整个堆的使用情况。根据新生代，老年代的大小和使用比利，来对各个区域进行设置。</li>
</ul>
<h2 id="jmap使用详解"><a href="#jmap使用详解" class="headerlink" title="jmap使用详解"></a>jmap使用详解</h2><p>可以使用<code>jmap -h</code>命令来查看jmap所支持的参数选项<br><img src="http://7xutce.com1.z0.glb.clouddn.com/146960764436800.jpg?imageView2/0/format/jpg" alt=""></p>
<h3 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h3><p><strong>不带任何选项参数的jmap，将会打印目标虚拟机中加载的共享对象的起始地址，映射大小以及共享对象的文件的完整路径名称，如下图所示：</strong><br><img src="http://7xutce.com1.z0.glb.clouddn.com/146960789230929.jpg?imageView2/0/format/jpg" alt=""></p>
<h3 id="jmpa-heap"><a href="#jmpa-heap" class="headerlink" title="jmpa -heap"></a>jmpa -heap</h3><p><strong>打印堆的摘要信息，包括GC算法，堆的配置信息和使用信息，如下图所示：</strong><br><img src="http://7xutce.com1.z0.glb.clouddn.com/146960822716421.jpg?imageView2/0/format/jpg" alt=""><br>参数说明:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">Heap Configuration:                             ##堆配置信息</div><div class="line">   MinHeapFreeRatio = 40                        ##在堆的使用率小于40%的时候进行收缩，当Xmx=Xms的时候此配置无效</div><div class="line">   MaxHeapFreeRatio = 70                      ##在堆使用率大于70%的时候进行扩展，当Xmx=Xms的时候此配置无效</div><div class="line">   MaxHeapSize      = 4294967296 (4096.0MB)     ##堆的最大空间</div><div class="line">   NewSize          = 1073741824 (1024.0MB)     ##新生代的大小</div><div class="line">   MaxNewSize       = 1073741824 (1024.0MB)     ##最大的新生代的大小</div><div class="line">   OldSize          = 2147483648 (2048.0MB)     ##老年代的大小</div><div class="line">   NewRatio         = 2                          ##新生代中Eden和和Survivor区的比例为 8:1:1</div><div class="line">   SurvivorRatio    = 8                     ##新生代中Eden和和Survivor区的比例为 8:1:1</div><div class="line">   PermSize         = 134217728 (128.0MB)       ##永久代的大小</div><div class="line">   MaxPermSize      = 134217728 (128.0MB)       ##永久代的最大内存</div><div class="line">   G1HeapRegionSize = 0 (0.0MB)                 ##使用G1垃圾收集的区间</div><div class="line"></div><div class="line">Heap Usage:                                     ## 堆的使用信息</div><div class="line">New Generation (Eden + 1 Survivor Space):       ##新生代的大小（Eden区加一个Survivor区的空间信息）</div><div class="line">   capacity = 966393856 (921.625MB) ##总内存</div><div class="line">   used     = 133592616 (127.40384674072266MB)  ##已使用内存</div><div class="line">   free     = 832801240 (794.2211532592773MB)   ##剩余内存</div><div class="line">   13.823827124993642% used                     ## 使用内存占比</div><div class="line">Eden Space:                                     ## Eden区的大小</div><div class="line">   capacity = 859045888 (819.25MB)</div><div class="line">   used     = 130388888 (124.3485336303711MB)</div><div class="line">   free     = 728657000 (694.9014663696289MB)</div><div class="line">   15.178337946947952% used</div><div class="line">From Space:                                     ##第一个Surivivor区的空间信息</div><div class="line">   capacity = 107347968 (102.375MB)</div><div class="line">   used     = 3203728 (3.0553131103515625MB)</div><div class="line">   free     = 104144240 (99.31968688964844MB)</div><div class="line">   2.984432830624237% used</div><div class="line">To Space:                                       ##第二个Survivor区的空间信息</div><div class="line">   capacity = 107347968 (102.375MB)</div><div class="line">   used     = 0 (0.0MB)</div><div class="line">   free     = 107347968 (102.375MB)</div><div class="line">   0.0% used</div><div class="line">concurrent mark-sweep generation:               ##CMS垃圾收集占用的空间信息</div><div class="line">   capacity = 3221225472 (3072.0MB)</div><div class="line">   used     = 2427667128 (2315.203788757324MB)</div><div class="line">   free     = 793558344 (756.7962112426758MB)</div><div class="line">   75.36470666527748% used</div><div class="line">Perm Generation:                                ##永久代的空间信息</div><div class="line">   capacity = 134217728 (128.0MB)</div><div class="line">   used     = 63876264 (60.917152404785156MB)</div><div class="line">   free     = 70341464 (67.08284759521484MB)</div><div class="line">   47.5915253162384% used</div></pre></td></tr></table></figure></p>
<h3 id="jmap-histo"><a href="#jmap-histo" class="headerlink" title="jmap -histo"></a>jmap -histo</h3><p><strong>按照类进行归纳，该命令会统计Java进程内每个类的对象个数之和，和该类所有对象的占用的空间之和，以及类名称。</strong><font color="red">注意：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 该命令在线上执行的时候要做好评估，否则会导致线上机器宕机。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 jmap -histo:live 这个命令执行，JVM会先触发gc，然后再统计信息。</font><br><img src="http://7xutce.com1.z0.glb.clouddn.com/14696106561467.jpg?imageView2/0/format/jpg" alt=""><br>通过上图可以看到本进程内，出现最多的类是char数组，它一共有3398822个对象实例，这些对象总共占用278200648个字节。</p>
<h3 id="jmap-dump"><a href="#jmap-dump" class="headerlink" title="jmap -dump"></a>jmap -dump</h3><p><code>jamp -dump</code>命令主要是用来dump Java进程的堆内容，然后配合<code>jhat</code>命令，使用<code>OQL</code>语言进行内存对象的分析。下面将详细分析这个过程</p>
<h4 id="dump内存文件"><a href="#dump内存文件" class="headerlink" title="dump内存文件"></a>dump内存文件</h4><p>执行如下的命令在当前目录下dump出内存的二进制文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo jmap -F -dump:format=b,file=heapDump 22575</div></pre></td></tr></table></figure></p>
<p><font color="red">执行这个命令，会将JVM的整个heap信息dump到一个文件之中，如果heap比较大，会比较耗时，而且会导致显示服务不可用。所以在成产环境要慎重使用。</font><br><img src="http://7xutce.com1.z0.glb.clouddn.com/146961173859209.jpg?imageView2/0/format/jpg" alt=""><br>执行完成之后会在当前目录下面生成一个文件名为<code>heapDump</code>的二进制文件。<br><img src="http://7xutce.com1.z0.glb.clouddn.com/146961193524252.jpg?imageView2/0/format/jpg" alt=""></p>
<h4 id="jhat解析内存dump二进制文件"><a href="#jhat解析内存dump二进制文件" class="headerlink" title="jhat解析内存dump二进制文件"></a>jhat解析内存dump二进制文件</h4><p>执行如下的命令，分析dump出来二进制内存文件，并启动一个webserver。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo jhat heapDump</div></pre></td></tr></table></figure>
<p><img src="http://7xutce.com1.z0.glb.clouddn.com/146961207558017.jpg?imageView2/0/format/jpg" alt=""></p>
<h4 id="OQL分析dump文件"><a href="#OQL分析dump文件" class="headerlink" title="OQL分析dump文件"></a>OQL分析dump文件</h4><p>在浏览器输入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://10.86.43.50:7000/  ## IP地址换成你机器的IP就行了。</div></pre></td></tr></table></figure></p>
<p><img src="http://7xutce.com1.z0.glb.clouddn.com/146961223872425.jpg?imageView2/0/format/jpg" alt=""><br>下面就可以查询dump信息，也可以使用OQL语言进行查询。（具体OQL）语法参见Oracle官方教程</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> Java命令工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> jmap </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java命令学习系列2——jinfo详解]]></title>
      <url>/2016/07/13/java-command2-jinfo/</url>
      <content type="html"><![CDATA[<p>本话题的第一篇介绍了如何使用 <code>jps</code>命令，找到我们需要的Java进程。本文是承接上文的内容在找到我们需要的Java进程之后，如何使用<code>jinfo</code>查看该进程的详细信息。<a id="more"></a></p>
<h2 id="jinfo作用"><a href="#jinfo作用" class="headerlink" title="jinfo作用"></a>jinfo作用</h2><p><code>jinfo(java configuration information)</code>主要用来查看指定的Java进程的详细配置信息</p>
<h2 id="jinfo使用方法详解"><a href="#jinfo使用方法详解" class="headerlink" title="jinfo使用方法详解"></a>jinfo使用方法详解</h2><p><strong>可以使用<code>jinfo –help </code>或者使用<code>jinfo -h</code>来查看jinfo所支持的所有选项，如下所示：</strong><br><img src="http://7xutce.com1.z0.glb.clouddn.com/146960334470965.jpg?imageView2/0/format/jpg" alt=""></p>
<h3 id="jinfo"><a href="#jinfo" class="headerlink" title="jinfo"></a>jinfo</h3><p><strong>不带任何参数的<code>jinfo命令会打印出当前Java进程的详细配置信息包含系统参数信息以及用户参数信息</code></strong><br><img src="http://7xutce.com1.z0.glb.clouddn.com/146960405862279.jpg?imageView2/0/format/jpg" alt=""><br>输出的详细信息以及解释如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">Attaching to process ID 12010, please wait...</div><div class="line">Debugger attached successfully.</div><div class="line">Server compiler detected.</div><div class="line">JVM version is 24.45-b08</div><div class="line">Java System Properties:</div><div class="line"></div><div class="line">java.runtime.name = Java(TM) SE Runtime Environment</div><div class="line">sun.rmi.transport.tcp.responseTimeout = 3000  ##tcp链接的默认超时时间</div><div class="line">java.vm.version = 24.45-b08 #jvm的小版本号</div><div class="line">sun.boot.library.path = /home/q/java/jdk1.7.0_45/jre/lib/amd64 </div><div class="line">qunar.logs = /home/q/www/dragon.des.qunar.com/logs #自定义的日志文件位置</div><div class="line">shared.loader = </div><div class="line">java.vendor.url = http://java.oracle.com/</div><div class="line">java.vm.vendor = Oracle Corporation</div><div class="line">path.separator = :</div><div class="line">file.encoding.pkg = sun.io </div><div class="line">java.vm.name = Java HotSpot(TM) 64-Bit Server VM ##jvm的名称</div><div class="line">java.util.logging.config.file = /home/q/www/dragon.des.qunar.com/conf/logging.properties ##Java日志文件的配置路径</div><div class="line">tomcat.util.buf.StringCache.byte.enabled = true</div><div class="line">sun.os.patch.level = unknown</div><div class="line">sun.java.launcher = SUN_STANDARD</div><div class="line">user.country = US</div><div class="line">user.dir = /home/q/www/dragon.des.qunar.com/logs #自定义的项目的目录</div><div class="line">java.vm.specification.name = Java Virtual Machine Specification</div><div class="line">java.runtime.version = 1.7.0_45-b18</div><div class="line">java.awt.graphicsenv = sun.awt.X11GraphicsEnvironment</div><div class="line">os.arch = amd64</div><div class="line">java.endorsed.dirs = /home/q/tomcat/endorsed</div><div class="line">java.util.Arrays.useLegacyMergeSort = true</div><div class="line">line.separator = </div><div class="line"></div><div class="line">java.io.tmpdir = /home/q/www/dragon.des.qunar.com/temp ##本项目的临时文件的路径</div><div class="line">java.vm.specification.vendor = Oracle Corporation</div><div class="line">java.util.logging.manager = org.apache.juli.ClassLoaderLogManager</div><div class="line">java.naming.factory.url.pkgs = org.apache.naming</div><div class="line">os.name = Linux ## 操作系统的名称</div><div class="line">qunar.cache = /home/q/www/dragon.des.qunar.com/cache ##自定义的缓存路径</div><div class="line">sun.jnu.encoding = UTF-8</div><div class="line">java.library.path = /usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib</div><div class="line">sun.nio.ch.bugLevel = </div><div class="line">curator-dont-log-connection-problems = false</div><div class="line">java.class.version = 51.0 ##jvm主版本号</div><div class="line">java.specification.name = Java Platform API Specification</div><div class="line">sun.management.compiler = HotSpot 64-Bit Tiered Compilers</div><div class="line">os.version = 2.6.32-358.23.2.el6.x86_64</div><div class="line">user.home = /home/tomcat</div><div class="line">user.timezone = PRC</div><div class="line">catalina.useNaming = true</div><div class="line">java.awt.printerjob = sun.print.PSPrinterJob</div><div class="line">file.encoding = UTF-8 ## 默认文件编码</div><div class="line">java.specification.version = 1.7</div><div class="line">catalina.home = /home/q/tomcat ##tomcat的文件路径</div><div class="line">user.name = tomcat ##该进程的所属的用户</div><div class="line">java.class.path = /home/q/tomcat/bin/bootstrap.jar</div><div class="line">java.naming.factory.initial = org.apache.naming.java.javaURLContextFactory</div><div class="line">package.definition = sun.,java.,org.apache.catalina.,org.apache.coyote.,org.apache.tomcat.,org.apache.jasper.</div><div class="line">java.vm.specification.version = 1.7</div><div class="line">sun.arch.data.model = 64</div><div class="line">sun.java.command = org.apache.catalina.startup.Bootstrap start</div><div class="line">java.home = /home/q/java/jdk1.7.0_45/jre</div><div class="line">user.language = en</div><div class="line">java.specification.vendor = Oracle Corporation</div><div class="line">awt.toolkit = sun.awt.X11.XToolkit</div><div class="line">java.vm.info = mixed mode</div><div class="line">java.version = 1.7.0_45</div><div class="line">java.ext.dirs = /home/q/java/jdk1.7.0_45/jre/lib/ext:/usr/java/packages/lib/ext</div><div class="line">sun.boot.class.path = /home/q/java/jdk1.7.0_45/jre/lib/resources.jar:/home/q/java/jdk1.7.0_45/jre/lib/rt.jar:/home/q/java/jdk1.7.0_45/jre/lib/sunrsasign.jar:/home/q/java/jdk1.7.0_45/jre/lib/jsse.jar:/home/q/java/jdk1.7.0_45/jre/lib/jce.jar:/home/q/java/jdk1.7.0_45/jre/lib/charsets.jar:/home/q/java/jdk1.7.0_45/jre/lib/jfr.jar:/home/q/java/jdk1.7.0_45/jre/classes</div><div class="line">server.loader = </div><div class="line">java.vendor = Oracle Corporation</div><div class="line">catalina.base = /home/q/www/dragon.des.qunar.com ##catalina.base路径</div><div class="line">file.separator = / ##本操作系统的文件分隔符</div><div class="line">java.vendor.url.bug = http://bugreport.sun.com/bugreport/</div><div class="line">common.loader = $&#123;catalina.base&#125;/lib,$&#123;catalina.base&#125;/lib/*.jar,$&#123;catalina.home&#125;/lib,$&#123;catalina.home&#125;/lib/*.jar</div><div class="line">sun.io.unicode.encoding = UnicodeLittle</div><div class="line">sun.font.fontmanager = sun.awt.X11FontManager</div><div class="line">sun.cpu.endian = little</div><div class="line">package.access = sun.,org.apache.catalina.,org.apache.coyote.,org.apache.tomcat.,org.apache.jasper.,sun.beans.</div><div class="line">sun.cpu.isalist = </div><div class="line"></div><div class="line">##以下是传递给jvm的参数</div><div class="line">VM Flags:</div><div class="line"></div><div class="line">-Djava.util.logging.config.file=/home/q/www/dragon.des.qunar.com/conf/logging.properties -Xms4096m -Xmx4096m -XX:NewSize=1024m -XX:PermSize=128m -XX:+DisableExplicitGC -Djava.util.Arrays.useLegacyMergeSort=true -Dqunar.logs=/home/q/www/dragon.des.qunar.com/logs -Dqunar.cache=/home/q/www/dragon.des.qunar.com/cache -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/home/q/www/dragon.des.qunar.com/logs/gc..log -XX:+UseConcMarkSweepGC -XX:-OmitStackTraceInFastThrow -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djava.endorsed.dirs=/home/q/tomcat/endorsed -Dcatalina.base=/home/q/www/dragon.des.qunar.com -Dcatalina.home=/home/q/tomcat -Djava.io.tmpdir=/home/q/www/dragon.des.qunar.com/temp</div></pre></td></tr></table></figure></p>
<h3 id="jinfo-sysprops"><a href="#jinfo-sysprops" class="headerlink" title="jinfo -sysprops"></a>jinfo -sysprops</h3><p><strong>查看系统参数信息</strong><br><img src="http://7xutce.com1.z0.glb.clouddn.com/146960486382422.jpg?imageView2/0/format/jpg" alt=""></p>
<h3 id="jinfo-flags"><a href="#jinfo-flags" class="headerlink" title="jinfo -flags"></a>jinfo -flags</h3><p><strong>查看jvm参数，指jvm启动的时候，用户配置的参数，一般是gc信息，内存信息等等。</strong><br><img src="http://7xutce.com1.z0.glb.clouddn.com/146960517197372.jpg?imageView2/0/format/jpg" alt=""></p>
<h3 id="jinfo-flag"><a href="#jinfo-flag" class="headerlink" title="jinfo -flag"></a>jinfo -flag</h3><p><strong>查看指定参数的值</strong><br>这个命令在我的电脑上并没有使用成功过，不过我在我同事的电脑上使用成功了。有兴趣的同学可以看看这个是什么原因。下面是我电脑的输出内容：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/146960614341071.jpg?imageView2/0/format/jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> Java命令工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> jinfo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java命令学习系列1——Jps详解]]></title>
      <url>/2016/07/12/java-command1-jps/</url>
      <content type="html"><![CDATA[<p><code>jps</code>命令的作用是显示当前用户的Java进程。相当于Linux系统下的<code>ps aux | grep java</code>命令。但是jps并不是使用应用程序名称来查找JVM实例，而是查找当前用户的所有Java进程。<a id="more"></a></p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>jps（Java Virtual Machine Process Status Tool）是JDK1.5提供的用来显示<font color="red">当前用户</font>的所有Java进程的命令行工具，一般用于在Linux平台上查找我们需要分析的Java进程。<font color="red"><br>注意：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 本文所有的内容是以Linux为例！！！<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 jps命令只能显示当前用户的Java进程<br></font>   </p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>Java进程启动之后会在 <code>/tmp/</code>目录下生成一个：<code>hsperfdata_{user}</code>格式的文件夹。如下图所示：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/java%2Fjps%2F01_ls_tmp.png" alt=""><br>在这些文件夹之下有一些文件，这些文件的名字就是该文件夹对应的用户的Java程序。如下图所示：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/java%2Fjps%2F02_ls_hsprefdata.png" alt=""><br>可以看到 flume用户有一个Java进程（进程Id为3113），tomcat用户有一个Java进程（进程Id为12010）。<br>因此，列出当前用户的所有Java进程的方法就是遍历<code>/tmp</code>目录下的所有属于当前用户的文件而已。</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="jps参数详细说明"><a href="#jps参数详细说明" class="headerlink" title="jps参数详细说明"></a>jps参数详细说明</h3><p>可以使用<code>jps -help</code>来查看jps命令所支持的所有选项：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/146960093888164.jpg?imageView2/0/format/jpg" alt=""></p>
<h3 id="jps-g"><a href="#jps-g" class="headerlink" title="jps -g"></a>jps -g</h3><p><strong>只显示进程的id</strong><br><img src="http://7xutce.com1.z0.glb.clouddn.com/146960134250092.jpg?imageView2/0/format/jpg" alt=""></p>
<h3 id="jps-m"><a href="#jps-m" class="headerlink" title="jps -m"></a>jps -m</h3><p><strong>输出传递给main的参数</strong><br><img src="http://7xutce.com1.z0.glb.clouddn.com/146960152463069.jpg?imageView2/0/format/jpg" alt=""></p>
<h3 id="jps-l"><a href="#jps-l" class="headerlink" title="jps -l"></a>jps -l</h3><p><strong>输出应用程序的包名，主文件名，jar文件的完整路径（如果是jar）</strong><br><img src="http://7xutce.com1.z0.glb.clouddn.com/146960169958866.jpg?imageView2/0/format/jpg" alt=""></p>
<h3 id="jps-v"><a href="#jps-v" class="headerlink" title="jps -v"></a>jps -v</h3><p><strong>输出传递给jvm的参数</strong><br><img src="http://7xutce.com1.z0.glb.clouddn.com/146960193542242.jpg?imageView2/0/format/jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> Java命令工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> jps </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Win/Mac/Linux免费翻墙详细教程]]></title>
      <url>/2016/07/09/win-mac-linux-cross-network/</url>
      <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>自从GFW问世以来，将整个天朝又慢慢地走向了改(bi)革(guan)开(suo)放(guo)的道路，作为一个有志青年，怎么可能不阅读外国的文献。所以就走上了翻墙之路，但是期间用过一些免费的服务，例如 <code>红杏</code> 但是最近随着浏览器翻墙被禁止之后。貌似走不通了，所以最后只剩下了一条道路，自己租用国外的服务器，然后建立VPN，代理到国外的网络。这个方法一直用到了现在，而且最近发现，亚马逊推出了一款云主机，可以免费用一年(换个账号和密码又可以用一年)，所以就诞生了如下的免费翻墙教程。适用于所有的操作系统平台，不同的操作系统只是如下的第三步不同(每个操作系统下载自己操作系统对应的客户端)<br>总体思路如下：</p>
<ul>
<li>在亚马逊申请免费试用一年的云主机。(如果读者能够找到这样的云主机，按照下面的教程，理论上可以一直免费试用，不过如果要想好的用户体验可以去买一个国外的云主机，都挺便宜的，而且用户体验好)</li>
<li>在云主机上装一个ShadowSocket的server端程序，并进行配置</li>
<li>在本地下载一个ShadowSocket的客户端程序，填入Server端配置的账号即可免费翻墙。</li>
</ul>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>具体参见 <a href="http://bropaul.com/post/amazon-aws-in-practice" target="_blank" rel="external">免费的午餐不好吃</a>。</p>
<font color="red">虽然服务器是免费的，但是是有条件的，不能超过流量和IO的上线，否则会自动收费（前面已经绑定了信用卡），所以请注意，不要使用本教程看视频，否则你会破产。日常一个人访问网页还是可以的。最好不要和别人共享。一年到期记得关机。</font>

<h1 id="详细教程"><a href="#详细教程" class="headerlink" title="详细教程"></a>详细教程</h1><p>鉴于很多人都是小白，所以本文将列出第一部分提出的三个过程的详细教程。</p>
<h2 id="亚马逊申请免费一年云主机"><a href="#亚马逊申请免费一年云主机" class="headerlink" title="亚马逊申请免费一年云主机"></a>亚马逊申请免费一年云主机</h2><h3 id="账号申请教程"><a href="#账号申请教程" class="headerlink" title="账号申请教程"></a>账号申请教程</h3><p>申请云主机的地址: <a href="https://aws.amazon.com/cn/" target="_blank" rel="external">amazon_aws</a></p>
<font color="red"><br>1 打开上面超链接的官网界面如下：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/vps%2Fvps_register_1.png" alt=""><br>2 如果有账号就直接登录，如果没有账号点击右上角的”注册“按钮进行注册，注册界面如下：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/vps%2Fvps_register_2.png" alt=""><br>3 输入账号点击“登录”这里的登录即注册，出现如下界面：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/vps%2Fvps_register_3.png" alt=""><br>4 点击”创建账户“，继续填写信息<br><img src="http://7xutce.com1.z0.glb.clouddn.com/vps%2Fvps_register_4.png" alt=""><br>5 点击”创建账户并继续“，填写你的信用卡信息如下：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/vps%2Fvps_register_5.png" alt=""><br>6 点击”继续“会进行人机交互，确认你的电话<br><img src="http://7xutce.com1.z0.glb.clouddn.com/vps%2Fvps_register_6.png" alt=""><br>7 这时候会接到亚马逊官网的电话，并在电话中填入下图的验证码。<br><img src="http://7xutce.com1.z0.glb.clouddn.com/vps%2Fvps_register_7.png" alt=""><br>8 验证完成之后会出现如下的界面<br><img src="http://7xutce.com1.z0.glb.clouddn.com/vps%2Fvps_register_8.png" alt=""><br>9 点击“选择支持方案”出现如下的页面，选择“基本”<br><img src="http://7xutce.com1.z0.glb.clouddn.com/vps%2Fvps_register_9.png" alt=""><br>10 点击”继续“出现如下的页面。然后点击页面右上角的按钮”启动管理控制台“<br><img src="http://7xutce.com1.z0.glb.clouddn.com/vps%2Fvps_register_10.png" alt=""><br></font>

<h3 id="创建主机教程"><a href="#创建主机教程" class="headerlink" title="创建主机教程"></a>创建主机教程</h3><font color="red"><br>1 进入如下的页面选择第一个: EC2，界面如下：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/vps%2Fec2_create_1.png" alt=""><br>2 点击“创建组”出现如下的界面<br><img src="http://7xutce.com1.z0.glb.clouddn.com/vps%2Fec2_create_2.png" alt=""><br>3 点击启动示例，选择一个服务器的操作系统，我选择的是amzon自己的服务器操作系统，你也可以选择Ubuntu的或者RedHat的，这个取决于你的喜好，点击系统后面的“选择”按钮。<br>4 点击选择按钮之后，出现如下的选择CPU和内存的页面，可以直接选择亚马逊推荐的即可<br><img src="http://7xutce.com1.z0.glb.clouddn.com/vps%2Fec2_create_4.png" alt=""><br>5 点击“审核和启动”按钮<br><img src="http://7xutce.com1.z0.glb.clouddn.com/vps%2Fec2_create_5_1.png" alt=""><br>6 点击“启动创建密钥对”,在密钥对名称的地方输入”MyFirstKey.pem”,如下图：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/vps%2Fec2_create_6.png" alt=""><br>7 出现如下的界面表示成功<br><img src="http://7xutce.com1.z0.glb.clouddn.com/vps%2Fec2_create_7.png" alt=""><br></font>

<h3 id="本地连接亚马逊云主机"><a href="#本地连接亚马逊云主机" class="headerlink" title="本地连接亚马逊云主机"></a>本地连接亚马逊云主机</h3><p>我用的是Mac电脑，本文就以Mac电脑为示例，如果是windows用户参考亚马逊官方教程 <a href="http://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/putty.html" target="_blank" rel="external">使用 PuTTY 从 Windows 连接到 Linux 实例</a></p>
<p>1 打开Mac的终端输入如下命令：<br><code>sudo mv  ~/Downloads/MyFirstKey.pem ~/.ssh/</code><br>2 修改文件的权限<br><code>sudo chmod 400 ~/.ssh/MyFirstKey.pem</code><br>3 登陆你的亚马逊服务器，换成你的IP，用户名都是固定的，注意IP是亚马逊给你提供的公有IP。Ubuntu的用户名貌似的”ubuntu”<br><code>ssh -i ~/.ssh/MyFirstKey.pem ec2-user@52.XXX.XXX.XXX</code></p>
<h2 id="亚马逊云主机上配置ShadowSockert的Server端"><a href="#亚马逊云主机上配置ShadowSockert的Server端" class="headerlink" title="亚马逊云主机上配置ShadowSockert的Server端"></a>亚马逊云主机上配置ShadowSockert的Server端</h2><p>这里已经登陆上了亚马逊的云主机，所以这些命令都是在云主机上执行的。<br>1 切换到root账号<br><code>sudo su root</code><br>2 安装python支持<br>如果是前面系统选择的是ubuntu执行：<br><code>apt-get install python-pip</code><br>如果前面主机系统选择的是亚马逊的请执行<br><code>yum intsall python-pip</code><br>3 安装shadowsocket服务器<br><code>pip install shadowsocks</code><br><code>注意这里可能会报错说 pip命令找不到。解决方法是：<br>查看/usr/local/bin下面是否有pip文件，如果有则建立一个软连到/usr/bin目录，执行<br>ln -s /usr/local/bin/pip /usr/bin<br></code><br>4 配置shadowsocket<br>4.1 新建一个配置文件<br><code>vi /etc/shadowsocks.json</code><br>4.2文件内容如下：<br><code><br>{<br>    “server”:”0.0.0.0”,<br>    “server_port”:8888,<br>    “local_address”:”127.0.0.1”,<br>    “local_port”:1080,<br>    “password”:”这里填入你想要填的密码”,<br>    “timeout”:300,<br>    “method”:”aes-256-cfb”,<br>    “fast_open”:false<br>}<br></code><br>5 启动ShadowSocket，执行如下命令<br><code>ssserver -c /etc/shadowsocks.json -d start</code><br>如果报错请参考问题3的解决方案</p>
<p><font color="red"><br>6 配置入站规则，如果不配置本地是不能通过shadowsocket连接的。<br>6.1 打开正在运行的实例，向右滚，找到“安全组”选择<br><img src="http://7xutce.com1.z0.glb.clouddn.com/vps%2Fconfig_security_1.png" alt=""><br><img src="http://7xutce.com1.z0.glb.clouddn.com/vps%2Fconfig_security_2.png" alt=""><br>6.2点击最后一个安全组选项<br><img src="http://7xutce.com1.z0.glb.clouddn.com/vps%2Fconfig_security_3.png" alt=""><br>6.3点击操作编辑入栈规则，注意端口，要与配置的server_port相同，这里是8888<br><img src="http://7xutce.com1.z0.glb.clouddn.com/vps%2Fconfig_security_4_1.png" alt=""><br>至此，服务器端就配置完了，客户端就可以连接了。<br></font></p>
<h2 id="本地配置ShadowSocket的Client端"><a href="#本地配置ShadowSocket的Client端" class="headerlink" title="本地配置ShadowSocket的Client端"></a>本地配置ShadowSocket的Client端</h2><p><font color="red"><br>我用的Mac,所以下面的mac电脑的配置，windows应该差不多。<br>1 下载shadowsocket，这个建议一定要去官网下载，<a href="https://shadowsocks.org/en/download/clients.html" target="_blank" rel="external">官网下载连接</a><br>2 进行安装<br>3 配置<br>3.1 点击 “open server preferences”进入配置页面<br><img src="http://7xutce.com1.z0.glb.clouddn.com/vps%2Fclient_config_1.png" alt=""><br>3.2 添加左边的 “+”在右边填入的你的服务器信息 Address是服务器的IP，Password是服务器上你在配置文件中填入的密码，Remarks是一个别名，可填可不填<br><img src="http://7xutce.com1.z0.glb.clouddn.com/vps%2Fclient_config_2.png" alt=""></font></p>
<font></font>]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 翻墙 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我为什么写博客]]></title>
      <url>/2016/07/03/why-write-blog/</url>
      <content type="html"><![CDATA[<p>没有明显坏处。却有很多好处。</p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java并发编程之10——for/join框架]]></title>
      <url>/2016/07/01/java-concurrent10-for-join-code-analysis/</url>
      <content type="html"><![CDATA[<p>Fork/Join框架是Java7提供的用户执行并行任务的框架，主要的工作是将大任务分割成若干个小任务。然后并行执行子任务，汇总每个子任务的结果，得到最终结果。他的主要优点有如下两个：</p>
<ul>
<li>内部实现了工作窃取算法，当一个线程完成自己的任务之后，会从其他线程的任务队列的末尾，拿到任务去执行。</li>
<li>有封装良好的API，用户只需要定义如何划分任务，不需要关心实现细节。<a id="more"></a>
</li>
</ul>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>fork/join框架主要有如下两个类：</p>
<ul>
<li>ForkJoinTask：Fork/Join任务，它提供了fork()和join()操作机制。在通常情况下我们只需要继承子类。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1. RecursiveAction:用于没有返回结果的任务<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2. RecursiveTask:用户有返回结果的任务</li>
<li>ForkJoinPool: Fork/Join线程池，新添加的任务都提交到线程池，任务分割出的子任务会添加到当前工作线程的双端队列末尾，当前线程从任务队列的头部取任务，其他线程从任务队列的尾部取任务。</li>
</ul>
<p>一个fork/join的任务的处理流程可以，类比于如下的伪代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function">Result <span class="title">solve</span><span class="params">(Problem problem)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (problem is small)</div><div class="line">		directly solve problem</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		split problem into independent parts</div><div class="line">		fork <span class="keyword">new</span> subtasks to solve each part</div><div class="line">		join all subtasks</div><div class="line">		compose result from subresults</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>向ForkJoinPool提交一个任务主要有三种方法：</p>
<ul>
<li>execute() 调用fork方法将异步地将大任务分割成小任务</li>
<li>invoke() 等待返回结果</li>
<li>submit() 返回一个Future对象</li>
</ul>
<p>获取forkjoin任务的状态的方法</p>
<ul>
<li>isDone()  如果任务执行完成就返回true</li>
<li>isCompletedNormally() 如果任务没有发生异常，或者没有被取消就返回true</li>
<li>isCancelled() 如果任务被取消了就返回true</li>
<li>isCompletedabnormally() 任务呗取消或者发生异常就返回true</li>
</ul>
<h2 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h2><p>下面的一个列子是利用ForkJoin计算Fabonacci数列。</p>
<p><font color="red">注意:这里只是为了演示如何使用ForkJoin框架，下面的计算方法效率其实还是很低，时间复杂度应该为:O(n^2)。因为Fabonacci数据具有典型的：一个问题的最优解包含子问题的最优解，所以可以采用动态规划来达到最高的效率。<br></font><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.qunar.dzs.datahub.common.forkjoin;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.ForkJoinPool;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.RecursiveTask;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by guochenglai on 7/12/16.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">long</span> beginTime = System.currentTimeMillis();</div><div class="line">        FibonacciTask fibonacciTask = <span class="keyword">new</span> FibonacciTask(<span class="number">30</span>);</div><div class="line">        ForkJoinPool forkJoinPool = <span class="keyword">new</span> ForkJoinPool(); <span class="comment">//默认会实例化出处理器个数个线程</span></div><div class="line"></div><div class="line">        forkJoinPool.invoke(fibonacciTask); <span class="comment">//用线程池执行任务，能够自动实现工作窃取算法</span></div><div class="line"></div><div class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"calculate second is : "</span> + (endTime - beginTime) * <span class="number">1.0</span> / <span class="number">1000</span>);</div><div class="line">        System.out.println(fibonacciTask.getRawResult());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FibonacciTask</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> n;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FibonacciTask</span><span class="params">(<span class="keyword">long</span> n)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.n = n;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> Long <span class="title">compute</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">return</span> n;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            FibonacciTask f1 = <span class="keyword">new</span> FibonacciTask(n - <span class="number">1</span>);<span class="comment">//对每一次子任务创建一个Fibonacci对象</span></div><div class="line">            f1.fork(); <span class="comment">//调用fork用法并行执行</span></div><div class="line">            FibonacciTask f2 = <span class="keyword">new</span> FibonacciTask(n - <span class="number">2</span>);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> f2.compute() + f1.join(); <span class="comment">//继续执行并行第二个子任务，执行成功之后，等待</span></div><div class="line">            <span class="comment">//第一个子任务f1.join()的执行结果一起返回</span></div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Fork-Join框架源码分析"><a href="#Fork-Join框架源码分析" class="headerlink" title="Fork/Join框架源码分析"></a>Fork/Join框架源码分析</h2><p>Fork/Join框架的源码分析主要分为两个部分：</p>
<ul>
<li>ForkJoinPool源码分析</li>
<li>ForkJoinTask源码分析</li>
</ul>
<h3 id="ForkJoinPool源码分析"><a href="#ForkJoinPool源码分析" class="headerlink" title="ForkJoinPool源码分析"></a>ForkJoinPool源码分析</h3><h4 id="ForkJoinPool构造函数"><a href="#ForkJoinPool构造函数" class="headerlink" title="ForkJoinPool构造函数"></a>ForkJoinPool构造函数</h4><p>首先ForkJoin的构造函数如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ForkJoinPool</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(Math.min(MAX_CAP, Runtime.getRuntime().availableProcessors()),</div><div class="line">             defaultForkJoinWorkerThreadFactory, <span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>第一个参数，是线程池的线程的个数，默认情况下就是当前机器的处理就的个数。<br>第二个参数，是ForkJoinPool创建线程的，线程工厂。<br>第三个参数，是UncaughtExceptionHandler，作用是当线程发生异常的时候调用，默认情况下线程发生不设置，但是在registerWorker的时候，会设置一个默认的handler。<br>第四个参数，标识是否不使用 <figure class="highlight plain"><figcaption><span>```  处理模式。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#### ForkJoin线程工厂</div><div class="line">线程工厂用来创建一个ForkJoin专用线程。</div><div class="line">```java</div><div class="line">static final class DefaultForkJoinWorkerThreadFactory</div><div class="line">        implements ForkJoinWorkerThreadFactory &#123;</div><div class="line">        public final ForkJoinWorkerThread newThread(ForkJoinPool pool) &#123;</div><div class="line">            return new ForkJoinWorkerThread(pool);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h4 id="ForkJoinWorkThread"><a href="#ForkJoinWorkThread" class="headerlink" title="ForkJoinWorkThread"></a>ForkJoinWorkThread</h4><p>ForkJoinWorkThread是被ForkJoinPool管理的专门用来处理ForkJoinTask的线程<br>首先看一下ForkJoinWorkThread的两个属性:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> ForkJoinPool pool; <span class="comment">//第一个属性用来指向当前线程对应的线程池，他在创建线程的时候立即初始化</span></div><div class="line"><span class="keyword">final</span> ForkJoinPool.WorkQueue workQueue; <span class="comment">//第二个字段用来指向当前线程对应的任务列表</span></div></pre></td></tr></table></figure></p>
<p>ForkJoinWorkThread的构造方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="title">ForkJoinWorkerThread</span><span class="params">(ForkJoinPool pool)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(<span class="string">"aForkJoinWorkerThread"</span>);</div><div class="line">        <span class="keyword">this</span>.pool = pool; <span class="comment">//指定当前线程对应的线程池</span></div><div class="line">    <span class="keyword">this</span>.workQueue = pool.registerWorker(<span class="keyword">this</span>); <span class="comment">//创建一个WorkQueue,将其插入到WorkQueue集合的合适的位置，并返回这个WorkQueue</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> WorkQueue <span class="title">registerWorker</span><span class="params">(ForkJoinWorkerThread wt)</span> </span>&#123;</div><div class="line">        UncaughtExceptionHandler handler;</div><div class="line">        wt.setDaemon(<span class="keyword">true</span>);                           <span class="comment">// 这里可以看到所有的工作线程都是后台线程</span></div><div class="line">        <span class="keyword">if</span> ((handler = ueh) != <span class="keyword">null</span>)</div><div class="line">            wt.setUncaughtExceptionHandler(handler); <span class="comment">//为每个工作线程设置一个默认的异常处理Handler</span></div><div class="line">        WorkQueue w = <span class="keyword">new</span> WorkQueue(<span class="keyword">this</span>, wt); <span class="comment">//创建一个任务队列，指定他所属的线程池和所属的线程</span></div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;                                    <span class="comment">// assign a pool index</span></div><div class="line">        <span class="keyword">int</span> mode = config &amp; MODE_MASK;</div><div class="line">        <span class="keyword">int</span> rs = lockRunState();</div><div class="line">        <span class="keyword">try</span> &#123; <span class="comment">//将常见的任务队列，放到任务队列的集合中</span></div><div class="line">            WorkQueue[] ws; <span class="keyword">int</span> n;                    <span class="comment">// skip if no array</span></div><div class="line">            <span class="keyword">if</span> ((ws = workQueues) != <span class="keyword">null</span> &amp;&amp; (n = ws.length) &gt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">int</span> s = indexSeed += SEED_INCREMENT;  <span class="comment">// unlikely to collide</span></div><div class="line">                <span class="keyword">int</span> m = n - <span class="number">1</span>;</div><div class="line">                i = ((s &lt;&lt; <span class="number">1</span>) | <span class="number">1</span>) &amp; m;               <span class="comment">// odd-numbered indices</span></div><div class="line">                <span class="keyword">if</span> (ws[i] != <span class="keyword">null</span>) &#123;                  <span class="comment">// collision</span></div><div class="line">                    <span class="keyword">int</span> probes = <span class="number">0</span>;                   <span class="comment">// step by approx half n</span></div><div class="line">                    <span class="keyword">int</span> step = (n &lt;= <span class="number">4</span>) ? <span class="number">2</span> : ((n &gt;&gt;&gt; <span class="number">1</span>) &amp; EVENMASK) + <span class="number">2</span>;</div><div class="line">                    <span class="keyword">while</span> (ws[i = (i + step) &amp; m] != <span class="keyword">null</span>) &#123;</div><div class="line">                        <span class="keyword">if</span> (++probes &gt;= n) &#123;</div><div class="line">                            workQueues = ws = Arrays.copyOf(ws, n &lt;&lt;= <span class="number">1</span>);</div><div class="line">                            m = n - <span class="number">1</span>;</div><div class="line">                            probes = <span class="number">0</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                w.hint = s;                           <span class="comment">// use as random seed</span></div><div class="line">                w.config = i | mode;</div><div class="line">                w.scanState = i;                      <span class="comment">// publication fence</span></div><div class="line">                ws[i] = w;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            unlockRunState(rs, rs &amp; ~RSLOCK);</div><div class="line">        &#125;</div><div class="line">        wt.setName(workerNamePrefix.concat(Integer.toString(i &gt;&gt;&gt; <span class="number">1</span>)));</div><div class="line">        <span class="keyword">return</span> w;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="ForkJoinPool-invoke"><a href="#ForkJoinPool-invoke" class="headerlink" title="ForkJoinPool.invoke"></a>ForkJoinPool.invoke</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">invoke</span><span class="params">(ForkJoinTask&lt;T&gt; task)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (task == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">        externalPush(task);</div><div class="line">        <span class="keyword">return</span> task.join();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">join</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> s;</div><div class="line">        <span class="keyword">if</span> ((s = doJoin() &amp; DONE_MASK) != NORMAL)</div><div class="line">            reportException(s);</div><div class="line">        <span class="keyword">return</span> getRawResult();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">doJoin</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> s; Thread t; ForkJoinWorkerThread wt; ForkJoinPool.WorkQueue w;</div><div class="line">        <span class="keyword">return</span> (s = status) &lt; <span class="number">0</span> ? s :</div><div class="line">            ((t = Thread.currentThread()) <span class="keyword">instanceof</span> ForkJoinWorkerThread) ?</div><div class="line">            (w = (wt = (ForkJoinWorkerThread)t).workQueue).</div><div class="line">            tryUnpush(<span class="keyword">this</span>) &amp;&amp; (s = doExec()) &lt; <span class="number">0</span> ? s :</div><div class="line">            wt.pool.awaitJoin(w, <span class="keyword">this</span>, <span class="number">0L</span>) :</div><div class="line">            externalAwaitDone();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryUnpush</span><span class="params">(ForkJoinTask&lt;?&gt; t)</span> </span>&#123;</div><div class="line">            ForkJoinTask&lt;?&gt;[] a; <span class="keyword">int</span> s;</div><div class="line">            <span class="keyword">if</span> ((a = array) != <span class="keyword">null</span> &amp;&amp; (s = top) != base &amp;&amp;</div><div class="line">                U.compareAndSwapObject</div><div class="line">                (a, (((a.length - <span class="number">1</span>) &amp; --s) &lt;&lt; ASHIFT) + ABASE, t, <span class="keyword">null</span>)) &#123;</div><div class="line">                U.putOrderedInt(<span class="keyword">this</span>, QTOP, s);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">awaitJoin</span><span class="params">(WorkQueue w, ForkJoinTask&lt;?&gt; task, <span class="keyword">long</span> deadline)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> s = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (task != <span class="keyword">null</span> &amp;&amp; w != <span class="keyword">null</span>) &#123;</div><div class="line">            ForkJoinTask&lt;?&gt; prevJoin = w.currentJoin;</div><div class="line">            U.putOrderedObject(w, QCURRENTJOIN, task);</div><div class="line">            CountedCompleter&lt;?&gt; cc = (task <span class="keyword">instanceof</span> CountedCompleter) ?</div><div class="line">                (CountedCompleter&lt;?&gt;)task : <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                <span class="keyword">if</span> ((s = task.status) &lt; <span class="number">0</span>)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">if</span> (cc != <span class="keyword">null</span>)</div><div class="line">                    helpComplete(w, cc, <span class="number">0</span>);</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (w.base == w.top || w.tryRemoveAndExec(task))</div><div class="line">                    helpStealer(w, task);</div><div class="line">                <span class="keyword">if</span> ((s = task.status) &lt; <span class="number">0</span>)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">long</span> ms, ns;</div><div class="line">                <span class="keyword">if</span> (deadline == <span class="number">0L</span>)</div><div class="line">                    ms = <span class="number">0L</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((ns = deadline - System.nanoTime()) &lt;= <span class="number">0L</span>)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((ms = TimeUnit.NANOSECONDS.toMillis(ns)) &lt;= <span class="number">0L</span>)</div><div class="line">                    ms = <span class="number">1L</span>;</div><div class="line">                <span class="keyword">if</span> (tryCompensate(w)) &#123;</div><div class="line">                    task.internalWait(ms);</div><div class="line">                    U.getAndAddLong(<span class="keyword">this</span>, CTL, AC_UNIT);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            U.putOrderedObject(w, QCURRENTJOIN, prevJoin);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">externalAwaitDone</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> s = ((<span class="keyword">this</span> <span class="keyword">instanceof</span> CountedCompleter) ? <span class="comment">// try helping</span></div><div class="line">                ForkJoinPool.common.externalHelpComplete(</div><div class="line">                    (CountedCompleter&lt;?&gt;)<span class="keyword">this</span>, <span class="number">0</span>) :</div><div class="line">                ForkJoinPool.common.tryExternalUnpush(<span class="keyword">this</span>) ? doExec() : <span class="number">0</span>);</div><div class="line">       <span class="keyword">if</span> (s &gt;= <span class="number">0</span> &amp;&amp; (s = status) &gt;= <span class="number">0</span>) &#123;</div><div class="line">           <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</div><div class="line">           <span class="keyword">do</span> &#123;</div><div class="line">               <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, STATUS, s, s | SIGNAL)) &#123;</div><div class="line">                   <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">                       <span class="keyword">if</span> (status &gt;= <span class="number">0</span>) &#123;</div><div class="line">                           <span class="keyword">try</span> &#123;</div><div class="line">                               wait(<span class="number">0L</span>);</div><div class="line">                           &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</div><div class="line">                               interrupted = <span class="keyword">true</span>;</div><div class="line">                           &#125;</div><div class="line">                       &#125;</div><div class="line">                       <span class="keyword">else</span></div><div class="line">                           notifyAll();</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125; <span class="keyword">while</span> ((s = status) &gt;= <span class="number">0</span>);</div><div class="line">           <span class="keyword">if</span> (interrupted)</div><div class="line">               Thread.currentThread().interrupt();</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> s;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> Java并发编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发编程 </tag>
            
            <tag> AQS </tag>
            
            <tag> fork/join </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java并发编程之9——如何理解Condtion]]></title>
      <url>/2016/06/26/java-concurrent9-condtion-code-analysis/</url>
      <content type="html"><![CDATA[<p>在理解Condition之前首先要明白两个概念：</p>
<ul>
<li>等待队列：等待获取锁的线程构成的队列，称为等待队列</li>
<li>条件队列：已经获取到锁的线程由于某种原因释放了锁，等待signal信号，而构成的队列称为条件队列<a id="more"></a>
</li>
</ul>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Condition和Lock总是分不开的。在前面的文章 <a href="http://guochenglai.com/2016/06/06/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B5%E2%80%94%E2%80%94AQS-AbstractQueuedSynchronizer-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">AQS源码分析</a> 中对这两者的实现原理都有一定的分析。并且对 <a href="http://guochenglai.com/2016/06/19/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B7%E2%80%94%E2%80%94AQS%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0ReentrantLock/">Lock源码</a> 也进行了分析。本文将展开讨论一下Condition的实现原理和具体用途。</p>
<font color="red"><br>说明：<br>- 如下的例子简化了异常的处理过程，因为处理异常的地方如果做的很完善会影响读者理解程序的运行逻辑。如果在正常的开发过程，还是建议完整地处理异常<br>- 程序的整体构建逻辑是：任务1获取到锁，然后调用await方法，释放锁，让任务2去获取锁，当任务2获取锁，并执行完代码调用signal方法的时候，任务1会被唤醒并尝试获取锁。这时候只有当任务2执行完所有的任务并释放锁之后，任务1才可以获取到锁，继续执行。</font>

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.qunar.dzs.datahub.common.conditions;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by guochenglai on 7/1/16.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ConditionTest.class);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">        <span class="keyword">final</span> Condition condition = lock.newCondition();</div><div class="line"></div><div class="line"></div><div class="line">        Runnable task1 = () -&gt; &#123;</div><div class="line">            lock.lock(); <span class="comment">//首先线程1获取到了锁</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" i already get a lock and do something"</span>);</div><div class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>); <span class="comment">//获取到了锁之后，做一些独占的任务</span></div><div class="line"></div><div class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" for some reason i give up this lock "</span>);</div><div class="line">                condition.await(); <span class="comment">//由于某种原因线程放弃了锁</span></div><div class="line"></div><div class="line"></div><div class="line">                <span class="comment">//是否锁之后当前线程会 在这里 陷入休眠</span></div><div class="line"></div><div class="line"></div><div class="line">                <span class="comment">//当接收到signal信号之后，线程会被唤醒，然后重新去获取到锁，如果获取成功 会从这里继续执行</span></div><div class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" i catch a signal to get the lock again "</span>);</div><div class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line"></div><div class="line">                <span class="comment">//执行完成之后记得释放锁</span></div><div class="line">                lock.unlock();</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                lock.unlock(); <span class="comment">//发生异常了就释放锁</span></div><div class="line">                LOGGER.error(<span class="string">"task one cause exception "</span>, e);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        Runnable task2 = () -&gt; &#123;</div><div class="line">            lock.lock();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" task one  give up the lock i catch it "</span>); <span class="comment">//任务1释放了锁之后，这里线程2才可以获取到锁</span></div><div class="line"></div><div class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>); <span class="comment">//任务2 做一些独占的任务</span></div><div class="line"></div><div class="line">                <span class="comment">/**</span></div><div class="line">                 * 任务2 做完任务之后告知等待当前条件的其他线程 可以去获取锁了，</div><div class="line">                 * 这时候任务1 会被唤醒，然后尝试获取锁，</div><div class="line">                 *</div><div class="line">                 * 这里需要注意的是任务1 在这里只是有机会去尝试获取锁，现在的</div><div class="line">                 * 锁还是被任务2 所占用，只有当任务2执行完成之后，释放了锁，任务1</div><div class="line">                 * 才可以真正的去获取锁</div><div class="line">                 */</div><div class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" notify task one to get lock and continue to do his work ..."</span>);</div><div class="line">                condition.signal();</div><div class="line"></div><div class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>); <span class="comment">//任务2 做一些其他的任务</span></div><div class="line"></div><div class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" do some other work and release lock "</span>);</div><div class="line"></div><div class="line">                lock.unlock();</div><div class="line"></div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                lock.unlock();</div><div class="line">                LOGGER.error(<span class="string">"task two cause exception "</span>, e);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread(task1).start(); <span class="comment">//这里让任务1先执行，因为设计的就是它先获取到锁，然后释放锁，最后被唤醒继续获取锁的过程</span></div><div class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">        <span class="keyword">new</span> Thread(task2).start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Thread-<span class="number">0</span> i already get a lock and <span class="keyword">do</span> something</div><div class="line">Thread-<span class="number">0</span> <span class="keyword">for</span> some reason i give up <span class="keyword">this</span> lock </div><div class="line">Thread-<span class="number">1</span> task one  give up the lock i <span class="keyword">catch</span> it </div><div class="line">Thread-<span class="number">1</span> notify task one to get lock and <span class="keyword">continue</span> to <span class="keyword">do</span> his work ...</div><div class="line">Thread-<span class="number">1</span> <span class="keyword">do</span> some other work and release lock </div><div class="line">Thread-<span class="number">0</span> i <span class="keyword">catch</span> a signal to get the lock again</div></pre></td></tr></table></figure></p>
<p>通过输出可以看到整个的处理流程如下：</p>
<ul>
<li>任务1获取到锁，执行独占的任务，同时任务2在等待获取锁</li>
<li>任务1由于某种原因，自己主动释放锁，并将自己陷入休眠</li>
<li>任务2发现锁可以获取了，就会去获取锁，执行自己的独占任务</li>
<li>任务2执行完自己的任务之后调用signal通知，等待队列的任务1去尝试获取锁。并且自己释放自己占有的锁</li>
<li>任务1，发现锁可以获取之后，会去获取锁并继续执行自己的任务。</li>
</ul>
<p>阅读上面的流程读者可能如下的疑问：<br>   1 任务一调用await之后，任务2是怎么知道锁是可以获取了，并去获取锁的。<br>   2 任务二调用signal之后，任务1又是怎么知道锁是可以获取的，并去获取锁的。<br>其实，这两个问题才是Condition的精髓。这其中涉及到条件队列和等待队列的相互转移。下面将结合源码详细分析。</p>
<h2 id="实现分析"><a href="#实现分析" class="headerlink" title="实现分析"></a>实现分析</h2><h3 id="锁的获取和等待队列。"><a href="#锁的获取和等待队列。" class="headerlink" title="锁的获取和等待队列。"></a>锁的获取和等待队列。</h3><p>线程1获取到锁之后，线程2再次尝试获取锁的时候，就会将自己挂起构成等待队列，这个过程在前面的文章已经分析过了。这里将从lock.lock()方法开始，温习一下整个流程。</p>
<h4 id="lock-lock"><a href="#lock-lock" class="headerlink" title="lock.lock()"></a>lock.lock()</h4><p>lock.lock()方法，默认调用的非公平实现的lock方法。首先进行CAS如果成功，就设置锁的拥有者。否则调用AQS的acquire方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</div><div class="line">                setExclusiveOwnerThread(Thread.currentThread());</div><div class="line">            <span class="keyword">else</span></div><div class="line">                acquire(<span class="number">1</span>);</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<h4 id="AQS-acquire"><a href="#AQS-acquire" class="headerlink" title="AQS.acquire"></a>AQS.acquire</h4><p>AQS的acquire方法会再次调用lock.tryAcquire()方法尝试获取到锁，如果获取失败，就调用自己的addWaiter()和acquireQueued()方法，构造等待队列<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</div><div class="line">            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</div><div class="line">            selfInterrupt();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h4 id="lock-tryAcquire"><a href="#lock-tryAcquire" class="headerlink" title="lock.tryAcquire()"></a>lock.tryAcquire()</h4><p>当AQS的同步状态为0的时候，并且没有等待队列，并且CAS更新状态成功，就获取到锁，并设置锁的所有者。返回true<br>当AQS的同步状态不为0的时候，判断是否是重入锁，如果是就将同步状态加1。并返回true<br>其他情况都是获取锁失败，返回false<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">protected final boolean tryAcquire(int acquires) &#123;</div><div class="line">            final Thread current = Thread.currentThread();</div><div class="line">            int c = getState();</div><div class="line">            if (c == 0) &#123;</div><div class="line">                if (!hasQueuedPredecessors() &amp;&amp;</div><div class="line">                    compareAndSetState(0, acquires)) &#123;</div><div class="line">                    setExclusiveOwnerThread(current);</div><div class="line">                    return true;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            else if (current == getExclusiveOwnerThread()) &#123;</div><div class="line">                int nextc = c + acquires;</div><div class="line">                if (nextc &lt; 0)</div><div class="line">                    throw new Error(&quot;Maximum lock count exceeded&quot;);</div><div class="line">                setState(nextc);</div><div class="line">                return true;</div><div class="line">            &#125;</div><div class="line">            return false;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<h4 id="AQS-acquireQueued"><a href="#AQS-acquireQueued" class="headerlink" title="AQS.acquireQueued"></a>AQS.acquireQueued</h4><p>addWaiter方法就是将当前线程构造成node节点并添加到等待队列的末尾，前面已经具体分析过实现，acquireQueued方法接受添加到队列的节点，在进行一次挣扎，如果失败，就将当前线程挂起<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                <span class="keyword">final</span> Node p = node.predecessor();</div><div class="line">                <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</div><div class="line">                    setHead(node);</div><div class="line">                    p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></div><div class="line">                    failed = <span class="keyword">false</span>;</div><div class="line">                    <span class="keyword">return</span> interrupted;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</div><div class="line">                    parkAndCheckInterrupt())</div><div class="line">                    interrupted = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (failed)</div><div class="line">                cancelAcquire(node);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>至此，任务1在继续执行任务，任务2被挂起了，并构造了一个等待队列。</p>
<h3 id="await挂起当前线程锁构成条件队列，激活等待队列等待线程"><a href="#await挂起当前线程锁构成条件队列，激活等待队列等待线程" class="headerlink" title="await挂起当前线程锁构成条件队列，激活等待队列等待线程"></a>await挂起当前线程锁构成条件队列，激活等待队列等待线程</h3><p>当任务1由于某种原因调用await方法释放自己的锁的时候。会将自己休眠加入到条件队列，并激活等待队列的线程。实现过程如下：</p>
<h3 id="AQS-ConditionObject-await"><a href="#AQS-ConditionObject-await" class="headerlink" title="AQS.ConditionObject.await"></a>AQS.ConditionObject.await</h3><p>await方法，首先调用 AQS.ConditionObject. addConditionWaiter()方法构造一个条件队列。然后调用AQS.ConditionObject.fullyRelease()方法去激活等待队列上的等待线程（其实就是调用AQS.release方法），然后将当前线程挂起。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">            <span class="keyword">if</span> (Thread.interrupted())</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</div><div class="line">            Node node = addConditionWaiter();</div><div class="line">            <span class="keyword">int</span> savedState = fullyRelease(node);</div><div class="line">            <span class="keyword">int</span> interruptMode = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span> (!isOnSyncQueue(node)) &#123;</div><div class="line">                LockSupport.park(<span class="keyword">this</span>); <span class="comment">//调用await方法正常情况，当前线程会在这个地方被挂起，激活之后继续从这里执行。</span></div><div class="line">                <span class="keyword">if</span> ((interruptMode = checkInterruptWhileWaiting(node)) != <span class="number">0</span>)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (acquireQueued(node, savedState) &amp;&amp; interruptMode != THROW_IE)</div><div class="line">                interruptMode = REINTERRUPT;</div><div class="line">            <span class="keyword">if</span> (node.nextWaiter != <span class="keyword">null</span>) <span class="comment">// clean up if cancelled</span></div><div class="line">                unlinkCancelledWaiters();</div><div class="line">            <span class="keyword">if</span> (interruptMode != <span class="number">0</span>)</div><div class="line">                reportInterruptAfterWait(interruptMode);</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>AQS.release激活等待队列的线程去获取锁。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">fullyRelease</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">int</span> savedState = getState();</div><div class="line">            <span class="keyword">if</span> (release(savedState)) &#123;</div><div class="line">                failed = <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">return</span> savedState;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (failed)</div><div class="line">                node.waitStatus = Node.CANCELLED;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="signal激活条件队列的线程"><a href="#signal激活条件队列的线程" class="headerlink" title="signal激活条件队列的线程"></a>signal激活条件队列的线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">signal</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (!isHeldExclusively())</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</div><div class="line">            Node first = firstWaiter;</div><div class="line">            <span class="keyword">if</span> (first != <span class="keyword">null</span>)</div><div class="line">                doSignal(first);</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>根据传入的节点，找到第一个未被取消的节点<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSignal</span><span class="params">(Node first)</span> </span>&#123;</div><div class="line">            <span class="keyword">do</span> &#123;</div><div class="line">                <span class="keyword">if</span> ( (firstWaiter = first.nextWaiter) == <span class="keyword">null</span>)</div><div class="line">                    lastWaiter = <span class="keyword">null</span>;</div><div class="line">                first.nextWaiter = <span class="keyword">null</span>;</div><div class="line">            &#125; <span class="keyword">while</span> (!transferForSignal(first) &amp;&amp;</div><div class="line">                     (first = firstWaiter) != <span class="keyword">null</span>);</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>将等待这个condition的节点由条件队列转移到等待队列，然后当当前线程释放锁之后，在等待队列的节点就可以继续去尝试获取到锁了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">transferForSignal</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line">               <span class="keyword">if</span> (!compareAndSetWaitStatus(node, Node.CONDITION, <span class="number">0</span>))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">               Node p = enq(node);</div><div class="line">        <span class="keyword">int</span> ws = p.waitStatus;</div><div class="line">        <span class="keyword">if</span> (ws &gt; <span class="number">0</span> || !compareAndSetWaitStatus(p, ws, Node.SIGNAL))</div><div class="line">            LockSupport.unpark(node.thread);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>整个处理流程，写了好久！！！！</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> Java并发编程 </category>
            
            <category> 源码分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发编程 </tag>
            
            <tag> AQS </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> 条件队列 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java并发编程之8——AQS如何实现Semaphore]]></title>
      <url>/2016/06/22/java-concurrent8-semaphore-code-analysis/</url>
      <content type="html"><![CDATA[<p>Semaphore的实现和ReentrantLock的实现很相似，都有公平和非公平两种实现。本文的分析可以对比 <a href="http://guochenglai.com/2016/06/19/java并发编程之7——AQS如何实现ReentrantLock/">LOCK源码分析</a> 和 <a href="http://guochenglai.com/2016/06/13/java并发编程之6——AQS如何实现CountDownLatch/">CountDownLatch源码分析</a> 对比看。这样可以看出AQS的几条关键执行路径。</p>
<h2 id="非公平信号量的实现"><a href="#非公平信号量的实现" class="headerlink" title="非公平信号量的实现"></a>非公平信号量的实现</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>信号量的默认实现也是采用非公平锁，构造函数如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Semaphore</span><span class="params">(<span class="keyword">int</span> permits)</span> </span>&#123;</div><div class="line">     sync = <span class="keyword">new</span> NonfairSync(permits); <span class="comment">//构造函数指定许可的数量</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NonfairSync(<span class="keyword">int</span> permits) &#123;</div><div class="line">    <span class="keyword">super</span>(permits); <span class="comment">//调用AQS直接设置许可的数量</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="许可的获取"><a href="#许可的获取" class="headerlink" title="许可的获取"></a>许可的获取</h3><p>获取许可直接调用的是AQS的acquire方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        sync.acquireSharedInterruptibly(<span class="number">1</span>); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里的实现过程和Lock完全一样，先由子类判断是否可以获取许可，如果可以获取成功，就将同步状态减一，然后继续执行，如果不能获取到锁，就将当前线程挂起<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquireSharedInterruptibly</span><span class="params">(<span class="keyword">int</span> arg)</span></span></div><div class="line">            <span class="keyword">throws</span> InterruptedException &#123;</div><div class="line">        <span class="keyword">if</span> (Thread.interrupted())</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</div><div class="line">        tryAcquireShared方法都是由具体的子类去实现</div><div class="line">        <span class="keyword">if</span> (tryAcquireShared(arg) &lt; <span class="number">0</span>)</div><div class="line">            如果剩余的信号量小于等于<span class="number">0</span>（表示没有信号量）就以当前线程为为节点构造等待队列</div><div class="line">            doAcquireSharedInterruptibly(arg);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>分析：Sync类如何判断是否可以获取到许可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> nonfairTryAcquireShared(acquires);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">nonfairTryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                <span class="keyword">int</span> available = getState();</div><div class="line">                计算剩余的信号量的个数</div><div class="line">                <span class="keyword">int</span> remaining = available - acquires;</div><div class="line">                </div><div class="line">                返回的是剩余信号量的个数</div><div class="line">                <span class="keyword">if</span> (remaining &lt; <span class="number">0</span> ||</div><div class="line">                    compareAndSetState(available, remaining))</div><div class="line">                    <span class="keyword">return</span> remaining;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>温习: 获取信号量失败的时候，AQS如何构造等待线程列表。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doAcquireSharedInterruptibly</span><span class="params">(<span class="keyword">int</span> arg)</span></span></div><div class="line">        <span class="keyword">throws</span> InterruptedException &#123;</div><div class="line">        <span class="keyword">final</span> Node node = addWaiter(Node.SHARED); <span class="comment">//以当前线程构造节点添加到等待队列</span></div><div class="line">        <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                <span class="keyword">final</span> Node p = node.predecessor();</div><div class="line">                <span class="keyword">if</span> (p == head) &#123; <span class="comment">//判断当前节点的前驱节点是否是头结点，如果是头结点就，再次尝试获取信号量,如果获取成功就返回</span></div><div class="line">                </div><div class="line">                    <span class="keyword">int</span> r = tryAcquireShared(arg);</div><div class="line">                    <span class="keyword">if</span> (r &gt;= <span class="number">0</span>) &#123;</div><div class="line">                        setHeadAndPropagate(node, r);</div><div class="line">                        p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></div><div class="line">                        failed = <span class="keyword">false</span>;</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//如果前驱节点不是头结点，就判断当前线程是否应该挂起，如果应该挂起就将当前线程挂起。</span></div><div class="line">                <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</div><div class="line">                    parkAndCheckInterrupt())</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (failed)</div><div class="line">                cancelAcquire(node);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="许可的释放"><a href="#许可的释放" class="headerlink" title="许可的释放"></a>许可的释放</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> </span>&#123;</div><div class="line">        sync.releaseShared(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>sync类的releaseShared调用的是AQS的方法，他的实现过程是：先由子类去释放信号量，如果是否成功，就激活等待信号量队列的第一个线程。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">releaseShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (tryReleaseShared(arg)) &#123;</div><div class="line">            doReleaseShared();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>子类释放许可的过程：就是简单的CAS将许可的数量加1<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                <span class="keyword">int</span> current = getState();</div><div class="line">                <span class="keyword">int</span> next = current + releases;</div><div class="line">                <span class="keyword">if</span> (next &lt; current) <span class="comment">// overflow</span></div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum permit count exceeded"</span>);</div><div class="line">                <span class="keyword">if</span> (compareAndSetState(current, next))</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>在子类释放许可成功之后，AQS释放等待队列的第一个等待获取信号量的线程<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doReleaseShared</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            Node h = head;</div><div class="line">            <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h != tail) &#123;</div><div class="line">                <span class="keyword">int</span> ws = h.waitStatus;</div><div class="line">                <span class="keyword">if</span> (ws == Node.SIGNAL) &#123;</div><div class="line">                    <span class="keyword">if</span> (!compareAndSetWaitStatus(h, Node.SIGNAL, <span class="number">0</span>))</div><div class="line">                        <span class="keyword">continue</span>;</div><div class="line">                    unparkSuccessor(h);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ws == <span class="number">0</span> &amp;&amp;!compareAndSetWaitStatus(h, <span class="number">0</span>, Node.PROPAGATE))&#123;</div><div class="line">                    <span class="keyword">continue</span>;                </div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (h == head)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h2 id="公平信号量的实现"><a href="#公平信号量的实现" class="headerlink" title="公平信号量的实现"></a>公平信号量的实现</h2><p>公平信号量的实现和非公平的信号量的实现基本一样。可以参考我的上一篇文章： <a href="http://guochenglai.com/2016/06/19/java并发编程之7——AQS如何实现ReentrantLock/">LOCK源码分析</a></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> Java并发编程 </category>
            
            <category> 源码分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发编程 </tag>
            
            <tag> AQS </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> 信号量 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java并发编程之7——AQS如何实现ReentrantLock]]></title>
      <url>/2016/06/19/java-concurrent7-reentrantlock-code-analysis/</url>
      <content type="html"><![CDATA[<p>ReentrantLock是显示锁，Synchronized叫内置锁是JDK1.6中由道格李引入的。他们的关系就像 wait/notify 和 condition。RenentrantLock的实现和CountDownLatch的实现基本相同，唯一的区别是ReentrantLock有两种实现，分别对应公平锁和非公平锁。<br><a id="more"></a></p>
<h2 id="非公平锁实现源码分析"><a href="#非公平锁实现源码分析" class="headerlink" title="非公平锁实现源码分析"></a>非公平锁实现源码分析</h2><p>  ReentrantLock默认提供的是非公平锁的实现，在默认的构造方法中实例化了ReentrantLock的实例，此时AQS的同步状态被赋初始值0，表示现在锁是可以获取的。</p>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">()</span> </span>&#123;</div><div class="line">    sync = <span class="keyword">new</span> NonfairSync();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="非公平锁获取源码分析"><a href="#非公平锁获取源码分析" class="headerlink" title="非公平锁获取源码分析"></a>非公平锁获取源码分析</h3><p>lock方法在Sync类中被定义为抽象方法，具体的实现由公平锁和非公平锁去实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">锁的获取</div><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</div><div class="line">      不管锁是否被获取先CAS尝试获取锁</div><div class="line">      <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</div><div class="line">           如果获取到锁之后，就设置当前线程表示当前线程获取到了锁</div><div class="line">           setExclusiveOwnerThread(Thread.currentThread());</div><div class="line">      <span class="keyword">else</span></div><div class="line">           如果CAS失败表示锁已经被其他的线程获取到了，就构建等待队列，将当前线程添加到队尾</div><div class="line">           acquire(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>acquire的具体实现如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp; <span class="comment">//先CAS尝试获取一次锁</span></div><div class="line">            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))&#123;<span class="comment">//addWaiter就是以当前线程构造节点添加到等待队列，acquireQuqued中会再次尝试获取一次锁，注意获取失败才返回false</span></div><div class="line">            两次获取失败 就将当前线程挂起</div><div class="line">            selfInterrupt();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>NonfairSync的tryAcquire实现如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> nonfairTryAcquire(acquires);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">非公平的方式获取一次锁</div><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</div><div class="line">            获取当前线程</div><div class="line">            <span class="keyword">final</span> Thread current = Thread.currentThread();</div><div class="line">            <span class="keyword">int</span> c = getState();</div><div class="line">            如果状态为<span class="number">0</span>表示锁是可以获取的，此时不管有没有等待队列，直接进行CAS操作尝试获取到锁</div><div class="line">            <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</div><div class="line">                CAS获取到锁，如果获取成功就，返回<span class="keyword">true</span>并设置当前线程获取到锁</div><div class="line">                <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</div><div class="line">                    setExclusiveOwnerThread(current);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123; 如果状态不为<span class="number">0</span>表示锁已经被获取到了，就判断锁是否被当前线程获取到了（可重入锁），如果是当前线程获取到了锁，就将锁计数加一</div><div class="line">                <span class="keyword">int</span> nextc = c + acquires;</div><div class="line">                <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</div><div class="line">                setState(nextc);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>acquireQueued方法是AQS的典型实现，在<a href="http://guochenglai.com/2016/06/06/java并发编程之5——AQS-AbstractQueuedSynchronizer-源码分析/">AQS源码分析</a>文章中已经讲过。作用是将线程添加到等待队列。</p>
<p><font color="red">注意：这里返回true表示，获取当前线程再次尝试获取锁失败。或者可以任务将当前线程添加到等待队列成功。</font><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                <span class="keyword">final</span> Node p = node.predecessor();</div><div class="line">                如果前驱节点是头结点，并且获取锁成功，就将当前节点设置为头节点</div><div class="line">                <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</div><div class="line">                    setHead(node);</div><div class="line">                    p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></div><div class="line">                    failed = <span class="keyword">false</span>;</div><div class="line">                    <span class="keyword">return</span> interrupted;</div><div class="line">                &#125;</div><div class="line">                这里会将Node节点的状态由默认的<span class="number">0</span>更新为-<span class="number">1</span></div><div class="line">                <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</div><div class="line">                    parkAndCheckInterrupt())</div><div class="line">                    interrupted = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (failed)</div><div class="line">                cancelAcquire(node);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="非公平锁释放源码分析"><a href="#非公平锁释放源码分析" class="headerlink" title="非公平锁释放源码分析"></a>非公平锁释放源码分析</h3><p>释放锁调用的是AQS类的release方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</div><div class="line">        sync.release(<span class="number">1</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">        <span class="comment">//首先调用子类的release方法，如果成功，就激活等待锁的其他的节点，然后返回。</span></div><div class="line">        <span class="keyword">if</span> (tryRelease(arg)) &#123;</div><div class="line">            Node h = head;</div><div class="line">            <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</div><div class="line">                unparkSuccessor(h);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>我们来看Lock类是如何实现tryRelease方法的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</div><div class="line">            <span class="comment">//首先将同步状态减一</span></div><div class="line">            <span class="keyword">int</span> c = getState() - releases;</div><div class="line">            <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</div><div class="line">            <span class="keyword">boolean</span> free = <span class="keyword">false</span>;</div><div class="line">            </div><div class="line">            <span class="comment">//如果不是可重入锁，这里状态就会为0，然后返回即可</span></div><div class="line">            <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</div><div class="line">                free = <span class="keyword">true</span>;</div><div class="line">                setExclusiveOwnerThread(<span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">//如果是可重入锁 就CAS将锁的同步状态减一。</span></div><div class="line">            setState(c);</div><div class="line">            <span class="keyword">return</span> free;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<h2 id="公平锁源码分析"><a href="#公平锁源码分析" class="headerlink" title="公平锁源码分析"></a>公平锁源码分析</h2><h3 id="公平锁构造函数"><a href="#公平锁构造函数" class="headerlink" title="公平锁构造函数"></a>公平锁构造函数</h3><p>根据传入的参数，构造公平锁和非公平锁<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</div><div class="line">        sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="公平锁获取源码分析"><a href="#公平锁获取源码分析" class="headerlink" title="公平锁获取源码分析"></a>公平锁获取源码分析</h3><p>公平锁的获取和非公平锁的获取的区别是：</p>
<ul>
<li>非公平锁，不会判断是否有等待队列尝试获取锁，如果失败，会加入到等待队列的末尾</li>
<li>公平锁，会判断是否有等待队列，如果有，就会将自己加入等待队列<br>以下两个步骤和非公平锁一样调用的都是AQS的方法。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</div><div class="line">      acquire(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">获取同步状态</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</div><div class="line">            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</div><div class="line">            selfInterrupt();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>公平锁和非公平锁的唯一区别是tryAcquire方法。方法的具体实现如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</div><div class="line">            <span class="keyword">final</span> Thread current = Thread.currentThread();</div><div class="line">            <span class="keyword">int</span> c = getState();</div><div class="line">            如果没有获取到锁，就判断是否有线程获取到锁，如果有就排队等待，而不是先尝试获取到锁</div><div class="line">            <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</div><div class="line">                    compareAndSetState(<span class="number">0</span>, acquires)) &#123;</div><div class="line">                    setExclusiveOwnerThread(current);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</div><div class="line">                <span class="keyword">int</span> nextc = c + acquires;</div><div class="line">                <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</div><div class="line">                setState(nextc);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<h3 id="公平锁释放源码分析"><a href="#公平锁释放源码分析" class="headerlink" title="公平锁释放源码分析"></a>公平锁释放源码分析</h3><p>  公平锁的释放和非公平锁的释放过程，完全一样。</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> Java并发编程 </category>
            
            <category> 源码分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发编程 </tag>
            
            <tag> AQS </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> Lock </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[软件破解过程详解（以Paw软件为例）]]></title>
      <url>/2016/06/16/paw-crack/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><font color="red"><strong>本文以Mac为例，Linux和Mac基本是一样的。windows系统也有想对应的软件，整体思路也基本是一致的。</strong></font>

<p>在我们使用的收费软件中一般有两种形式：</p>
<ul>
<li>输入注册码</li>
<li>购买VIP</li>
</ul>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学习过程序的人都知道，这些实现的本质都是一些<code>if … else</code>的判断。所以这两种软件的破解思路是一样的。<br><strong>例如输入注册码的程序判断思路：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if [用户已经注册]</div><div class="line">   可以正常使用软件</div><div class="line">ELSE if [试用期不到30天]</div><div class="line">   可以正常使用软件</div><div class="line">ELSE</div><div class="line">   弹框提示不能使用软件</div></pre></td></tr></table></figure></p>
<p><strong>同理购买VIP的软件的程序判断思路如下：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if[是VIP用户]</div><div class="line">    享受VIP的待遇</div><div class="line">ELSE</div><div class="line">    享受普通用户的待遇</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看到上面的执行过程，可以发现如果我们调换 <code>if … else … </code> 的处理过程。其实我们就达到了破解软件的效果。所以我们的破解思路从总体上可以分为以下几步：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1 根据可执行的二进制文件，找到上面的 if ... else ... 的代码的头文件 （这个可以使用class dump工具帮助我们分析）</div><div class="line">2 利用反编译工具找到我们代码处理的机器指令（可以通过 Hopper Disassembler工具实现）</div><div class="line">3 根据我们定位的机器指令，找到指令的二进制地址（可以通过gdb调试工具实现）</div><div class="line">4 修改二进制代码，将相等改为不想等，即eq(74)指令改为nep(75)指令(可以通过Hex Fiend实现)</div><div class="line">5 如果是Mac系统，需要为软件生成签名认证。</div></pre></td></tr></table></figure></p>
<p><strong>完成整个破解过程需要安装以下软件</strong></p>
<ul>
<li>class dump  <font color="red">分析找到我们要修改的类</font></li>
<li>Hopper Disassembler <font color="red">定位机器指令</font></li>
<li>gdb <font color="red">定位机器指令以及二进制地址</font></li>
<li>Hex Fiend <font color="red">修改二进制代码</font></li>
</ul>
<h2 id="破解过程"><a href="#破解过程" class="headerlink" title="破解过程"></a>破解过程</h2><font color="red">列出详细过程以及思路。怎么分析的都不在多说了。主要都是围绕概述的思路进行的。</font>

<h3 id="class-dump-找到类文件"><a href="#class-dump-找到类文件" class="headerlink" title="class dump 找到类文件"></a>class dump 找到类文件</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以通过<code>class dump -f </code>查找包含关键字的方法名称。这些关键字一般在弹出的输入注册码的页面上的单词，配合我们的经验所得。常用的关键字有 <code>license</code> 、<code>register</code>、<code>validate</code>、<code>vip</code>、<code>isVIP</code>。。。<br>我们执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">class-dump -f license /Applications/Paw.app/Contents/MacOS/Paw</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;执行结果如下：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/paw%2Fclass_dump_liscence.png" alt=""><br>分析可以发现 <code>LMWelcomeViewController</code>这个类是控制弹出注册框的类。我们可以继续执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">class-dump -f showWelcome /Applications/Paw.app/Contents/MacOS/Paw</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;结果如下：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/paw%2Fclass_dump_show_welcome.png" alt=""><br>看到这个输出，基本可以确定 <code>LMWelcomeViewController</code> 就是我们要找的类。</p>
<h3 id="Hopper-Disassembler-找到机器指令"><a href="#Hopper-Disassembler-找到机器指令" class="headerlink" title="Hopper Disassembler 找到机器指令"></a>Hopper Disassembler 找到机器指令</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用 <code>Hopper Disassembler</code> 软件打开 <code>/Applications/Paw.app/Contents/MacOS/Paw</code> 二进制执行程序。如果软件无法直接选择，可以建立一个软连到目标文件。<br>在 <code>Hopper Disassembler</code> 软件的左上边的lables下面搜索 “showWelcomeWindow”，可以发现五个类，通过分析，我们要找的方法是： <code>LMWelcomeViewController.showWelcomeWindows</code>。所以打开方法，最后页面显示如下：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/paw%2Fhopper_disassemble_show_welcome.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过上面的图片可以看到<code>LMWelcomeViewController.showWelcomeWindows</code>的两条指令<code>je</code>、<code>ret</code>。je执行表示判断两条指令是否相等，ret指令表示返回执行。所以可以猜想这段代码的逻辑是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if (XXX).equals(XXX)</div><div class="line">    弹框</div><div class="line">else return；</div></pre></td></tr></table></figure></p>
<p>可以通过<code>Hopper Disassembler</code>生成伪代码看看：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/paw%2Fhopper_disassemble_code.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;想法基本正确。至此，我们已经找到了要修改的指令代码的位置。接下来的问题就是计算出指令代码的二进制地址，然后替换二进制地址。</p>
<h3 id="gdb-计算eq指令的二进制地址"><a href="#gdb-计算eq指令的二进制地址" class="headerlink" title="gdb 计算eq指令的二进制地址"></a>gdb 计算eq指令的二进制地址</h3><p>通过上图可以看到 eq 指令的虚拟内存地址是 <code>0x000000010011a7fe</code>现在我们要做的就是利用gdb调试工具根据eq指令的虚拟内存地址，逆向第从内存中找到eq指令的二进制码。首先在命令行执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gdb /Applications/Paw.app/Contents/MacOS/Paw</div></pre></td></tr></table></figure></p>
<p>然后执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">x/x 0x000000010011a7fe</div></pre></td></tr></table></figure></p>
<p>得到结果如下：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/paw%2Fgdb_first_byte.png" alt=""><br>从结果可以看到<code>0x55c30174</code>就是二进制指令的十六进制表示。<br>注意：<br>Mac使用的Intel处理器，是以小端序存储的，而硬盘上的二进制码是以大端序存储的。所以，这里需要把 “0x55c30174” 改为对应的大端序 “0x7401c355” 然后在二进制文件中搜索。<br>用<code>Hex Fiend</code>打开<code>/Applications/Paw.app/Contents/MacOS/Paw </code>文件，然后按下<command+f>搜索。如下：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/paw%2Fhex_fiend_search_byte_one.png" alt=""><br>可以发现这个指令出现了很多次，不能直接替换，这也很好理解，代码中判断相等的地方毕竟很多。那么我们可以在对查询一个字节，这样两个字节的重复率应该很低了。所以我们找到eq指令的后继指令ret，继续计算他的二进制地址如下：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/paw%2Fgdb_second_byte.png" alt=""><br>得到 <code>0x894855c3</code> 将其转换为大端序为：<font color="red">0xc3554889</font>可以看到eq指令的后四位和ret指令的前四位完全相同。原因是不同指令的二进制长度不同，而gdb的 x/x 命令读取的指令的长度总是相同。所以这里出现了重叠。最后可以确定我们要找到的指令是<code>0x7401c3554889</code><br>然后我们再次打开Hex Fiend 查询 “7401c3554889”发现这次结果只有一个（如果有多个，就在查询一个指令以此类推）。<br>然后我们执行替换工作：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/paw%2Fhex_fiend_replace.png" alt=""><br>其实我们只是将74(eq)命令改成了75(nep)命令,也就是调换了处理逻辑。如概述所说。</command+f></p>
<h2 id="codesign生成签名"><a href="#codesign生成签名" class="headerlink" title="codesign生成签名"></a>codesign生成签名</h2><p>上面过程已经完成了整个破解过程，还是很简单的。但是现在打开软件还是不能使用，会报错。原因是Mac系统对软件进行了MD5校验，如果发现软件二进制被修改了，就会报错退出，这是一种自我的安全保护。但是如果软件是被认证的，则可以执行所以我们需要为软件生成Mac系统的签名。过程如下：<br>1 打开Mac的KeyChainAccess软件，新建一个认证证书<br><img src="http://7xutce.com1.z0.glb.clouddn.com/paw%2Fkeychain_access_open.png" alt=""><br>2 取一个名字认证类型选择”code sign” 勾选下面的复选框<br><img src="http://7xutce.com1.z0.glb.clouddn.com/paw%2Fkeychain_access_new.png" alt=""><br>3 验证信息中编码是一串数字，要求不能和其他证书的编码重复即可。以及证书的有效期天数<br><img src="http://7xutce.com1.z0.glb.clouddn.com/paw%2Fkeychain_access_new2.png" alt=""><br>4 有一个地方要选择“login”忘记截图了。注意一下是个下拉框<br>5 剩下的所有信息都走默认，直到完成<br>6 完成之后如下。注意类型是login，上面没有截图，如果不是删除重来一遍<br><img src="http://7xutce.com1.z0.glb.clouddn.com/paw%2Fkeychain_access_success.png" alt=""><br>7 选择刚刚创建的证书，右击点击”get info “<br><img src="http://7xutce.com1.z0.glb.clouddn.com/paw%2Fkeychain_access_get_info.png" alt=""><br>8 选择 “trust” —&gt; “always trust”<br><img src="http://7xutce.com1.z0.glb.clouddn.com/paw%2Fkey_chain_access_trust.png" alt=""></p>
<h2 id="为软件签名"><a href="#为软件签名" class="headerlink" title="为软件签名"></a>为软件签名</h2><p>打开命令行执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo codesign -f -s gcl_paw_keychain_access /Applications/Paw.app/Contents/MacOS/Paw</div></pre></td></tr></table></figure></p>
<p>提示如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/Applications/Paw.app/Contents/MacOS/Paw: replacing existing signature</div></pre></td></tr></table></figure></p>
<p>现在软件就可以随便使用啦啦啦啦啦啦啦啦啦啦！！！！</p>
<font color="red"><strong>再次重申:仅供学习交流，请支持正版</strong></font>




]]></content>
      
        <categories>
            
            <category> Mac常用技巧 </category>
            
            <category> 软件破解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac常用技巧 </tag>
            
            <tag> 软件破解 </tag>
            
            <tag> Paw破解 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java并发编程之6——AQS如何实现CountDownLatch]]></title>
      <url>/2016/06/13/java-concurrent6-countdownlatch-code-analysis/</url>
      <content type="html"><![CDATA[<p>前面写过一篇文章<a href="http://guochenglai.com/2016/06/06/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B5%E2%80%94%E2%80%94AQS-AbstractQueuedSynchronizer-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">AQS源码分析</a>的时候介绍过AQS是java并发编程的基础，Java并发包下面提供的同步工具类基本上都是以AQS构建的，一个同步类的实现主要分为三步…</p>
<h2 id="CountDownLatch实现分析"><a href="#CountDownLatch实现分析" class="headerlink" title="CountDownLatch实现分析"></a>CountDownLatch实现分析</h2><h3 id="定义同步工具类的步骤"><a href="#定义同步工具类的步骤" class="headerlink" title="定义同步工具类的步骤"></a>定义同步工具类的步骤</h3><p>前面写过一篇文章<a href="http://guochenglai.com/2016/06/06/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B5%E2%80%94%E2%80%94AQS-AbstractQueuedSynchronizer-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">AQS源码分析</a>的时候介绍过AQS是java并发编程的基础，Java并发包下面提供的同步工具类基本上都是以AQS构建的，一个同步类的实现主要分为三步：</p>
<ul>
<li>该同步工具类 ，定义内部类实现AQS</li>
<li>定义该内部类的构造方法设置同步状态</li>
<li>实现tryAcquire/tryRelease方法</li>
</ul>
<h3 id="CountDownLatch的实现分析"><a href="#CountDownLatch的实现分析" class="headerlink" title="CountDownLatch的实现分析"></a>CountDownLatch的实现分析</h3><p>在CountDownLatch的实现分析中主要分析三个方法：</p>
<h4 id="public-CountDownLatch-int-count"><a href="#public-CountDownLatch-int-count" class="headerlink" title="public CountDownLatch(int count)"></a>public CountDownLatch(int count)</h4><p>这个方法是CountDownLatch的构造方法，它会指定同步器的状态<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">CountDownLatch</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (count &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"count &lt; 0"</span>);</div><div class="line">        <span class="keyword">this</span>.sync = <span class="keyword">new</span> Sync(count);</div><div class="line">    &#125;</div><div class="line">CountDownLatch的构造方法，在内部实例化了一个继承自AQS的子类。</div></pre></td></tr></table></figure></p>
<p>Sync类的构造函数如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Sync(<span class="keyword">int</span> count) &#123;</div><div class="line">    setState(count);</div><div class="line">&#125;</div><div class="line"> Sync类的构造函数调用了AQS的setState设置同步器的状态</div></pre></td></tr></table></figure></p>
<h4 id="public-void-countDown"><a href="#public-void-countDown" class="headerlink" title="public void countDown()"></a>public void countDown()</h4><p>修改同步状态，使同步器的状态减一。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countDown</span><span class="params">()</span> </span>&#123;</div><div class="line">     sync.releaseShared(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>countDown方法调用了内部Sync类的releaseShared方法释放共享锁，releaseShare方法作用是，让当前线程释放他持有的共享锁。实现如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">releaseShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">          tryReleaseShared方法在AQS中强制子类去实现，这里的子类在一个循环中进行CAS操作更新同步状态（对同步状态减一），返回<span class="keyword">true</span>更改同步状态之后，同步状态为<span class="number">0</span>，等待共享锁的线程可以释放</div><div class="line">        <span class="keyword">false</span>表示更改同步状态之后，同步状态大于<span class="number">0</span>，这时候获取共享锁的线程必须等待</div><div class="line">        <span class="keyword">if</span> (tryReleaseShared(arg)) &#123;</div><div class="line">            当同步状态由CAS操作递减到<span class="number">0</span>的时候，就释放头节点的后继节点对应的线程</div><div class="line">            doReleaseShared();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>CountDownLatch中内部类Sync实现的tryReleaseShare方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                <span class="keyword">int</span> c = getState();</div><div class="line">                <span class="keyword">if</span> (c == <span class="number">0</span>)</div><div class="line">                    同步状态已经为<span class="number">0</span>，直接返回<span class="keyword">false</span>不用更新，这种状态一般是不合法的</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">int</span> nextc = c-<span class="number">1</span>;</div><div class="line">                CAS将同步状态减一，如果减之后同步状态为<span class="number">0</span>返回<span class="keyword">true</span>否则返回<span class="keyword">false</span>。其中<span class="keyword">true</span>表示更改同步状态后的同步状态为<span class="number">0</span>，这是可以释放等待共享锁的线程。</div><div class="line">                <span class="keyword">false</span>表示更改同步状态之后的同步状态大于<span class="number">0</span>，这是获取共享锁的线程必须等待</div><div class="line">                <span class="keyword">if</span> (compareAndSetState(c, nextc))</div><div class="line">                    <span class="keyword">return</span> nextc == <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>doReleaseShare是由AQS实现的，详情请参见<a href="http://guochenglai.com/2016/06/06/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B5%E2%80%94%E2%80%94AQS-AbstractQueuedSynchronizer-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">AQS源码分析</a>这里只列出主要逻辑。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">释放等待共享锁的线程</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doReleaseShared</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            获取头结点</div><div class="line">            Node h = head;</div><div class="line">            <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h != tail) &#123;</div><div class="line">                获取头结点的状态</div><div class="line">                <span class="keyword">int</span> ws = h.waitStatus;</div><div class="line">                <span class="keyword">if</span> (ws == Node.SIGNAL) &#123;</div><div class="line">                    如果CAS更新头结点的状态成功就unparkSuccessor，如果失败就继续循环</div><div class="line">                    <span class="keyword">if</span> (!compareAndSetWaitStatus(h, Node.SIGNAL, <span class="number">0</span>))&#123;</div><div class="line">                        <span class="keyword">continue</span>;</div><div class="line">                    &#125;</div><div class="line">                    激活头结点的后继节点</div><div class="line">                    unparkSuccessor(h);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ws == <span class="number">0</span> &amp;&amp; !compareAndSetWaitStatus(h, <span class="number">0</span>, Node.PROPAGATE))&#123; 如果头结点的状态为<span class="number">0</span>并且CAS将状态更改为-<span class="number">3</span>成功就退出循环，否则继续循环</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (h == head)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>unparkSuccessor的实现如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">激活Node节点的后继节点对应的线程</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unparkSuccessor</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ws = node.waitStatus;</div><div class="line">        <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)&#123;</div><div class="line">            compareAndSetWaitStatus(node, ws, <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        找到Node节点的一个有效的后继节点</div><div class="line">        Node s = node.next;</div><div class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</div><div class="line">            s = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">for</span> (Node t = tail; t != <span class="keyword">null</span> &amp;&amp; t != node; t = t.prev)</div><div class="line">                <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</div><div class="line">                    s = t;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (s != <span class="keyword">null</span>)</div><div class="line">            LockSupport.unpark(s.thread);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h4 id="public-void-await"><a href="#public-void-await" class="headerlink" title="public void await()"></a>public void await()</h4><p>作用是让当前线程等待。当同步计数器减为0的时候，当前线程被唤醒，继续执行。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        以可响应中断的方式获取共享锁</div><div class="line">        sync.acquireSharedInterruptibly(<span class="number">1</span>);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>CountDownLatch的await方法调用的是Sync内部类的acquireShareInterruptibly方法，这里面是直接调用的父类AQS的方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">可响应中断地获取同步状态 </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquireSharedInterruptibly</span><span class="params">(<span class="keyword">int</span> arg)</span></span></div><div class="line">            <span class="keyword">throws</span> InterruptedException &#123;</div><div class="line">        <span class="keyword">if</span> (Thread.interrupted())</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</div><div class="line">        尝试获取共享锁如果锁计数器为<span class="number">0</span>表示锁是可获取的，那么直接返回，如果锁计数器不为<span class="number">0</span>表示锁是不可获取的，就以当前线程为节点构造等待队列</div><div class="line">        <span class="keyword">if</span> (tryAcquireShared(arg) &lt; <span class="number">0</span>)&#123;</div><div class="line">            doAcquireSharedInterruptibly(arg);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>Sync类实现的tryAcquireShared方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">尝试获取共享锁如果同步状态（锁计数器为<span class="number">0</span>）表示锁是可以获取的返回<span class="number">1</span>，否则返回-<span class="number">1</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> (getState() == <span class="number">0</span>) ? <span class="number">1</span> : -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>AQS的doAcquireShareInterruptibly。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">以当前线程构造一个等待的Node队列，在Node节点构造完成之后会再次尝试获取一次共享锁  在构造完成之后会再次尝试获取一次锁，</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doAcquireSharedInterruptibly</span><span class="params">(<span class="keyword">int</span> arg)</span></span></div><div class="line">        <span class="keyword">throws</span> InterruptedException &#123;</div><div class="line">        以当前线程构造等待的Node队列</div><div class="line">        <span class="keyword">final</span> Node node = addWaiter(Node.SHARED);</div><div class="line">        <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            注意 这里是在一个循环中执行的，第一次执行shouldParkAfterFailedAcquire会失败，因为此时Node的状态是<span class="number">0</span>，但是会进行CAS操作将状态更新为-<span class="number">1</span>，所以第二次循环判断的时候就可以</div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                <span class="keyword">final</span> Node p = node.predecessor();</div><div class="line">                <span class="keyword">if</span> (p == head) &#123;</div><div class="line">                    <span class="keyword">int</span> r = tryAcquireShared(arg); 当同步状态为<span class="number">0</span>的时候，表示锁是可以获取的此时返回<span class="number">1</span></div><div class="line">                    <span class="keyword">if</span> (r &gt;= <span class="number">0</span>) &#123;<span class="comment">//如果锁是可以获取的，就将Node节点设置为头结点</span></div><div class="line">                        setHeadAndPropagate(node, r);</div><div class="line">                        p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></div><div class="line">                        failed = <span class="keyword">false</span>;</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                判断当前线程是否应该挂起</div><div class="line">                <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</div><div class="line">                    parkAndCheckInterrupt())</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (failed)</div><div class="line">                cancelAcquire(node);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>将当前线程添加到等待队列<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</div><div class="line">        Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</div><div class="line">        Node pred = tail;</div><div class="line">        <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</div><div class="line">            node.prev = pred;</div><div class="line">            <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</div><div class="line">                pred.next = node;</div><div class="line">                <span class="keyword">return</span> node;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        当队列为空的时候，</div><div class="line">        enq(node);</div><div class="line">        <span class="keyword">return</span> node;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>判断当前线程是否应该挂起<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">shouldParkAfterFailedAcquire</span><span class="params">(Node pred, Node node)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ws = pred.waitStatus;</div><div class="line">        <span class="keyword">if</span> (ws == Node.SIGNAL)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span> (ws &gt; <span class="number">0</span>) &#123;</div><div class="line">            前驱节点对应的线程对应的线程被取消，继续往前找到</div><div class="line">            <span class="keyword">do</span> &#123;</div><div class="line">                node.prev = pred = pred.prev;</div><div class="line">            &#125; <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>);</div><div class="line">            pred.next = node;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            CAS更新状态</div><div class="line">            compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> Java并发编程 </category>
            
            <category> 源码分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发编程 </tag>
            
            <tag> AQS </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> CowntDownLatch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Beyond-Compare-无限试用]]></title>
      <url>/2016/06/12/beyond-compare-unlimited-trial/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面一篇文章介绍了 <code>Beyond Comapre</code> 和其他工具的结合试用教程: <a href="http://guochenglai.com/2016/06/08/Mac-%E4%BD%BF%E7%94%A8Beyond-Compare%E7%9A%84%E5%87%A0%E7%A7%8DDiff%E6%96%B9%E5%BC%8F/">使用Beyond Compare的几种Diff方式</a> <code>Beyond Comapre</code> 虽然比较好用，但是几个也比较贵。本文将介绍两种方法，在保证所有功能正常试用的情况下，实现无限期试用。<font color="red">注：本教程只提供学习交流使用，否则请支持官方正版。</font>（本文教程对应的最新的 <code>Beyond Compare</code> 的版本是：4.1.6）<br><a id="more"></a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;破解的原理是 ：<code>Beyond Compare</code> 有30天的试用期，在你使用未注册的软件的时候会首先检查你的本地有没有 <code>registry.dat</code> 文件，如果没有，就会新建一个文件，并将你的使用开始日期以加密的形式存储在这个文件中。如果有这个文件，就会取出其中的日期，然后进行累加，当累加到30天的时候，你的软件就打不开了。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;阅读上面的原理可以发现 registry.dat文件是破解的核心。并且生成算法有缺陷，如果我每次删除这个文件，那么注册信息就会被清除。所以永远也不会达到30天的期限。所以有如下两种方法可以实现无限期试用。</p>
<h2 id="手工方式"><a href="#手工方式" class="headerlink" title="手工方式"></a>手工方式</h2><p>Beyond Compare的试用信息存储的文件的路径为：<br><code>/Users/$(whoami)/Library/Application Support/Beyond Compare/registry.dat</code><br><code>$(whoami)</code>  是一个shell中的命令，表示的是当前用户，如果你不明白可以不用管。</p>
<p><font color="red">所以对应的方法是，在30天之内打开命令行终端输入以下命令：</font><br><code>rm /Users/$(whoami)/Library/Application Support/Beyond Compare/registry.dat<br></code></p>
<h2 id="自动修改启动程序"><a href="#自动修改启动程序" class="headerlink" title="自动修改启动程序"></a>自动修改启动程序</h2><p>Beyond Compare的启动文件的路径为：<br><code>/Applications/Beyond Compare.app/Contents/MacOS/BCompare</code><br>所以我们可以做如下修改：<br>1 进入软件的安装目录：<br><code>cd /Applications/Beyond\ Compare.app/Contents/MacOS/</code><br>2 将启动程序重命名：<br><code>mv BCompare BCompare.exec </code><br>3 新建一个BCompare文件，文件的内容如下：<br><code>#!/bin/bash<br>rm  “/Users/$(whoami)/Library/Application Support/Beyond Compare/registry.dat”<br>/Applications/Beyond\ Compare.app/Contents/MacOS/BCompare.exec &amp;<br></code><br>解释如下：<br>   3.1 在软件启动之前删除使用信息<br>   3.2 调用真正的启动软件程序，启动我们的软件<br>4 给新建的文件授权：<br><code>chmod 7555 BCompare </code>如果提示没有权限则执行<code>sudo chmod 755 BCompare </code><br>5 破解成功，以后就可以无限试用了。</p>
<p><strong><font color="red">再次重申：本教程只使用学习交流，如果不是请支持正版</font></strong></p>
]]></content>
      
        <categories>
            
            <category> Mac常用技巧 </category>
            
            <category> 软件破解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac常用技巧 </tag>
            
            <tag> 软件破解 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac 使用Beyond Compare的几种Diff方式]]></title>
      <url>/2016/06/08/mac-beyond-compare-diff-methods/</url>
      <content type="html"><![CDATA[<p>作为一个Coder不管是QA还是RD在很多时候都需要使用diff工具。目前来说业界做的最好的工具也就是 <code>Beyond Compare</code> 了，并且支持Windows和Mac,本文将介绍Mac系统下 <code>Beyond Compare</code> 和 <font color="red"><code>Intellij idea</code> <code>PyCharm</code> <code>SourceTree</code> <code>Git客户端</code></font> 等工具结合，diff代码的方法。<br><a id="more"></a></p>
<h1 id="Beyond-Compare的安装配置"><a href="#Beyond-Compare的安装配置" class="headerlink" title="Beyond Compare的安装配置"></a>Beyond Compare的安装配置</h1><p><strong>1 下载安装</strong><br>Beyond Compare 的官方下载地址为：<a href="http://www.scootersoftware.com/download.php" target="_blank" rel="external">http://www.scootersoftware.com/download.php</a><br>下载下来的是dmg文件，然后双击安装一路next到底。<br><strong>2 快捷配置</strong><br>安装完成之后可以在Docker工具栏双击打开，但是很多使用Mac的同学，都喜欢使用命令行，所以可以建立一个命令行打开的快捷方式。方法如下：<br>打开Terminal终端输入如下的命令：  </p>
<pre><code class="shell">ln -s /Applications/Beyond\ Compare.app/Contents/MacOS/bcomp /usr/local/bin/
</code></pre>
<p>以后打开 <code>Beyond Compare</code> 就可以直接在命令行输入: <code>bcomp</code> 打开了。</p>
<h1 id="Beyond-Compare和其他工具的结合"><a href="#Beyond-Compare和其他工具的结合" class="headerlink" title="Beyond Compare和其他工具的结合"></a>Beyond Compare和其他工具的结合</h1><h2 id="Beyond-Compare和Intellij的结合"><a href="#Beyond-Compare和Intellij的结合" class="headerlink" title="Beyond Compare和Intellij的结合"></a>Beyond Compare和Intellij的结合</h2><p><strong>1 打开Intelij Idea的设置找到如下的配置界面：</strong><br><img src="http://7xutce.com1.z0.glb.clouddn.com/mac%2Fbeyond%2Fbeyond_compare_intellij_idea1.png" alt=""><br><strong>2 填入内容如下：</strong></p>
<ul>
<li>勾选所有的复选框。</li>
<li>Path to executable 填入内容如下： <code>/usr/local/bin/bcomp</code>。</li>
<li>Parameters会默认填上参数，如果没有填上，请按照图中所示填充。</li>
</ul>
<p><strong>3 使用步骤</strong><br>3.1 点击左下角的代码的分支，会出现分支的列表，然后选择你要比较的分支，会出现Compare选项，如下图所示：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/mac%2Fbeyond%2Fbeyond_compare_intellij_idea3.png" alt=""><br>3.2 点击 Compare 选项会出现如下图所示的对话框,选择“diff”选项<br><img src="http://7xutce.com1.z0.glb.clouddn.com/mac%2Fbeyond%2Fbeyond_compare_intellij_idea4.png" alt=""><br>3.3 点击任意一个文件，最后都会调用Beyond Compare来进行diff效果如下：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/mac%2Fbeyond%2Fbeyond_compare_intellij_idea5.png" alt=""></p>
<h2 id="Beyond-Compare和PyCharm的结合"><a href="#Beyond-Compare和PyCharm的结合" class="headerlink" title="Beyond Compare和PyCharm的结合"></a>Beyond Compare和PyCharm的结合</h2><p><code>PyCharm</code> 和 <code>Intellij Idea</code> 都是 <code>JetBrains</code> 公司出品的优秀软件，两者的风格完全一样。所以配置  <code>Beyond Diff</code> 的过程完全一样。</p>
<h2 id="Beyond-Compare和Source-Tree的结合"><a href="#Beyond-Compare和Source-Tree的结合" class="headerlink" title="Beyond Compare和Source Tree的结合"></a>Beyond Compare和Source Tree的结合</h2>]]></content>
      
        <categories>
            
            <category> Mac常用技巧 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac常用技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[screen管理远程会话不被kill]]></title>
      <url>/2016/06/07/screen-no-kill-conversation/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在我们用shell终端，执行一个命令的时候，我们所执行的任务都是这个shell终端的子进程。如果因为用户注销或者断网，shell终端会收到系统发来的HUP信号，当shell终端收到HUP信号之后，会关闭shell终端的子进程以及，shell终端本身性能。所以解决大任务不被kill的方法有两种：1 让shell进行忽略HUP信号 2让进程不属于shell终端子进程。下面将介绍着几种方法。</p>
<h2 id="nohub"><a href="#nohub" class="headerlink" title="nohub"></a>nohub</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nohub的用途是让提交的命令忽略HUP信号，使用的时候只需要在我们的shell命令前面加入<font color="red">nohup</font>命令即可如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup brew install mysql &amp;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shell终端回显如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">appending output to nohup.out</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;说明：这是一个安装MySQL的长任务，我们在shell命令前面加：nohub命令。然后执行任务的进程不再接受hup信号，即使shell终端被关闭，这个任务也可以继续执行。日志文件会输出到当前目录的nohup.out文件。</p>
<h2 id="线程后台运行"><a href="#线程后台运行" class="headerlink" title="线程后台运行"></a>线程后台运行</h2><p><strong>常见的理解误区:</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;打开一个base终端，查看终端的信息如下：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/screen%2Fdemo_bash_01.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;执行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ping www.baidu.com &amp;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查看我们任务的进程<br><img src="http://7xutce.com1.z0.glb.clouddn.com/screen%2Fdemo_bash_02.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以发现，ping命令进程的父进程ID是：78831，正好是我们打开的bash进程的ID，可见。我们的任务的进程还是bash进程的子进程，如果bash进程被kill，那么我们的进程还是会被杀掉。<br><strong>解决方案：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(ping www.baidu.com &amp;)</div></pre></td></tr></table></figure></p>
<p>然后我们在查看进程的信息如下：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/screen%2Fdemo_bash_03.png" alt=""><br>发现我们任务的进程的父进程ID不再是bash进程，而是init进程。</p>
<h2 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;screen执行命令的好处：<br>1 可以执行任意复杂的命令，还包括自己变成的函数，bohub不行。<br>2 工作环境和shell完全一样。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在使用screen的时候，可以类比vim，他们的各个方面都很类似。特别是刚使用screen的时候，有时候你甚至不知道自己是在shell环境中，还是在screen环境中。<br>常用screen技巧：<br>1 进入screen<br> 在shell终端输入如下的命令进入screen。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">screen</div></pre></td></tr></table></figure></p>
<p>2 切换到screen命令窗口，类似vim的命令窗口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctrl + a</div></pre></td></tr></table></figure></p>
<p><strong>scrren常见的命令如下：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">?	显示所有键绑定信息</div><div class="line">w	显示所有窗口列表</div><div class="line">C-a	切换到之前显示的窗口</div><div class="line">c	创建一个新的运行shell的窗口并切换到该窗口</div><div class="line">n	切换到下一个窗口</div><div class="line">p	切换到前一个窗口(与C-a n相对)</div><div class="line">0..9	切换到窗口0..9</div><div class="line">a	发送 C-a到当前窗口</div><div class="line">d	暂时断开screen会话</div><div class="line">k	杀掉当前窗口</div><div class="line">[	进入拷贝/回滚模式</div></pre></td></tr></table></figure></p>
<p>使用pstree查看进程的进程树<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pstree -H 9867</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Linux常用技巧 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux常用技巧 </tag>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java并发编程之5——AQS-AbstractQueuedSynchronizer-源码分析]]></title>
      <url>/2016/06/06/java-concurrent5-aqs-code-analysis/</url>
      <content type="html"><![CDATA[<h1 id="什么是AQS"><a href="#什么是AQS" class="headerlink" title="什么是AQS"></a>什么是AQS</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AbstractQueudSynchronizer（AQS）是道格李java并发编程的基础，内部主要包括Node和ConditionObject两个内部类，基于Node节点构建了一个FIFO队列，用来存储等待锁的线程的队列。基于ConditionObject节点也构造了一个FIFO队列，用于存储因为某种原因已经获取到锁而又主动释放锁的线程的队列。在concurrent包下面的大部分的工具类都是以他为基础，包括CountDownLatch,Lock,ReadWriteLock,Semaphare,条件队列….等等。</p>
<h1 id="如何利用AQS编写自己的同步工具类"><a href="#如何利用AQS编写自己的同步工具类" class="headerlink" title="如何利用AQS编写自己的同步工具类"></a>如何利用AQS编写自己的同步工具类</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所有基于AQS实现的同步工具类的实现方法都可以划归为以下三步：</p>
<ul>
<li>子类定义一个名称为Sync的静态内部类，该类继承子AQS</li>
<li>Sync类实现tryAcquire/tryRelease(独占式) tryAcquireShared/tryReleaseShare(共享式) 来管理状态，所有对状态的管理都是通过AQS的getState/setState/compareAndSetState/三个方法来管理的</li>
<li>构造函数实例化Sync类在实例化Sync类的同时，指定同步类的同步状态的值<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public  int getState() 返回同步器的状态</div><div class="line"></div><div class="line">public void setState(int arg) 设置同步状态</div><div class="line"></div><div class="line">public  boolean compareAndSetState(int expect,int target) 原子的方式更新状态，如果现在的状态是expect就更新的target</div></pre></td></tr></table></figure>
</li>
</ul>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AQS可以被定义为共享模式和排他模式，当他被定义为排他模式的时候，他会阻止其他线程获取同步器的状态，当他被定义为共享模式的时候其他线程就可以获取同步器的同步状态。</p>
<h1 id="AQS原理概述"><a href="#AQS原理概述" class="headerlink" title="AQS原理概述"></a>AQS原理概述</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AQS是一个运用模板方法设计模式的典型示例。AQS是Java并发框架的基础抽象类，他提供了：如何让线程入队，如何让线程出队，线程如何从等待队列转移到条件队列，以及线程如何从条件队列转移到等待队列等，模板方法。而每一个AQS的子类，所要做的事情是：如何决定线程的出队入队。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例如：Lock是基于AQS实现的同步工具类。引用场景是当前线程如果获取到了锁就执行锁保护的代码，当前线程没有获取到锁，就将当前线程加入到等待队列，直到有线程执行完锁的代码之后主动释放锁，当前线程才能继续尝试获取到锁。<br>他们的实现方式如下：</p>
<ul>
<li>Lock类有一个同步状态用来标识当前线程是否可以获取到锁。</li>
<li>如果当前线程没有获取到锁，就调用AQS的方法，让当前线程进入到等待队列。</li>
<li>其他线程执行完成之后，调用AQS的方法告知等待锁的线程队列，可以获取锁了。</li>
<li>AQS决定让哪一个线程去获取锁，并将其移除等待队列。<br><font color="red"><strong><em>所以一句话：AQS实现线程的入队，子类决定线程的入队。</em></strong></font><h1 id="AQS源码分析"><a href="#AQS源码分析" class="headerlink" title="AQS源码分析"></a>AQS源码分析</h1>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在查看AQS的源代码的时候请时刻记住：AQS的主要功能就是围绕等待线程的出队入队。<br><font color="red"><strong>注意本文对源代码按照功能进行了一定的重排序，试图提取出代码的逻辑主线，和整体流程。所以代码的顺序和源代码的顺序有一定的前后顺序调整</strong></font><h2 id="Node节点的定义"><a href="#Node节点的定义" class="headerlink" title="Node节点的定义"></a>Node节点的定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</div><div class="line">     <span class="comment">//标识当前节点是共享模式</span></div><div class="line">     <span class="keyword">static</span> <span class="keyword">final</span> Node SHARED = <span class="keyword">new</span> Node();</div><div class="line">     <span class="comment">//标识当前节点是排他模式</span></div><div class="line">     <span class="keyword">static</span> <span class="keyword">final</span> Node EXCLUSIVE = <span class="keyword">null</span>;</div><div class="line">     </div><div class="line">     <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED =  <span class="number">1</span>;</div><div class="line">     <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIGNAL    = -<span class="number">1</span>;</div><div class="line">     <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONDITION = -<span class="number">2</span>;</div><div class="line">     <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PROPAGATE = -<span class="number">3</span>;</div><div class="line">     </div><div class="line">     <span class="comment">/*</span></div><div class="line">     * 标识线程的等待状态 取值有以上四种  </div><div class="line">     * 1 表示等待线程节点已取消 </div><div class="line">     * -1 表示当前线程节点需要被激活</div><div class="line">     * -2 表示当前线程节点，等待在条件队列上而不是等待队列上</div><div class="line">     * -3 表示当前线程节点的后续节点的acquireShare方法能够被无条件执行</div><div class="line">     */</div><div class="line">     <span class="keyword">volatile</span> <span class="keyword">int</span> waitStatus;</div><div class="line">     </div><div class="line">     <span class="comment">//等待队列的前驱节点</span></div><div class="line">     <span class="keyword">volatile</span> Node prev;</div><div class="line">     <span class="comment">//等待队列的后继节点</span></div><div class="line">     <span class="keyword">volatile</span> Node next;</div><div class="line">     <span class="comment">//当前节点的线程</span></div><div class="line">     <span class="keyword">volatile</span> Thread thread;</div><div class="line">     <span class="comment">//条件队列的等待节点</span></div><div class="line">     Node nextWaiter;</div><div class="line">     <span class="comment">//判断当前节点是否是共享节点</span></div><div class="line">     <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isShared</span><span class="params">()</span> </span>&#123;</div><div class="line">         <span class="keyword">return</span> nextWaiter == SHARED;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="comment">//获取当前节点的前驱节点</span></div><div class="line">     <span class="function"><span class="keyword">final</span> Node <span class="title">predecessor</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException </span>&#123;</div><div class="line">         Node p = prev;</div><div class="line">         <span class="keyword">if</span> (p == <span class="keyword">null</span>)</div><div class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">         <span class="keyword">else</span></div><div class="line">             <span class="keyword">return</span> p;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="comment">// 默认构造函数，用来建立初始化节点</span></div><div class="line">     Node() &#123; </div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="comment">// 等待队列使用的节点</span></div><div class="line">     Node(Thread thread, Node mode&#123; </div><div class="line">         <span class="keyword">this</span>.nextWaiter = mode;</div><div class="line">         <span class="keyword">this</span>.thread = thread;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="comment">//条件队列使用的节点</span></div><div class="line">     Node(Thread thread, <span class="keyword">int</span> waitStatus) &#123;</div><div class="line">         <span class="keyword">this</span>.waitStatus = waitStatus;</div><div class="line">         <span class="keyword">this</span>.thread = thread;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="AQS内部变量定义"><a href="#AQS内部变量定义" class="headerlink" title="AQS内部变量定义"></a>AQS内部变量定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//等待队列的头结点，当调用setHead方法的时候才会初始化，属于懒加载</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node head;</div><div class="line"><span class="comment">//等待队列的尾节点</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node tail;</div><div class="line"><span class="comment">//AQS队列的状态</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state;</div></pre></td></tr></table></figure>
<h2 id="CAS操作"><a href="#CAS操作" class="headerlink" title="CAS操作"></a>CAS操作</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本方法调用的是JDK的内部unsafe类，是基于硬件保证原子的更新。</p>
<p><font color="red">如果这个值是“expert”就更新为“update”</font>是无锁并发的基础。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSetState</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, stateOffset, expect, update);</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h2 id="独占模式构建等待队列的实现"><a href="#独占模式构建等待队列的实现" class="headerlink" title="独占模式构建等待队列的实现"></a>独占模式构建等待队列的实现</h2><p><strong>构建等待队列有很多的变种，有的加入了中断，有的加入了时间判断，但是根本的原理是一样的。这个例子是以无中断，无时间判断来讲解的。后面查看源代码的时候，会继续提到其他的方法。</strong></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;acquire是AQS提供的非共享模式获取锁的入口，首先执行tryAcquire方法（<font color="red">由具体的子类实现，不同的子类有不同的实现方式，这个在后续分析Lock源代码的时候会结合起来。</font>），如果失败，表示该线程获取锁失败，就调用addWaiter方法，将当前线程加入到等待队列中，然后返回当前线程的node节点。将node节点传递给acquireQueued方法，如果node节点的前驱节点是头结点，就再次尝试获取到锁，如果获取锁成功（成功返回的是false不会执行selfInterrupt方法），就讲该节点设置为头结点，如果获取失败，就将当前节点的线程挂起。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</div><div class="line">            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</div><div class="line">            selfInterrupt();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将传入的节点加入到等待队列。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</div><div class="line">        Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode); <span class="comment">//将节点构造为等待节点（前面的构造方法已经讲过）</span></div><div class="line">        Node pred = tail;</div><div class="line">        <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123; <span class="comment">//如果为节点不为空，表示已经有节点了，就将该节点添加到等待队列</span></div><div class="line">            <span class="comment">//下面的方法是先将node节点的前驱节点指向尾节点，然后CAS将尾节点设置为node节点（设置尾节点的时候采用的是位移运算，所以看不到直接的设置地方）</span></div><div class="line">            node.prev = pred;</div><div class="line">            <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</div><div class="line">                pred.next = node;</div><div class="line">                <span class="keyword">return</span> node;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//如果尾节点为null，就构造初始队列将节点添加到队列的尾部</span></div><div class="line">        enq(node);</div><div class="line">        <span class="keyword">return</span> node;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;等待队列为空的情况下，无锁地构造初始等待队列。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (;;) &#123; <span class="comment">//for循环，直到队列构造成功</span></div><div class="line">            Node t = tail;</div><div class="line">            <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123; <span class="comment">//第一次循环：队列为空，就构造一个节点设置为头结点</span></div><div class="line">                <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> Node()))</div><div class="line">                    tail = head;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//第二次循环执行到这里 首先将node节点的前驱节点指向尾节点，然后CAS设置node节点为尾节点</span></div><div class="line">                node.prev = t;</div><div class="line">                <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</div><div class="line">                    t.next = node;</div><div class="line">                    <span class="keyword">return</span> t;</div><div class="line">                &#125;</div><div class="line">            &#125;</div></pre></td></tr></table></figure></p>
<p><font color="red">(在挂起当前线程之前进行最后一次挣扎)！！！！！</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在节点添加到了等待队列中的时候再次尝试获取到锁 这里的arg一般是0或者1。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本方法的主要作用是看CAS是否能够成功，成功表示当前线程获取到了锁返回false（注意 成功返回false和我们平时理解的正好相反）,如果失败就将当前线程挂起，在AQS提供的公用的acquire方法中调用了他<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                <span class="comment">//获取node节点的前驱</span></div><div class="line">                <span class="keyword">final</span> Node p = node.predecessor();</div><div class="line">                <span class="comment">/**</span></div><div class="line">                *如果node节点的前驱节点是头结点，</div><div class="line">                *并且CAS更新同步状态成功（表示获取到锁了）</div><div class="line">                *就返回false，这里的tryAcquire是由AQS的不同子类实现的。</div><div class="line">                *后面我会写专门的文章来解析这部分</div><div class="line">                */</div><div class="line">                <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123; <span class="comment">//这里是独占方式所以tryAcquire返回的是boolean，只能是成功或者失败，对比后面分析的tryAcquireShared</span></div><div class="line">                    setHead(node);</div><div class="line">                    p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></div><div class="line">                    failed = <span class="keyword">false</span>;</div><div class="line">                    <span class="keyword">return</span> interrupted;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//如果上一个操作没有成功，就判断当前node节点的线程是否应该被挂起，</span></div><div class="line">                <span class="comment">//如果是，就尝试挂起这个节点对应的线程</span></div><div class="line">                <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</div><div class="line">                    parkAndCheckInterrupt())</div><div class="line">                    interrupted = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (failed)</div><div class="line">                cancelAcquire(node);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;设置头结点<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setHead</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line">        head = node;</div><div class="line">        node.thread = <span class="keyword">null</span>;</div><div class="line">        node.prev = <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h2 id="独占模式激活并移除等待队列的节点"><a href="#独占模式激活并移除等待队列的节点" class="headerlink" title="独占模式激活并移除等待队列的节点"></a>独占模式激活并移除等待队列的节点</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;激活并移除等待节点的过程，和加入等待节点的过程正好相反。首先调用子类的tryRelease方法，如果失败，就返回，如果tryRelease方法释放锁成功。就拿到队列的头结点。然后激活头结点的后继节点，激活的过程是，首先找到头结点的第一个后继有效节点，将其从队列中移除，然后激活这个节点对应的线程。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (tryRelease(arg)) &#123;</div><div class="line">            Node h = head;</div><div class="line">            <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</div><div class="line">                unparkSuccessor(h);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;激活node节点的后继节点<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unparkSuccessor</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line">        <span class="comment">//获取当前节点的状态</span></div><div class="line">        <span class="comment">/**</span></div><div class="line">        * 1 表示等待线程节点已取消 </div><div class="line">        * -1 表示当前线程节点需要被激活</div><div class="line">        * -2 表示当前线程节点，等待在条件队列上而不是等待队列上</div><div class="line">        * -3 表示当前线程节点的后续节点的acquireShare方法能够被无条件执行</div><div class="line">        */</div><div class="line">        <span class="keyword">int</span> ws = node.waitStatus;</div><div class="line">        </div><div class="line">        <span class="comment">//如果节点的状态不是已取消,就讲节点的状态设置为0</span></div><div class="line">        <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</div><div class="line">            compareAndSetWaitStatus(node, ws, <span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="comment">//获取node节点的后继节点</span></div><div class="line">        Node s = node.next;</div><div class="line">        <span class="comment">//如果后继节点不合法，就一直循环，直到找到一个合法的后继节点</span></div><div class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</div><div class="line">            s = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">for</span> (Node t = tail; t != <span class="keyword">null</span> &amp;&amp; t != node; t = t.prev)</div><div class="line">                <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</div><div class="line">                    s = t;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (s != <span class="keyword">null</span>)</div><div class="line">            <span class="comment">//激活s节点，其实就是唤醒这个node节点对应的线程</span></div><div class="line">            LockSupport.unpark(s.thread);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h2 id="共享模式构建等待队列的实现"><a href="#共享模式构建等待队列的实现" class="headerlink" title="共享模式构建等待队列的实现"></a>共享模式构建等待队列的实现</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;共享模式构建等待队列的实现的流程和独占模式构建等待队列的实现是一样的，唯一的不一样的地方是“tryAcquireShared”这个由子类实现的方法。他的过程是：首先尝试获取共享锁（注意这里返回的是整数，这是实现共享模式的关键。）如果失败（小于0），就构建一个共享节点添加到等待队列。并将当前线程挂起。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquireShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (tryAcquireShared(arg) &lt; <span class="number">0</span>)</div><div class="line">            doAcquireShared(arg);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doAcquireShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">        </div><div class="line">        在addWaiter中以Node.SHARE构建一个node节点，添加到node队列的结尾并返回构建的节点</div><div class="line">        <span class="keyword">final</span> Node node = addWaiter(Node.SHARED);</div><div class="line">        <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                获取node节点的前驱节点</div><div class="line">                <span class="keyword">final</span> Node p = node.predecessor();</div><div class="line">                </div><div class="line">                如果node节点的前驱节点是头结点，注意这里和独占式的区别，独占式在这里CAS设置状态</div><div class="line">                <span class="keyword">if</span> (p == head) &#123;</div><div class="line">                    获取节点的状态</div><div class="line">                    <span class="keyword">int</span> r = tryAcquireShared(arg);</div><div class="line">                    <span class="keyword">if</span> (r &gt;= <span class="number">0</span>) &#123;</div><div class="line">                        将node节点设置为头结点 ，如果r大于<span class="number">0</span>，原来的头结点的状态小于<span class="number">0</span>，就获取node节点的后继节点，如果后继节点为<span class="keyword">null</span>或者后继节点是共享节点，就激活node节点的后继节点</div><div class="line">                        setHeadAndPropagate(node, r);</div><div class="line">                        p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></div><div class="line">                        <span class="keyword">if</span> (interrupted)</div><div class="line">                            selfInterrupt();</div><div class="line">                        failed = <span class="keyword">false</span>;</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</div><div class="line">                        parkAndCheckInterrupt())</div><div class="line">                    interrupted = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (failed)</div><div class="line">                cancelAcquire(node);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="共享模式激活并移除等待队列的节点"><a href="#共享模式激活并移除等待队列的节点" class="headerlink" title="共享模式激活并移除等待队列的节点"></a>共享模式激活并移除等待队列的节点</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;共享模式释放节点的流程和独占模式释放节点的流程基本一致。首先尝试更新释放状态tryReleaseShared方法，由具体的子类实现，如果成功就激活头节点的后继节点。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">releaseShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (tryReleaseShared(arg)) &#123;</div><div class="line">            doReleaseShared();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;激活头结点的后继有效节点。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doReleaseShared</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            Node h = head; <span class="comment">//获取头结点</span></div><div class="line">            <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h != tail) &#123;</div><div class="line">                <span class="keyword">int</span> ws = h.waitStatus; <span class="comment">//获取头结点的状态</span></div><div class="line">                <span class="keyword">if</span> (ws == Node.SIGNAL) &#123;<span class="comment">//如果头节点线程节点需要被激活，就尝试更新头结点的状态为0，如果更新状态失败，就继续循环，如果更新状态成功，就激活头结点的有效后继节点。</span></div><div class="line">                    <span class="keyword">if</span> (!compareAndSetWaitStatus(h, Node.SIGNAL, <span class="number">0</span>))&#123; <span class="comment">//更新状态失败，就继续循环</span></div><div class="line">                        <span class="keyword">continue</span>;</div><div class="line">                 &#125;</div><div class="line">                    <span class="comment">//更新状态成功就激活头结点的有效后继节点</span></div><div class="line">                    unparkSuccessor(h);</div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (ws == <span class="number">0</span> &amp;&amp;</div><div class="line">                         !compareAndSetWaitStatus(h, <span class="number">0</span>, Node.PROPAGATE)) <span class="comment">//如果头结点的初始状态为0，就CAS将状态更新为-3，如果成功，就判断头结点是否被修改，</span></div><div class="line">                    <span class="keyword">continue</span>; <span class="comment">//CAS 失败就一直循环</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (h == head) <span class="comment">//如果头结点指针没有变化，就一直循环，否则，退出循环</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setHeadAndPropagate</span><span class="params">(Node node, <span class="keyword">int</span> propagate)</span> </span>&#123;</div><div class="line">        Node h = head; <span class="comment">//记录下原来的头结点 </span></div><div class="line">        setHead(node);<span class="comment">//将node节点设置为头结点</span></div><div class="line">       </div><div class="line">        <span class="keyword">if</span> (propagate &gt; <span class="number">0</span> || h == <span class="keyword">null</span> || h.waitStatus &lt; <span class="number">0</span>) &#123;</div><div class="line">            Node s = node.next; </div><div class="line">            <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.isShared()) <span class="comment">//如果是共享节点就激活头结点的后继节点</span></div><div class="line">                doReleaseShared();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="节点的取消"><a href="#节点的取消" class="headerlink" title="节点的取消"></a>节点的取消</h2><p>将节点的前驱有效节点，和后继有效节点连接起来，取消当前节点<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cancelAcquire</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        node.thread = <span class="keyword">null</span>;</div><div class="line">        <span class="comment">//获取node节点的有效的前驱节点</span></div><div class="line">        Node pred = node.prev;</div><div class="line">        <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>)</div><div class="line">            node.prev = pred = pred.prev;</div><div class="line"></div><div class="line">        <span class="comment">// 找到node节点的后继节点</span></div><div class="line">        Node predNext = pred.next;</div><div class="line"></div><div class="line">        <span class="comment">//将node节点的状态设置为取消</span></div><div class="line">        node.waitStatus = Node.CANCELLED;</div><div class="line"></div><div class="line">        <span class="comment">// 如果node节点是尾节点，就将node节点的前驱节点设置为尾节点，并将node前驱节点的后继节点设置为null</span></div><div class="line">        <span class="keyword">if</span> (node == tail &amp;&amp; compareAndSetTail(node, pred)) &#123;</div><div class="line">            compareAndSetNext(pred, predNext, <span class="keyword">null</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//如果node节点不是尾节点  </span></div><div class="line">            <span class="keyword">int</span> ws;</div><div class="line">            <span class="keyword">if</span> (pred != head &amp;&amp;</div><div class="line">                ((ws = pred.waitStatus) == Node.SIGNAL ||</div><div class="line">                 (ws &lt;= <span class="number">0</span> &amp;&amp; compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) &amp;&amp;</div><div class="line">                pred.thread != <span class="keyword">null</span>) &#123;<span class="comment">//如果node前驱节点不是头结点，就将前驱节点的状态设置为SINGAL。</span></div><div class="line">                Node next = node.next;<span class="comment">//找到node节点的后继节点</span></div><div class="line">                <span class="keyword">if</span> (next != <span class="keyword">null</span> &amp;&amp; next.waitStatus &lt;= <span class="number">0</span>)<span class="comment">//前后链接取消node节点</span></div><div class="line">                    compareAndSetNext(pred, predNext, next);</div><div class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//如果node前驱节点是头节点，激活node节点的后继有效节点</span></div><div class="line">                unparkSuccessor(node);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            node.next = node; </div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>根据node节点和node节点的前驱节点的状态（只有前驱节点的状态为SIGNAL时，后继节点才应该被挂起）判断node节点对应的线程是否应该挂起<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">shouldParkAfterFailedAcquire</span><span class="params">(Node pred, Node node)</span> </span>&#123;</div><div class="line">        <span class="comment">//获取前驱节点的状态</span></div><div class="line">        <span class="keyword">int</span> ws = pred.waitStatus;</div><div class="line">        <span class="keyword">if</span> (ws == Node.SIGNAL) <span class="comment">//如果前驱节点状态为SIGNAL，说明当前节点应该被挂起</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span> (ws &gt; <span class="number">0</span>) &#123;<span class="comment">//如果前驱节点被取消就一直往前找，直到找到有效的前驱节点</span></div><div class="line">            <span class="keyword">do</span> &#123;</div><div class="line">                node.prev = pred = pred.prev;</div><div class="line">            &#125; <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>);</div><div class="line">            pred.next = node; <span class="comment">//将node节点的前驱无效节点删除</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//如果前驱节点的状态非以上两种，就设置前驱节点的状态，并且，返回false</span></div><div class="line">            compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h2 id="其他代码分析。"><a href="#其他代码分析。" class="headerlink" title="其他代码分析。"></a>其他代码分析。</h2><p>上面分析了AQS的整体执行流程图。下面这些方法其实和上面的方法功能都一样，只不过是加了一些中断判断，时间判断等。这里就不一一列出了。</p>
<h2 id="ConditionObject节点的定义"><a href="#ConditionObject节点的定义" class="headerlink" title="ConditionObject节点的定义"></a>ConditionObject节点的定义</h2><h3 id="ConditionObject的整体把握"><a href="#ConditionObject的整体把握" class="headerlink" title="ConditionObject的整体把握"></a>ConditionObject的整体把握</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionObject</span> <span class="keyword">implements</span> <span class="title">Condition</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</div><div class="line">        </div><div class="line">        条件队列的第一个节点</div><div class="line">        <span class="keyword">private</span> <span class="keyword">transient</span> Node firstWaiter;</div><div class="line">        条件队列的最后一个节点</div><div class="line">        <span class="keyword">private</span> <span class="keyword">transient</span> Node lastWaiter;</div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ConditionObject</span><span class="params">()</span> </span>&#123; &#125;</div><div class="line">       </div><div class="line">        ....................</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从整体上看ConditionObject有两个特征：</p>
<ul>
<li>实现了Condition接口（这个接口定义了基本的wait，notify方法）</li>
<li>可以序列化，但是所有的属性都是 transient </li>
</ul>
<h3 id="构建条件队列"><a href="#构建条件队列" class="headerlink" title="构建条件队列"></a>构建条件队列</h3><p>当获取到锁的线程由于某种原因释放了锁，那么在释放锁的过程会有如下的几个操作</p>
<ul>
<li>首先会以当前线程为节点，构造一个条件队列，并将条件队列“下挂”在这把锁上。</li>
<li>然后激活等待这把锁的其他的线程，让等待锁的线程去获取锁，并返回AQS的同步状态</li>
<li>如果添加到等待队列成功，就讲当前线程挂起</li>
<li>当其他线程调用signal之后，会从挂起的代码地方继续执行。去获取线程的锁，走获取线程锁的过程。 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">线程调用await释放当前锁。会首先以当前线程构造一个等待节点添加到等待队列中。</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">            <span class="keyword">if</span> (Thread.interrupted())</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</div><div class="line">            构造条件队列</div><div class="line">            Node node = addConditionWaiter();</div><div class="line">            激活等待队列的线程，并返回AQS的状态</div><div class="line">            <span class="keyword">int</span> savedState = fullyRelease(node);</div><div class="line">            </div><div class="line">            <span class="keyword">int</span> interruptMode = <span class="number">0</span>;</div><div class="line">            正常添加到条件队列就将当前线程挂起。直到被signal或者interrupt，才会退出循环继续执行后面的代码</div><div class="line">            <span class="keyword">while</span> (!isOnSyncQueue(node)) &#123;</div><div class="line">                LockSupport.park(<span class="keyword">this</span>);</div><div class="line">                <span class="keyword">if</span> ((interruptMode = checkInterruptWhileWaiting(node)) != <span class="number">0</span>)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            调用signal之后会继续执行这里的方法，去尝试获取锁，这个前面的分析以及有了。</div><div class="line">            <span class="keyword">if</span> (acquireQueued(node, savedState) &amp;&amp; interruptMode != THROW_IE)</div><div class="line">                interruptMode = REINTERRUPT;</div><div class="line">            <span class="keyword">if</span> (node.nextWaiter != <span class="keyword">null</span>) <span class="comment">// clean up if cancelled</span></div><div class="line">                unlinkCancelledWaiters();</div><div class="line">            <span class="keyword">if</span> (interruptMode != <span class="number">0</span>)</div><div class="line">                reportInterruptAfterWait(interruptMode);</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>添加一个节点到条件队列，如果条件队列的最后一个节点被取消，就先遍历整个条件队列，将所有被取消的节点从条件队列中移除。然后以当前线程构造条件节点加入到队列的末尾。<br>注意：<font color="red">读者可能发现，这里将一个节点添加到条件队列的时候并没有进行加锁，或者CAS什么的。这是因为，构造条件队列的当前线程已经，获取到了锁。</font><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addConditionWaiter</span><span class="params">()</span> </span>&#123;</div><div class="line">            Node t = lastWaiter;</div><div class="line">            </div><div class="line">            如果最后一个节点被取消就遍历整个等待队列节点，取消所以的等待节点线程</div><div class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span> &amp;&amp; t.waitStatus != Node.CONDITION) &#123;</div><div class="line">                unlinkCancelledWaiters();</div><div class="line">                t = lastWaiter;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            构造等待节点，添加到等待队列的末尾</div><div class="line">            Node node = <span class="keyword">new</span> Node(Thread.currentThread(), Node.CONDITION);</div><div class="line">            <span class="keyword">if</span> (t == <span class="keyword">null</span>)</div><div class="line">                firstWaiter = node;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                t.nextWaiter = node;</div><div class="line">            lastWaiter = node;</div><div class="line">            <span class="keyword">return</span> node;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>在每次加入新节点到等待队列的时候，遍历所有的等待队列节点，将所有已经取消的节点从等待队列中移除，这样做的目的是防止返回一个无效的等待节点 ，但是时间复杂度是O(n)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unlinkCancelledWaiters</span><span class="params">()</span> </span>&#123;</div><div class="line">            Node t = firstWaiter;</div><div class="line">            Node trail = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">while</span> (t != <span class="keyword">null</span>) &#123;</div><div class="line">                Node next = t.nextWaiter;</div><div class="line">                <span class="keyword">if</span> (t.waitStatus != Node.CONDITION) &#123;</div><div class="line">                    t.nextWaiter = <span class="keyword">null</span>;</div><div class="line">                    <span class="keyword">if</span> (trail == <span class="keyword">null</span>)</div><div class="line">                        firstWaiter = next;</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                        trail.nextWaiter = next;</div><div class="line">                    <span class="keyword">if</span> (next == <span class="keyword">null</span>)</div><div class="line">                        lastWaiter = trail;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    trail = t;</div><div class="line">                t = next;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>激活等待当前锁的条件队列，并返回AQS的状态。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">fullyRelease</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">int</span> savedState = getState();</div><div class="line">            <span class="keyword">if</span> (release(savedState)) &#123;</div><div class="line">                failed = <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">return</span> savedState;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (failed)</div><div class="line">                node.waitStatus = Node.CANCELLED;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>如果当前节点在条件队列并且等待进入等待队列，则返回true<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isOnSyncQueue</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (node.waitStatus == Node.CONDITION || node.prev == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (node.next != <span class="keyword">null</span>) <span class="comment">// If has successor, it must be on queue</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> findNodeFromTail(node);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> Java并发编程 </category>
            
            <category> 源码分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发编程 </tag>
            
            <tag> AQS </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java并发编程之4——Java锁分解锁分段技术]]></title>
      <url>/2016/06/04/java-concurrent4-java-subsection-decompose/</url>
      <content type="html"><![CDATA[<p>并发编程的所有问题，最后都转换成了，“有状态bean”的状态的同步与互斥修改问题。而最后提出的解决“有状态bean”的同步与互斥修改问题的方案是为所有修改这个状态的方法都加上锁，这样也就可以保证他们在修改bean的状态的时候是顺序进行的。但是这样整个过程的瓶颈也就是被加锁的这段代码。由此就产生了很多对程序加锁的优化思想，从整体上来看，可以分为两个部分：对单个锁的算法的优化。和对锁粒度的细分。</p>
<h2 id="单个锁的优化"><a href="#单个锁的优化" class="headerlink" title="单个锁的优化"></a>单个锁的优化</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;自旋锁：非自旋锁在未获取锁的情况会被阻塞，之后再唤醒尝试获得锁。而JDK的阻塞和唤醒是基于操作系统实现的，会有系统资源的开销。自旋锁就是线程不停地循环尝试获得锁，而不会将自己阻塞,这样不会浪费系统的资源开销，但是会浪费CPU的资源。所有现在的JDK都的是先自旋等待，如果自旋等待一段时间之后还没有获取到锁，就会将当前线程阻塞。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;锁消除：当JVM分析代码发现某个方法只被单个线程安全访问，而且这个方法是同步方法，那么JVM就会去掉这个方法的锁。<br><strong><em>单个锁优化的瓶颈</em></strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对单个锁优化的效果就像提高单个CPU的处理能力一样，最终会由于各个方面的限制而达到一个平衡点，到达这个点之后优化单个锁的对高并发下面锁的优化效果越来越低。所以将一个锁进行粒度细分带来的效果会很明显，如果一个锁保护的代码块被拆分成两个锁来保护，那么程序的效率就大约能够提高到2倍，这个比单个锁的优化带来的效果要明显很多。常见的 锁粒度细分技术有：锁分解和锁分段      </p>
<h2 id="锁粒度细分"><a href="#锁粒度细分" class="headerlink" title="锁粒度细分"></a>锁粒度细分</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;锁的粒度细分主要有：锁分解和锁分段两种方式。他们的核心都是降低锁竞争发生的可能性。</p>
<h3 id="锁分解"><a href="#锁分解" class="headerlink" title="锁分解"></a>锁分解</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;锁分解的实现方式主要有两种：</p>
<h4 id="缩小锁的范围"><a href="#缩小锁的范围" class="headerlink" title="缩小锁的范围"></a>缩小锁的范围</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;锁分解的核心是将无关的代码块，如果在一个方法中有一部分的代码与锁无关，一部分的代码与锁有关，那么可以缩小这个锁的返回，这样锁操作的代码块就会减少，锁竞争的可能性也会减少<br><strong>传统写法：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">synchronizedOnMethod</span><span class="params">()</span></span>&#123; <span class="comment">//粗粒度直接在方法上加synchronized,这样会提高锁冲突的概率</span></div><div class="line">           prefix();</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">           &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</div><div class="line"></div><div class="line">           &#125;</div><div class="line">           post();</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">()</span></span>&#123;</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">           &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</div><div class="line"></div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prefix</span><span class="params">()</span></span>&#123;</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">           &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</div><div class="line"></div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p><strong>修正写法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//假设prefix和post方法是线程安全的（与锁无关的代码）</div><div class="line">static class SynchronizedClazz&#123;</div><div class="line">        public void mineSynOnMethod()&#123;</div><div class="line">            prefix();</div><div class="line">            synchronized (this)&#123; //synchronized代码块只保护有竞争的代码</div><div class="line">                try &#123;</div><div class="line">                    TimeUnit.SECONDS.sleep(1);</div><div class="line">                &#125;catch (InterruptedException e)&#123;</div><div class="line"></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            post();</div><div class="line"></div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<h4 id="减少锁的粒度"><a href="#减少锁的粒度" class="headerlink" title="减少锁的粒度"></a>减少锁的粒度</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果一个锁需要保护多个相互独立的变量，那么可以将一个锁分解为多个锁，并且每个锁保护一个变量，比较对比下面的两段代码，</p>
<font color="red">假设 allUsers和allComputers是两个相互独立的变量</font>

<p><strong>传统写法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">static class DecomposeClazz&#123;</div><div class="line">        private final Set&lt;String&gt; allUsers = new HashSet&lt;String&gt;();</div><div class="line">        private final Set&lt;String&gt; allComputers = new HashSet&lt;String&gt;();</div><div class="line">        </div><div class="line">        public synchronized void addUser(String user)&#123; //公用一把锁</div><div class="line">            allUsers.add(user);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        public synchronized void addComputer(String computer)&#123;</div><div class="line">            allComputers.add(computer);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p><strong>修正写法</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DecompossClazz2</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; allUsers = <span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; allComputers = <span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(String user)</span></span>&#123; <span class="comment">//分解为两把锁</span></div><div class="line">            <span class="keyword">synchronized</span> (allUsers)&#123;</div><div class="line">                allUsers.add(user);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addComputer</span><span class="params">(String computer)</span></span>&#123;</div><div class="line">            <span class="keyword">synchronized</span> (allComputers)&#123;</div><div class="line">                allComputers.add(computer);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="锁分段"><a href="#锁分段" class="headerlink" title="锁分段"></a>锁分段</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如上的方法把一个锁分解为2个锁时候，采用两个线程时候，大约能够使程序的效率提升一倍，但是当竞争激烈的时候，单一个锁上面的竞争还是很激烈，我们还可以将锁分解技术进一步扩展到一组独立的对象例如ConcurrentHashMap的锁分段技术<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.qunar.des.lock;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by chenglaiguo on 8/14/15.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConcurrentHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> LOCK_COUNT = <span class="number">16</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;K,V&gt; map;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object[] locks ;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyConcurrentHashMap</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.map = <span class="keyword">new</span> HashMap&lt;K,V&gt;();</div><div class="line">        locks = <span class="keyword">new</span> Object[LOCK_COUNT];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;LOCK_COUNT;i++)&#123;</div><div class="line">            locks[i] = <span class="keyword">new</span> Object();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">keyHashCode</span><span class="params">(K k)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> Math.abs(k.hashCode() % LOCK_COUNT);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K k)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> keyHashCode = keyHashCode(k);</div><div class="line">        <span class="keyword">synchronized</span> (locks[keyHashCode % LOCK_COUNT])&#123;</div><div class="line">            <span class="keyword">return</span> map.get(k);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> Java并发编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发编程 </tag>
            
            <tag> 锁分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[字符编码历史（字符编码详解）]]></title>
      <url>/2016/06/03/coding-history/</url>
      <content type="html"><![CDATA[<h2 id="字符集概述"><a href="#字符集概述" class="headerlink" title="字符集概述"></a>字符集概述</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;简单来说字符集就是一套文字符号及其编码的描述。从20世纪60年代美国标准化组织ANSI发布了第一个计算机字符集ASCII开始，为了处理不同的文字，各大计算机公司，各国政府，以及各种标准化组织发明了几百种字符集，例如我们所熟悉的：ASCII，USC，GBK，BIG5… 这些不同的字符集从收录到编码都各不相同，给软件的移植和信息的交换带来了很大的困惑。最严重的问题就是字符乱码，这也是到现在为止还影响着每个开发人员的根本问题。本文将从字符编码的发展历史为主线，分析字符乱码的缘由，以及精彩的字符编码斗争史。</p>
<h3 id="几个基本概念"><a href="#几个基本概念" class="headerlink" title="几个基本概念"></a>几个基本概念</h3><ul>
<li>位：计算机的最小单位 二进制中的一位 用二进制的0/1表示</li>
<li>字节：八个位组成一个字节。</li>
<li>字符：我们肉眼可见的文字与符号。</li>
<li>字符集：字符的集合。</li>
<li>编码：将字符转换成计算机可识别的0/1代码。</li>
<li>解码：将计算机表示的0/1编码转换成肉眼可见的字符。</li>
<li>大端序(小端序)：Big Endian/Little Endian 在UCS-2编码中，采用的是两个字节进行编码，那么对于同一份编码就会有两个不同的理解，如果认为高字节在前，低字节在后，会解码出一种字符表现实现，反之会解码出另外一种字符表现形式。所以就需要一种方式能够标识字符编码的顺序，大端序就是表示高字节在前，低字节在后。小端序就是表示低字节在前，高字节在后。</li>
<li>BOM(Byte Order Market)：微软的文本编辑器在处理字符顺序的时候，为了标识该文件是大端序，还是小端序，就在文件的开头添加了一个不存在（宽度为0）的字符标识改文件是大端序还是小端序。oxfeff表示大端序，oxfffe表示小端序。</li>
<li>BMP(Basic MultiLanguage Plain)：基本多语言平面，UCS-4编码中的0组0面，用来兼容Unicode组织的二字节编码。</li>
<li>UCS（Universal Coded Character Set）：IOS组织为统一字符编码问题，而推出的一种编码规范。</li>
<li>Unicode：统一字符编码，是美国的一些大公司的联盟组织，推出的一种编码规范，用来对抗UCS，后来二者达成一致。很多人区分不了UCS和Unicode就是因为，后来二者虽然分开发布，但是规范都是一致的。 它的官方定义为：Unicode字符集是一种在计算机上使用的字符集。它为每种语言中的每个字符设定了统一而且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。<h2 id="第一阶段：字符编码的起源"><a href="#第一阶段：字符编码的起源" class="headerlink" title="第一阶段：字符编码的起源"></a>第一阶段：字符编码的起源</h2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在第一代计算机发明的时候就确定了以二进制方式存储数据的基本逻辑，所以我们所见的所有信息，要想持久化就必须转换成计算机可识别的二进制编码。所以就必须建立一套字符对应二进制的对应关系。所以美国国家标准协会（American National Standard Institution）就收集了当时美国所使用的所有字符（一共128个）采用8个二进制位来建立了字符和对应的二进制编码的对应关系：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">0000 0000-0001 1111 共33种状态表示特殊的终端控制（例如打印机响铃）（0-33）</div><div class="line">0011 0000-0011 1010 共10个表示0-9十个字母</div><div class="line">0100 0001-0101 1010 共26个表示大写字母</div><div class="line">0110 0001-0111 1010 共26个表示小写字母</div><div class="line">   外加33个符号</div><div class="line">   一共128个占7位 高位补0 所以共8位，也就是说一个字符占用一个字节</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="第二阶段：字符编码的发展"><a href="#第二阶段：字符编码的发展" class="headerlink" title="第二阶段：字符编码的发展"></a>第二阶段：字符编码的发展</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;计算机迅速发展并传入了欧亚，所以每个国家都面临着字符以及字符对应的二进制转换问题。下面将分析在这个发展阶段，比较典型的两种字符。</p>
<h3 id="EASCII"><a href="#EASCII" class="headerlink" title="EASCII"></a>EASCII</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;计算机传入欧洲之后。当时欧洲国家的字符组成基本是：英文字母+本国特有字符，所以西欧的一些国家就联合起来，将ASCII的最高位利用起来（128-255）之间的数字进行编码，用来表示本国特有字符，进行了统一编码。所以EASCII还是单字节编码</p>
<h3 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当计算机传出到中国之后，国家也面临字符编码相关的工作，所以当时就推动制定了一套双字节编码编码规范，他收录了常见的6000多个中文、东亚文字以及欧美文字，所有的字母采用两个字节进行编码，称为GBK，由于微软等公司的支持，所以GBK在中国很流行，以至于现在的很多小企业还是采用GBK编码。</p>
<h2 id="字符乱码"><a href="#字符乱码" class="headerlink" title="字符乱码"></a>字符乱码</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当计算机只是在本地（使用一种字符编码的范围内的地区）使用和传播的时候不会出现什么问题，但是当不用的区域需要进行信息交换的时候就会出现问题，比如中国和欧洲进行字符交换，中国使用GBK编码，欧洲使用EASCII编码。那么会出现这样一种情况，一个中国的汉字，被显示为连个奇怪的西欧字符，看到上面的历史，应该明白原因了吧。</p>
<h2 id="第三阶段：天下一统"><a href="#第三阶段：天下一统" class="headerlink" title="第三阶段：天下一统"></a>第三阶段：天下一统</h2><h3 id="UCS系列"><a href="#UCS系列" class="headerlink" title="UCS系列"></a>UCS系列</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;随着信息交流越来越频繁。字符乱码的问题也就越来越突出，统一编码的需求也就越来越强烈。所以IOS组织就提出了一个统一的编码方案。大致的规则如下：</p>
<ul>
<li>所有的字符采用四个字节进行编码。</li>
<li>将整个编码空间划分为（组，面，行，列）四个部分，并且最高位固定为0，所以一共可以表达的字符个数为 128*255*255*255 总共可以表示2亿多个字符。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为当时采用了四字节的编码方式，所以这种编码方式又称为 UCS-4。</li>
</ul>
<h3 id="unicode系列"><a href="#unicode系列" class="headerlink" title="unicode系列"></a>unicode系列</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UCS-4编码推出之后遭受到了美国的大公司的反对，当时由施乐公司牵头，联合了Google、Micro Soft、IBM、Oracle、SUN、Apple等公司成立了Unicode委员会，研发自己的编码和解码规范，然后推出了Unicode1.0编码规范。Unicode1.0采用双字节编码，收录了世界上大部分常用的字符。在这段时间就出现了两个不同的规范。ios和Unicode组织也意识到了这个问题的严重性，于是两者开始对话。最终的结果是：将Unicode的双字节编码，纳入到UCS编码规范的0组0面。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UCS-4的0组0面也称为基本多语言平面（Basic MultiLanguage Plain）也就是说UCS-4的高2字节都为的时候称为BMP，BMP和UCS-4的转换也很简单，在BMP的高位添加两个字节的0就称为UCS-4，将UCS-4的高二字节都变成0就变成了BMP。</p>
<h4 id="UTF"><a href="#UTF" class="headerlink" title="UTF"></a>UTF</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有人统计过UCS-4编码所有字符都采用4字节编码，大约浪费了40%的空间。UCS-2又不足以表示出所有现在可见的字符，所有Unicode组织，在具体的字符转码的实现上，提出了一种名叫UTF（Unicode Transform Format），所以就有了以下几种UTF转换方式</p>
<h5 id="UTF-1"><a href="#UTF-1" class="headerlink" title="UTF-1"></a>UTF-1</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;单字节转码方式，适合将Unicode转换成ASCII编码，听说的人应该都比较少了</p>
<h5 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF-16"></a>UTF-16</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UTF-16是一种变长编码，对于一个Unicode字符被编码成1至2个码元，每个码元为8位（即两字节）。范围是U+0000到U+10FFFF。对于大多数的基本文字，utf16都可以使用2个字节进行表示，所以有利于文本的处理。不过由于最小码元为两个字节，所以不兼容ASCII编码。在传输和存储时，需要考虑字节序，所以操作比较不方便。</p>
<h5 id="UTF-32"><a href="#UTF-32" class="headerlink" title="UTF-32"></a>UTF-32</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;四字节编码和UCS-4完全兼容，因为太浪费空间所以基本没人使用。</p>
<h5 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面的几种UTF转码方式，都有一定的问题，所以都没法大规模推广。也就出现了现在最为经典的转码方式UTF-8，他有以下的有点：</p>
<ul>
<li>可以表示现有Unicode的所有已经表示的字符。</li>
<li>采用变长方式（美国字符采用一个字节表示，欧洲字符采用两个字节表示，亚洲字符采用2-3个字节表示）节省空间。</li>
<li>数据出错，影响比较小。比如在UTF-16的编码中，如果第一个字节在某种情况之下，却是了一个位，那么，后面的所有字符都会错一位，而UTF-8采用了良好的格式，最多只会影响一个字符。后面会详细分析。<br><strong>UTF-8编码的详细规则：</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1 单字节编码以0开始，完全兼容ASCII</div><div class="line">2 n(n&gt;1)字节编码，第一个字节前n位为1，第n+1位为0，从第二个字节开始第一位固定为1,第二位固定为0。</div></pre></td></tr></table></figure>
</li>
</ul>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面是网上对UTF-8编码的经典理解图（图中一个字符最长可以表示为4个字节，但是实际上还可以用5个字节，或者6个字节来进行编码，原理都是一样的）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0000 0000-0000 007F | 0xxxxxxx   单字节编码，总共有7位可以用来进行字符编码  </div><div class="line">0000 0080-0000 07FF | 110xxxxx 10xxxxxx 双字节编码，总共有11位可以用来进行字符编码  </div><div class="line">0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx 三字节编码，总共有15位可以用来进行编码  </div><div class="line">0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  四字节，总共有21位可以用来进行编码</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 字符编码 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 字符编码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java并发编程之3——Java锁的分析]]></title>
      <url>/2016/06/03/java-concurrent3-java-lock-intro/</url>
      <content type="html"><![CDATA[<p> 在分析Java的锁之前首先解释一下JVM对的内存分配模型</p>
<h2 id="JVM内存模型"><a href="#JVM内存模型" class="headerlink" title="JVM内存模型"></a>JVM内存模型</h2><p><strong>JVM的内存公分为5个部分，主要包括：</strong></p>
<ul>
<li>方法区</li>
<li>堆</li>
<li>栈</li>
<li>程序计数器</li>
<li>本地方法栈，<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其中方法区和堆是由多线程共享的，其他的区域数据都是由线程独享的，所有在这两个部分保存的数据是所有的线程都可以访问的，我们的锁机制主要也就是保护以下两个方面的内容：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1  保存在堆中的类实例对象（包括实例对象的变量，方法）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2  保存在方法区的类变量 </li>
</ul>
<h2 id="JVM监视器"><a href="#JVM监视器" class="headerlink" title="JVM监视器"></a>JVM监视器</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在java虚拟机上面每个对象和类在逻辑上面都是和一个监视器相关联的，对于对象来说，监视器保护的是对象的实例变量，对于类来说，监视器保护的是类的类变量，为了实现监视器的排他能力，JVM为每个对象分配一个锁（称为内置锁），任何时候只有一个线程可以获得这个锁，当前线程访问实例对象不需要重新获取锁（锁的重入，在后面会介绍），   当只有一个线程获取到该对象的锁之后，在他释放这个锁之前其他线程只能等待。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;开发人员不需要加锁，对象锁是java虚拟机自己使用的，以前我一直认为在代码块或者在方法上面加上synchronized关键字就是调用当前对象的内置锁，其实真相是：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当在一个代码块或者方法上加synchronized关键字，就是标示要监视这段代码 （告诉JVM我要监视这段代码，）每当进入被监视的代码块的时候JVM就会自动使用当前对象的内置锁，锁上当前的对象。</p>
<h2 id="对象锁"><a href="#对象锁" class="headerlink" title="对象锁"></a>对象锁</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;java中用synchronized监视的代码块获取的锁都是对象的锁，例如：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1  在普通的方法上面添加的锁，就是调用这个方法对应的对象的锁（当这个对象在多个线程之间共享的时候）就会出现线程的同步与互斥<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2  在静态方法上面添加锁获取到的是这个类对象的锁</p>
<h3 id="获取同一个对象的锁同时只有一个线程可以执行"><a href="#获取同一个对象的锁同时只有一个线程可以执行" class="headerlink" title="获取同一个对象的锁同时只有一个线程可以执行"></a>获取同一个对象的锁同时只有一个线程可以执行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.qunar.des.current;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by chenglaiguo on 7/27/15.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        MySynchronized mySynchronized = <span class="keyword">new</span> MySynchronized();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">            <span class="keyword">new</span> SynchronizedThread(mySynchronized).start();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> MySynchronized mySynchronized ;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SynchronizedThread</span><span class="params">(MySynchronized mySynchronized)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.mySynchronized = mySynchronized;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">            mySynchronized.synchronizedInMethod();</div><div class="line">            mySynchronized.synchronizedOnMethod();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MySynchronized</span></span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">synchronizedOnMethod</span><span class="params">()</span></span>&#123; <span class="comment">//同步方法 获取的锁是当前对象的锁，也就是SynchronizedThread中创建的对象mySynchronized的锁</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">" acquire lock"</span>);</div><div class="line">                Thread.currentThread().sleep(<span class="number">100</span>);</div><div class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"   synchronizedOnMethod"</span>);</div><div class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</div><div class="line"></div><div class="line">            &#125;<span class="keyword">finally</span> &#123;</div><div class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">" release lock"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">synchronizedInMethod</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;  <span class="comment">//同步代码块 这里用this的锁就是调用这个方法对象的锁 也就是SynchronizedThread中创建的对象mySynchronized的锁</span></div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">" acquire lock"</span>);</div><div class="line">                    Thread.currentThread().sleep(<span class="number">100</span>);</div><div class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">"   synchronizedInMethod"</span>);</div><div class="line">                &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</div><div class="line"></div><div class="line">                &#125;<span class="keyword">finally</span> &#123;</div><div class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">" release lock"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;程序的运行结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">Thread-<span class="number">0</span> acquire lock</div><div class="line">Thread-<span class="number">0</span>   synchronizedInMethod</div><div class="line">Thread-<span class="number">0</span> release lock</div><div class="line">Thread-<span class="number">9</span> acquire lock</div><div class="line">Thread-<span class="number">9</span>   synchronizedInMethod</div><div class="line">Thread-<span class="number">9</span> release lock</div><div class="line">Thread-<span class="number">9</span> acquire lock</div><div class="line">Thread-<span class="number">9</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">9</span> release lock</div><div class="line">Thread-<span class="number">8</span> acquire lock</div><div class="line">Thread-<span class="number">8</span>   synchronizedInMethod</div><div class="line">Thread-<span class="number">8</span> release lock</div><div class="line">Thread-<span class="number">8</span> acquire lock</div><div class="line">Thread-<span class="number">8</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">8</span> release lock</div><div class="line">Thread-<span class="number">7</span> acquire lock</div><div class="line">Thread-<span class="number">7</span>   synchronizedInMethod</div><div class="line">Thread-<span class="number">7</span> release lock</div><div class="line">Thread-<span class="number">7</span> acquire lock</div><div class="line">Thread-<span class="number">7</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">7</span> release lock</div><div class="line">Thread-<span class="number">6</span> acquire lock</div><div class="line">Thread-<span class="number">6</span>   synchronizedInMethod</div><div class="line">Thread-<span class="number">6</span> release lock</div><div class="line">Thread-<span class="number">6</span> acquire lock</div><div class="line">Thread-<span class="number">6</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">6</span> release lock</div><div class="line">Thread-<span class="number">5</span> acquire lock</div><div class="line">Thread-<span class="number">5</span>   synchronizedInMethod</div><div class="line">Thread-<span class="number">5</span> release lock</div><div class="line">Thread-<span class="number">5</span> acquire lock</div><div class="line">Thread-<span class="number">5</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">5</span> release lock</div><div class="line">Thread-<span class="number">4</span> acquire lock</div><div class="line">Thread-<span class="number">4</span>   synchronizedInMethod</div><div class="line">Thread-<span class="number">4</span> release lock</div><div class="line">Thread-<span class="number">4</span> acquire lock</div><div class="line">Thread-<span class="number">4</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">4</span> release lock</div><div class="line">Thread-<span class="number">3</span> acquire lock</div><div class="line">.....</div></pre></td></tr></table></figure></p>
<p>可以看到下面的输出都是两个线程交替输出，原因 ： 两个方法拿到的锁都是同一个对象的锁，同一时刻只有一个线程可以拿到这个锁可以执行。</p>
<h3 id="获取不同对象的锁互不影响"><a href="#获取不同对象的锁互不影响" class="headerlink" title="获取不同对象的锁互不影响"></a>获取不同对象的锁互不影响</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.qunar.des.current;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by chenglaiguo on 7/27/15.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        MySynchronized mySynchronized = <span class="keyword">new</span> MySynchronized();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">            <span class="keyword">new</span> SynchronizedThread(mySynchronized).start();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> MySynchronized mySynchronized ;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SynchronizedThread</span><span class="params">(MySynchronized mySynchronized)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.mySynchronized = mySynchronized;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">            mySynchronized.synchronizedOnMethod();</div><div class="line">            mySynchronized.synchronizedWithInnerLock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MySynchronized</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> Object innerLock = <span class="keyword">new</span> Object();</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">synchronizedOnMethod</span><span class="params">()</span></span>&#123; <span class="comment">//synchronized方法调用的是当前对象的锁这里是SynchronizedTest中实例化的mySynchronized的锁</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">" acquire lock"</span>);</div><div class="line">                Thread.currentThread().sleep(<span class="number">100</span>);</div><div class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"   synchronizedOnMethod"</span>);</div><div class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</div><div class="line"></div><div class="line">            &#125;<span class="keyword">finally</span> &#123;</div><div class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">" release lock"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">synchronizedWithInnerLock</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">synchronized</span> (innerLock) &#123; <span class="comment">//调用的是innerlock的锁</span></div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">" acquire lock"</span>);</div><div class="line">                    Thread.currentThread().sleep(<span class="number">100</span>);</div><div class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"   synchronizedWithInnerLock"</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line"></div><div class="line">                &#125;<span class="keyword">finally</span> &#123;</div><div class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">" release lock"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;程序的输入如下： <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">Thread-<span class="number">0</span> acquire lock</div><div class="line">Thread-<span class="number">0</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">0</span> release lock</div><div class="line">Thread-<span class="number">0</span> acquire lock</div><div class="line">Thread-<span class="number">9</span> acquire lock</div><div class="line">Thread-<span class="number">0</span>   synchronizedWithInnerLock</div><div class="line">Thread-<span class="number">9</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">0</span> release lock</div><div class="line">Thread-<span class="number">9</span> release lock</div><div class="line">Thread-<span class="number">9</span> acquire lock</div><div class="line">Thread-<span class="number">8</span> acquire lock</div><div class="line">Thread-<span class="number">9</span>   synchronizedWithInnerLock</div><div class="line">Thread-<span class="number">8</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">9</span> release lock</div><div class="line">Thread-<span class="number">8</span> release lock</div><div class="line">Thread-<span class="number">8</span> acquire lock</div><div class="line">Thread-<span class="number">7</span> acquire lock</div><div class="line">Thread-<span class="number">8</span>   synchronizedWithInnerLock</div><div class="line">Thread-<span class="number">8</span> release lock</div><div class="line">Thread-<span class="number">7</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">7</span> release lock</div><div class="line">Thread-<span class="number">7</span> acquire lock</div><div class="line">Thread-<span class="number">6</span> acquire lock</div><div class="line">Thread-<span class="number">7</span>   synchronizedWithInnerLock</div><div class="line">Thread-<span class="number">6</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">6</span> release lock</div><div class="line">Thread-<span class="number">7</span> release lock</div><div class="line">Thread-<span class="number">5</span> acquire lock</div><div class="line">Thread-<span class="number">6</span> acquire lock</div><div class="line">Thread-<span class="number">5</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">6</span>   synchronizedWithInnerLock</div><div class="line">Thread-<span class="number">5</span> release lock</div><div class="line">Thread-<span class="number">6</span> release lock</div><div class="line">Thread-<span class="number">5</span> acquire lock</div><div class="line">Thread-<span class="number">4</span> acquire lock</div><div class="line">Thread-<span class="number">5</span>   synchronizedWithInnerLock</div><div class="line">Thread-<span class="number">5</span> release lock</div><div class="line">Thread-<span class="number">4</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">4</span> release lock</div><div class="line">Thread-<span class="number">4</span> acquire lock</div><div class="line">Thread-<span class="number">3</span> acquire lock</div><div class="line">Thread-<span class="number">4</span>   synchronizedWithInnerLock</div><div class="line">Thread-<span class="number">4</span> release lock</div><div class="line">Thread-<span class="number">3</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">3</span> release lock</div><div class="line">Thread-<span class="number">3</span> acquire lock</div><div class="line">Thread-<span class="number">2</span> acquire lock</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>两个方法可以同时获取到锁，可以同时执行。原因：这两个方法上面使用的锁不是相同的锁，所以他们之间的获取和释放没有任何关系</p>
<h3 id="对象锁和类对象锁"><a href="#对象锁和类对象锁" class="headerlink" title="对象锁和类对象锁"></a>对象锁和类对象锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.qunar.des.current;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by chenglaiguo on 7/27/15.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        MySynchronized mySynchronized = <span class="keyword">new</span> MySynchronized();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">            <span class="keyword">new</span> SynchronizedThread(mySynchronized).start();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> MySynchronized mySynchronized ;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SynchronizedThread</span><span class="params">(MySynchronized mySynchronized)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.mySynchronized = mySynchronized;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">            mySynchronized.synchronizedOnMethod();</div><div class="line">            MySynchronized.synchronizedOnClass();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MySynchronized</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">synchronizedOnMethod</span><span class="params">()</span></span>&#123; <span class="comment">//获取的锁是当前对象的锁</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">" acquire lock"</span>);</div><div class="line">                Thread.currentThread().sleep(<span class="number">100</span>);</div><div class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"   synchronizedOnMethod"</span>);</div><div class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</div><div class="line"></div><div class="line">            &#125;<span class="keyword">finally</span> &#123;</div><div class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">" release lock"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">synchronizedOnClass</span><span class="params">()</span></span>&#123; <span class="comment">//获取的是类对象的锁</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">" acquire lock"</span>);</div><div class="line">                Thread.currentThread().sleep(<span class="number">100</span>);</div><div class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"   synchronizedOnClass"</span>);</div><div class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</div><div class="line"></div><div class="line">            &#125;<span class="keyword">finally</span> &#123;</div><div class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">" release lock"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>程序的输入如下：在多线程访问的情况下两个方法可以同时进入，当前对象的锁和类对象的锁不是同一把锁，所以可以同时访问。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">Thread-<span class="number">0</span> acquire lock</div><div class="line">Thread-<span class="number">0</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">0</span> release lock</div><div class="line">Thread-<span class="number">0</span> acquire lock</div><div class="line">Thread-<span class="number">9</span> acquire lock</div><div class="line">Thread-<span class="number">0</span>   synchronizedOnClass</div><div class="line">Thread-<span class="number">9</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">0</span> release lock</div><div class="line">Thread-<span class="number">9</span> release lock</div><div class="line">Thread-<span class="number">9</span> acquire lock</div><div class="line">Thread-<span class="number">8</span> acquire lock</div><div class="line">Thread-<span class="number">9</span>   synchronizedOnClass</div><div class="line">Thread-<span class="number">9</span> release lock</div><div class="line">Thread-<span class="number">8</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">8</span> release lock</div><div class="line">Thread-<span class="number">8</span> acquire lock</div><div class="line">Thread-<span class="number">7</span> acquire lock</div><div class="line">Thread-<span class="number">8</span>   synchronizedOnClass</div><div class="line">Thread-<span class="number">8</span> release lock</div><div class="line">Thread-<span class="number">7</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">7</span> release lock</div><div class="line">Thread-<span class="number">7</span> acquire lock</div><div class="line">Thread-<span class="number">6</span> acquire lock</div><div class="line">Thread-<span class="number">7</span>   synchronizedOnClass</div><div class="line">Thread-<span class="number">6</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">7</span> release lock</div><div class="line">Thread-<span class="number">6</span> release lock</div><div class="line">Thread-<span class="number">6</span> acquire lock</div><div class="line">Thread-<span class="number">5</span> acquire lock</div><div class="line">Thread-<span class="number">6</span>   synchronizedOnClass</div><div class="line">Thread-<span class="number">5</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">5</span> release lock</div><div class="line">Thread-<span class="number">6</span> release lock</div><div class="line">Thread-<span class="number">5</span> acquire lock</div><div class="line">Thread-<span class="number">4</span> acquire lock</div><div class="line">Thread-<span class="number">5</span>   synchronizedOnClass</div><div class="line">Thread-<span class="number">5</span> release lock</div><div class="line">Thread-<span class="number">4</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">4</span> release lock</div><div class="line">Thread-<span class="number">4</span> acquire lock</div><div class="line">Thread-<span class="number">3</span> acquire lock</div><div class="line">Thread-<span class="number">4</span>   synchronizedOnClass</div><div class="line">Thread-<span class="number">3</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">4</span> release lock</div><div class="line">Thread-<span class="number">3</span> release lock</div><div class="line">Thread-<span class="number">3</span> acquire lock</div><div class="line">Thread-<span class="number">2</span> acquire lock</div><div class="line">Thread-<span class="number">3</span>   synchronizedOnClass</div><div class="line">Thread-<span class="number">2</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">2</span> release lock</div><div class="line">Thread-<span class="number">3</span> release lock</div><div class="line">Thread-<span class="number">2</span> acquire lock</div><div class="line">Thread-<span class="number">1</span> acquire lock</div><div class="line">Thread-<span class="number">2</span>   synchronizedOnClass</div><div class="line">Thread-<span class="number">2</span> release lock</div><div class="line">Thread-<span class="number">1</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">1</span> release lock</div><div class="line">Thread-<span class="number">1</span> acquire lock</div><div class="line">Thread-<span class="number">1</span>   synchronizedOnClass</div><div class="line">Thread-<span class="number">1</span> release lock</div></pre></td></tr></table></figure></p>
<h3 id="类对象锁的互斥性"><a href="#类对象锁的互斥性" class="headerlink" title="类对象锁的互斥性"></a>类对象锁的互斥性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.qunar.des.current;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by chenglaiguo on 7/27/15.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        MySynchronized mySynchronized = <span class="keyword">new</span> MySynchronized();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">            <span class="keyword">new</span> SynchronizedThread(mySynchronized).start();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> MySynchronized mySynchronized ;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SynchronizedThread</span><span class="params">(MySynchronized mySynchronized)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.mySynchronized = mySynchronized;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">            mySynchronized.synchronizedOnStaticMethod();</div><div class="line">            MySynchronized.synchronizedOnClass();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MySynchronized</span></span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">synchronizedOnStaticMethod</span><span class="params">()</span></span>&#123;</div><div class="line">           synchronizedOnMethod(); <span class="comment">//调用static对象的锁，就是类对象的锁</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">synchronizedOnMethod</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">" acquire lock"</span>);</div><div class="line">                Thread.currentThread().sleep(<span class="number">100</span>);</div><div class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"   synchronizedOnMethod"</span>);</div><div class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</div><div class="line"></div><div class="line">            &#125;<span class="keyword">finally</span> &#123;</div><div class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">" release lock"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">synchronizedOnClass</span><span class="params">()</span></span>&#123; <span class="comment">//获取当前类对象的锁</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">" acquire lock"</span>);</div><div class="line">                Thread.currentThread().sleep(<span class="number">100</span>);</div><div class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"   synchronizedOnClass"</span>);</div><div class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</div><div class="line"></div><div class="line">            &#125;<span class="keyword">finally</span> &#123;</div><div class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">" release lock"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>程序的输出如下： 两个方法不会同时执行，都是用的同一个类对象的锁<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">Thread-<span class="number">0</span> acquire lock</div><div class="line">Thread-<span class="number">0</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">0</span> release lock</div><div class="line">Thread-<span class="number">9</span> acquire lock</div><div class="line">Thread-<span class="number">9</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">9</span> release lock</div><div class="line">Thread-<span class="number">9</span> acquire lock</div><div class="line">Thread-<span class="number">9</span>   synchronizedOnClass</div><div class="line">Thread-<span class="number">9</span> release lock</div><div class="line">Thread-<span class="number">8</span> acquire lock</div><div class="line">Thread-<span class="number">8</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">8</span> release lock</div><div class="line">Thread-<span class="number">8</span> acquire lock</div><div class="line">Thread-<span class="number">8</span>   synchronizedOnClass</div><div class="line">Thread-<span class="number">8</span> release lock</div><div class="line">Thread-<span class="number">7</span> acquire lock</div><div class="line">Thread-<span class="number">7</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">7</span> release lock</div><div class="line">Thread-<span class="number">7</span> acquire lock</div><div class="line">Thread-<span class="number">7</span>   synchronizedOnClass</div><div class="line">Thread-<span class="number">7</span> release lock</div><div class="line">Thread-<span class="number">6</span> acquire lock</div><div class="line">Thread-<span class="number">6</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">6</span> release lock</div><div class="line">Thread-<span class="number">6</span> acquire lock</div><div class="line">Thread-<span class="number">6</span>   synchronizedOnClass</div><div class="line">Thread-<span class="number">6</span> release lock</div><div class="line">Thread-<span class="number">5</span> acquire lock</div><div class="line">Thread-<span class="number">5</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">5</span> release lock</div><div class="line">Thread-<span class="number">5</span> acquire lock</div><div class="line">Thread-<span class="number">5</span>   synchronizedOnClass</div><div class="line">Thread-<span class="number">5</span> release lock</div><div class="line">Thread-<span class="number">4</span> acquire lock</div><div class="line">Thread-<span class="number">4</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">4</span> release lock</div><div class="line">Thread-<span class="number">4</span> acquire lock</div><div class="line">Thread-<span class="number">4</span>   synchronizedOnClass</div><div class="line">Thread-<span class="number">4</span> release lock</div><div class="line">Thread-<span class="number">3</span> acquire lock</div><div class="line">Thread-<span class="number">3</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">3</span> release lock</div><div class="line">Thread-<span class="number">3</span> acquire lock</div><div class="line">Thread-<span class="number">3</span>   synchronizedOnClass</div><div class="line">Thread-<span class="number">3</span> release lock</div><div class="line">Thread-<span class="number">2</span> acquire lock</div><div class="line">Thread-<span class="number">2</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">2</span> release lock</div><div class="line">Thread-<span class="number">2</span> acquire lock</div><div class="line">Thread-<span class="number">2</span>   synchronizedOnClass</div><div class="line">Thread-<span class="number">2</span> release lock</div><div class="line">Thread-<span class="number">1</span> acquire lock</div><div class="line">Thread-<span class="number">1</span>   synchronizedOnMethod</div><div class="line">Thread-<span class="number">1</span> release lock</div><div class="line">Thread-<span class="number">1</span> acquire lock</div><div class="line">Thread-<span class="number">1</span>   synchronizedOnClass</div><div class="line">Thread-<span class="number">1</span> release lock</div><div class="line">Thread-<span class="number">0</span> acquire lock</div><div class="line">Thread-<span class="number">0</span>   synchronizedOnClass</div><div class="line">Thread-<span class="number">0</span> release lock</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> Java并发编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java并发编程之2——同步工具类的使用（CountDownLatch,CyclicBarrier,BlockungQueue,Semaphore）]]></title>
      <url>/2016/06/03/java-concurrent2-countdownlatch-cyclicbarrier-blockungqueue-semaphore/</url>
      <content type="html"><![CDATA[<p>为了简化线程同步与互斥的相关操作JDK，提供了大约4中同步与互斥的工具类： 闭锁（CountDownLatch），栅栏（CyclicBarrier），阻塞队列（BlockingQueue）,信号量（semaphore）。本文将对比分析四种同步工具类的使用范例，和应用场景。<a id="more"></a></p>
<h2 id="闭锁（CountDownLatch）"><a href="#闭锁（CountDownLatch）" class="headerlink" title="闭锁（CountDownLatch）"></a>闭锁（CountDownLatch）</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;闭锁的作用主要是允许一个或者多个线程等待某个事件的完成，当初始化一个CountDownLatch的时候需要指定同步计数器的个数（等待线程的个数），这个时候主线程的wait方法会一直阻塞，子线程每调用一次countDown方法，同步计数器就会减1,当这个值减少到0时，主线程的wait方法处就会解除阻塞。<br><strong>CountDownLatch的主要方法如下：</strong></p>
<ul>
<li>public CountDownLatch(int count);   //构造函数 传入一个同步计数器 当同步计数器大于0的时候主线程调用wait的地方会一直阻塞</li>
<li>public void countDown();  //当子线程调用一次countDown方法的时候同步计数器的数值就会减1</li>
<li>public void await() throws InterruptedException //当同步计数器的数值大于0的时候，主线程会一直在wait方法处等待，当同步计数器的大小为0的时候，主线程就会解除阻塞继续运行。</li>
</ul>
<p><strong>CountDownLatch示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.qunar.des.current;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by chenglaiguo on 7/21/15.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchTest</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(CountDownLatchTest.class);</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">3</span>);<span class="comment">//构造函数传入3个同步计数器</span></div><div class="line"></div><div class="line">        System.out.println(<span class="string">"CountDownLatchTest begin ..."</span>);</div><div class="line">        <span class="keyword">new</span> Worker(<span class="string">"zs"</span>,countDownLatch).start(); <span class="comment">//启动3个线程，</span></div><div class="line">        <span class="keyword">new</span> Worker(<span class="string">"ls"</span>,countDownLatch).start();</div><div class="line">        <span class="keyword">new</span> Worker(<span class="string">"ww"</span>,countDownLatch).start();</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            countDownLatch.await(); <span class="comment">// 当同步计数器的数值大于0的时候，线程会一直在这里等待，不会执行下面的sysout，当两个子线程执行完成后同步计数器数值减到0,主线程会继续执行</span></div><div class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</div><div class="line">            logger.error(<span class="string">"CountDownLatchTest await cause InterruptedException : "</span>,e);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"CountDownLatchTest end ..."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> String name;</div><div class="line">        <span class="keyword">private</span> CountDownLatch countDownLatch;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">(String name,CountDownLatch countDownLatch)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line">            <span class="keyword">this</span>.countDownLatch = countDownLatch;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.currentThread().sleep(<span class="number">1000</span>);</div><div class="line">                System.out.println(name+<span class="string">"complete his work..."</span>);</div><div class="line">                countDownLatch.countDown();  <span class="comment">// 当子线程执行完成之后，每调用一个countDown()方法，程序计数器的数值就会减1</span></div><div class="line"></div><div class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</div><div class="line">                logger.error(<span class="string">"Worker run method cause InterruptedException : "</span>,e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>CountDownLatch的适用场景：</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主线程在做一项工作之前需要一系列准备工作，只有这些准备工作都完成之后，主线程才能继续他的工作，而这些准备工作之间是相互独立的。例如  我们的搜索系统，在启动是时候主要有两部分的工作：</p>
<ul>
<li>准备数据</li>
<li>建立数据之间的关联关系<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在建立数据关系之前数据的准备必须完成，而大部分的数据之间是相互独立的，所以可以分一些子任务并发运行，当所有的子任务运行完成之后，就可以建立数据关系</li>
</ul>
<h2 id="栅栏（CyclicBarrier）"><a href="#栅栏（CyclicBarrier）" class="headerlink" title="栅栏（CyclicBarrier）"></a>栅栏（CyclicBarrier）</h2><p><strong>栅栏的主要作用是等待其他线程的完成，他CountDownLatch的主要区别是:</strong> </p>
<p><font color="red"></font></p>
<ul>
<li>CountDownLatch主要是等待事件的完成，每个子线程只能countDown()一次，当子线程调用一次countDown方法,就表示当前线程的事件完成。（子线程之间不是相互等待，子线程完成之后在主线程的wait处等待）</li>
<li>CyclicBarrier主要是等待其他的线程完成（所有的子线程之间会相互等待，主线程的流程不会受到子线程的影响）。他的主要方法是一个await(),这个方法每被调用一次计数器便会减1,并阻塞住当前的线程，当计数减到0的时候，阻塞会解除，在这个栅栏上面等待的所有线程都会继续运行。然后进行一次新的循环（这时如果是CountDownLatch会回到主线程运行，而不是唤醒所有在栅栏上面等待的子线程继续运行）<br><br><strong>CyclicBarrier的主要方法：</strong></li>
<li>await() 这个方法每被调用一次计数器便会减1,并阻塞住当前的线程，当计数减到0的时候，阻塞会解除，在这个栅栏上面等待的所有线程都会继续运行。然后进行一次新的循环。</li>
</ul>
<p><strong>CyclicBarrier示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.qunar.des.current;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.CyclicBarrier;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by chenglaiguo on 7/24/15.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierTest</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(CyclicBarrierTest.class);</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">3</span>);</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"cyclicBarrierTest begin..."</span>);</div><div class="line">        <span class="keyword">new</span> Runner(cyclicBarrier,<span class="string">"zs"</span>).start();  <span class="comment">// 启动三个子线程</span></div><div class="line">        <span class="keyword">new</span> Runner(cyclicBarrier,<span class="string">"ls"</span>).start();</div><div class="line">        <span class="keyword">new</span> Runner(cyclicBarrier,<span class="string">"ww"</span>).start();</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"cyclicBarrierTest end ...."</span>);  <span class="comment">//主线程不会阻塞，所以启动子线程之后，这里会马上执行</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Runner</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> CyclicBarrier cyclicBarrier ;</div><div class="line">        <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Runner</span><span class="params">(CyclicBarrier cyclicBarrier,String name)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.cyclicBarrier = cyclicBarrier;</div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.currentThread().sleep(<span class="number">1000</span>);</div><div class="line">                System.out.println(name+<span class="string">": is ready...."</span>);</div><div class="line">                cyclicBarrier.await(); <span class="comment">// 三个子线程会在这里进行第一步的等待 （与主线程无关）当三个子线程都执行完成之后，会同时进行下一步的工作</span></div><div class="line"></div><div class="line">                Thread.currentThread().sleep(<span class="number">1000</span>);</div><div class="line">                System.out.println(name+<span class="string">": is running..."</span>);</div><div class="line">                cyclicBarrier.await(); <span class="comment">// 三个子线程会在这里进行第二步的等待（与主线程无关）当三个子线程都执行完成之后，会同时进入下一步的操作</span></div><div class="line"></div><div class="line">                Thread.currentThread().sleep(<span class="number">1000</span>);</div><div class="line">                System.out.println(name+<span class="string">": is complete..."</span>); <span class="comment">//执行完成之后，子线程退出</span></div><div class="line"></div><div class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">                logger.error(<span class="string">"Runner run method cause exception : "</span>,e);</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="阻塞队列（BlockingQueue）"><a href="#阻塞队列（BlockingQueue）" class="headerlink" title="阻塞队列（BlockingQueue）"></a>阻塞队列（BlockingQueue）</h2><p><strong>BlockingQueue是Java提供的一种阻塞队列实现方式，他主要有四种实现：</strong></p>
<ul>
<li>ArrayBlockingQueue  有界的阻塞队列，在实例化的时候需要指明有界队列的大小，队列采用先进先出的策略</li>
<li>LinkedBlockQueue  有两种构造方法默认的是不传递任何参数，这种方式是一个无界的阻塞队列，另一种方式和ArrayBlockingQueue相同</li>
<li>SynchronousBlockQueue 比较特殊（所有的读写操作都是读取交替运行才可以）</li>
<li>PriorityBolckQueue 有优先级的阻塞队列<br><strong>阻塞队列的主要方法（以ArrayBlockingQueue为列子说明）：</strong></li>
<li>piblic  ArrayBlockQueue(int count) 构造方法制定阻塞队列的大小</li>
<li>piblic void put() 方法在队列满的时候会阻塞直到有队列成员被消费，</li>
<li>public T take() 方法在队列空的时候会阻塞，直到有队列成员被放进来</li>
</ul>
<p><strong>BlockingQueue示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.qunar.des.current;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Random;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by chenglaiguo on 7/24/15.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockingQueueTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(BlockingQueueTest.class);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;String&gt;(<span class="number">5</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</div><div class="line">            <span class="keyword">new</span> Consumer(blockingQueue).start();</div><div class="line">            <span class="keyword">new</span> Producer(blockingQueue).start();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> BlockingQueue&lt;String&gt; blockingQueue;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(BlockingQueue&lt;String&gt; blockingQueue)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.blockingQueue = blockingQueue;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.currentThread().sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">1000</span>));</div><div class="line">                String product = blockingQueue.take();  <span class="comment">//如果队列为空 当前线程会在这里阻塞</span></div><div class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">" : consumer : "</span>+product);</div><div class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</div><div class="line">                logger.error(<span class="string">"Consumer run method cause InterruptedException"</span>,e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> BlockingQueue&lt;String&gt; blockingQueue;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(BlockingQueue&lt;String&gt; blockingQueue)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.blockingQueue = blockingQueue;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.currentThread().sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">1000</span>));</div><div class="line">                String productName = <span class="string">"product"</span>+<span class="keyword">new</span> Random().nextInt(<span class="number">1000000</span>);</div><div class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"  : produce :"</span>+productName);</div><div class="line">                blockingQueue.put(productName); <span class="comment">//如果队列已经满了当前线程会在这里阻塞</span></div><div class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</div><div class="line">                logger.error(<span class="string">"Producer run method cause InterruptedException"</span>,e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="信号量（Semaphore）"><a href="#信号量（Semaphore）" class="headerlink" title="信号量（Semaphore）"></a>信号量（Semaphore）</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;信号量通过构造函数设定一个数量的许可（permit）,然后通过acquire获取许可，通过release释放许可，当acquire获取到许可之后当前的线程就可以执行，否则当前线程阻塞。Semaphore通常用于限制可以访问资源的数量，例如数据库连接池，线程池。单个信号量的semaphore可以用来实现互斥锁<br><strong>Semaphore的主要方法如下：</strong></p>
<ul>
<li>Semaphore(int permits, boolean fair) //创建具有给定的许可数和给定的公平设置的Semaphore。  如果以公平方式执行，则线程将会按到达的顺序（FIFO）执行，如果是非公平，则可以后请求的有可能排在队列的头部</li>
<li>acquire() 获取一个许可，如果没有就等待,当前线程阻塞直到获取到许可之后才会继续执行</li>
<li>release() 释放一个许可。</li>
</ul>
<p><strong>Semaphore示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.qunar.des.current;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by chenglaiguo on 7/24/15.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(SemaphoreTest.class);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        DataPool dataPool = <span class="keyword">new</span> DataPool();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;  <span class="comment">//100个线程获取10个链接，可以演示他们的同步与阻塞</span></div><div class="line">             <span class="keyword">new</span> ConnectionConsumer(dataPool).start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionConsumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">        DataPool dataPool ;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ConnectionConsumer</span><span class="params">(DataPool dataPool)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.dataPool = dataPool;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Object connection = dataPool.acquireDataConnection(); <span class="comment">//获取链接</span></div><div class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"  acquire "</span>+connection.toString());</div><div class="line"></div><div class="line">                Thread.currentThread().sleep(<span class="number">1000</span>); <span class="comment">//消费链接</span></div><div class="line"></div><div class="line">                dataPool.releaseDataConnection(); <span class="comment">//释放链接</span></div><div class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"  release "</span>+connection.toString());</div><div class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</div><div class="line">                logger.error(<span class="string">"ConnectionConsumer run cause InterruptedException : "</span>,e);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DataPool</span></span>&#123;   <span class="comment">//在这里模拟一个容量为10的数据库连接池</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> PERMIT_COUNT = <span class="number">10</span>;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Semaphore dataPoolSize = <span class="keyword">new</span> Semaphore(PERMIT_COUNT,<span class="keyword">true</span>);  <span class="comment">//使用公平的信号量，这个信号量中有10个许可</span></div><div class="line">        <span class="keyword">private</span> Object[] allDataConnection = <span class="keyword">new</span> Object[PERMIT_COUNT];</div><div class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span>[] isUsed = <span class="keyword">new</span> <span class="keyword">boolean</span>[PERMIT_COUNT];</div><div class="line"></div><div class="line">        DataPool() &#123;  <span class="comment">//初始化10个数据库链接池</span></div><div class="line">            allDataConnection[<span class="number">0</span>]=<span class="string">"connection 1"</span>;</div><div class="line">            allDataConnection[<span class="number">1</span>]=<span class="string">"connection 2"</span>;</div><div class="line">            allDataConnection[<span class="number">2</span>]=<span class="string">"connection 3"</span>;</div><div class="line">            allDataConnection[<span class="number">3</span>]=<span class="string">"connection 4"</span>;</div><div class="line">            allDataConnection[<span class="number">4</span>]=<span class="string">"connection 5"</span>;</div><div class="line">            allDataConnection[<span class="number">5</span>]=<span class="string">"connection 6"</span>;</div><div class="line">            allDataConnection[<span class="number">6</span>]=<span class="string">"connection 7"</span>;</div><div class="line">            allDataConnection[<span class="number">7</span>]=<span class="string">"connection 8"</span>;</div><div class="line">            allDataConnection[<span class="number">8</span>]=<span class="string">"connection 9"</span>;</div><div class="line">            allDataConnection[<span class="number">9</span>]=<span class="string">"connection 10"</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">acquireDataConnection</span><span class="params">()</span></span>&#123; <span class="comment">//获取一个数据库链接</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                dataPoolSize.acquire();  <span class="comment">//首先获取一个信号量的许可，如果当前线程获取到了许可则当前线程可以继续执行，如果当前线程没有获取到许可，则当前线程会阻塞等待</span></div><div class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</div><div class="line">                logger.error(<span class="string">"DataPool getDataConnection cause InterruptedException : "</span>,e);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> acquireAvailableDataConnection(); <span class="comment">// 如果当前线程获取到一个信号量的许可之后，就可以获取到一个链接</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">releaseDataConnection</span><span class="params">()</span></span>&#123; <span class="comment">// 释放一个许可，注意：这里是在连接池中任意找到一个链接释放，在实际开发中需要释放的线程应该和释放信号量的那个线程占有的链接是同一个 （这里是简化做法，可能释放其他线程占有的链接）</span></div><div class="line">            dataPoolSize.release();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;PERMIT_COUNT;i++)&#123;</div><div class="line">                <span class="keyword">if</span> (isUsed[i])&#123; <span class="comment">// 找到一个被占有的链接释放</span></div><div class="line">                    isUsed[i]=<span class="keyword">false</span>;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> Object <span class="title">acquireAvailableDataConnection</span><span class="params">()</span></span>&#123; <span class="comment">// 当一个线程获取到信号量之后，就可以找到一个没有使用的链接返回</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;PERMIT_COUNT;i++)&#123;</div><div class="line">                <span class="keyword">if</span> (!isUsed[i])&#123; <span class="comment">//返回一个未被使用的链接</span></div><div class="line">                    isUsed[i]=<span class="keyword">true</span>;</div><div class="line">                    <span class="keyword">return</span> allDataConnection[i];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> Java并发编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发编程 </tag>
            
            <tag> CountDownLatch </tag>
            
            <tag> CyclicBarrier </tag>
            
            <tag> Semaphore </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java并发编程之1——synchronized和volatile]]></title>
      <url>/2016/06/02/java-concurrent1-synchronized-volatile/</url>
      <content type="html"><![CDATA[<p>总的来说synchronized主要是解决线程互斥性问题，volatitle主要是解决线程可见性的问题。</p>
<h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized主要用来保证临界的代码在同一时刻只有一个线程在访问获取修改。那么synchronized保护的变量一定是线程安全的。</p>
<h3 id="synchronized的线程安全性"><a href="#synchronized的线程安全性" class="headerlink" title="synchronized的线程安全性"></a><strong>synchronized的线程安全性</strong></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized 拿到的锁是java对象的内置锁，同一个对象的内置锁在一个时间点只有一个线程可以获取（注意：这里是线程，不是调用，涉及到可重入锁，将在后面介绍）所以由synchronized加锁的代码块一定是线程安全的。</p>
<h3 id="synchronized的变量可见性"><a href="#synchronized的变量可见性" class="headerlink" title="synchronized的变量可见性"></a><strong>synchronized的变量可见性</strong></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized 加锁的变量在统一时刻只有一个线程可以看到，所以有synchronized保护的变量在多个线程之间一定是可见的。</p>
<h3 id="对象锁"><a href="#对象锁" class="headerlink" title="对象锁"></a><strong>对象锁</strong></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized加锁的代码块拿到的锁是当前对象的内置锁，注意是对象的锁。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">public class LockTestClass &#123;</div><div class="line"></div><div class="line">        private Object object = new Object();</div><div class="line"></div><div class="line">	//无锁</div><div class="line">	public void noSynMethod(long threadID, ObjThread thread) &#123;</div><div class="line">		System.out.println(&quot;nosyn: class obj is &quot; + thread + &quot;, threadId is&quot;</div><div class="line">				+ threadID);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	//当前对象锁</div><div class="line">	public synchronized void synOnMethod() &#123;</div><div class="line">		System.out.println(&quot;synOnMethod begins&quot; + &quot;, time = &quot;</div><div class="line">				+ System.currentTimeMillis() + &quot;ms&quot;);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	//锁代码块，用的还是当前对象的锁</div><div class="line">	public void synInMethod() &#123;</div><div class="line">		synchronized (this) &#123;</div><div class="line">			System.out.println(&quot;synInMethod begins&quot; + &quot;, time = &quot;</div><div class="line">					+ System.currentTimeMillis() + &quot;ms&quot;);</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	//使用object对象的锁，所以与当前调用对象的锁不冲突</div><div class="line">	public void synMethodWithObj() &#123;</div><div class="line">		synchronized (object) &#123;</div><div class="line">			System.out.println(&quot;synMethodWithObj begins&quot; + &quot;, time = &quot;</div><div class="line">					+ System.currentTimeMillis() + &quot;ms&quot;);</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	//调用的是类对象的锁</div><div class="line">	public static synchronized void increament() &#123;</div><div class="line">		System.out.println(&quot;class synchronized  time = &quot;</div><div class="line">				+ System.currentTimeMillis() + &quot;ms&quot;);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;volatile主要是告诉JVM当前在寄存器的变量是不稳定的，需要当前线程直接从内存中存取。主要的作用是保证一个变量在各个线程之间是直接可见的。</p>
<h3 id="变量的可见性"><a href="#变量的可见性" class="headerlink" title="变量的可见性"></a><strong>变量的可见性</strong></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valatile 是JDK中一个轻量级的保证变量可见性的标识，当一个变量前面添加了synchronized那么CPU读取这个变量的时候就不会在寄存器读取，直接从内存中读取，所以每个线程读取到的变量的值，都是当前变量的最新的值。</p>
<h3 id="非线程安全性"><a href="#非线程安全性" class="headerlink" title="非线程安全性"></a><strong>非线程安全性</strong></h3><p>volatile 保护的变量能够保证一个变量在多个线程之间可见，但是并不能保证这个变量在同一时刻只有一个线程来修改他，所以会出现经典的i++的问题。当多个线程修改同一个变量的时候同样会出现线程安全性的问题。</p>
<h3 id="顺序执行"><a href="#顺序执行" class="headerlink" title="顺序执行"></a><strong>顺序执行</strong></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;volatile能够保证在valatile变量之前的代码在valatile修饰的代码之前执行，由volatile修饰的代码之后的代码在voliate修饰的代码之后运行。</p>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">int a = 1;</div><div class="line">int b = 2;</div><div class="line">int c = 3;</div><div class="line">如果cpu分析得到 abc三个变量在后面的代码中并没有什么关联关系，CPU的执行顺序并不一定按照 abc的顺序执行</div><div class="line"></div><div class="line"></div><div class="line">int a = 1;</div><div class="line">volatile int b = 2;</div><div class="line">int c = 3;</div><div class="line">由于volatile修饰变量b，那么a一定在b之前被cpu执行，c一定在b之后被cpu执行</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> Java并发编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发编程 </tag>
            
            <tag> synchronized </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL常见问题总结分析]]></title>
      <url>/2016/06/02/mysql-common-problems/</url>
      <content type="html"><![CDATA[<h1 id="limit和offset-VS-between和and"><a href="#limit和offset-VS-between和and" class="headerlink" title="limit和offset VS between和and"></a>limit和offset VS between和and</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在项目中经常遇到分页的操作，最常见的做法是使用limit和offset进行数据库的查询，这样在数据量比较小的时候没有什么问题，也显示不出来什么问题，但是在数据量比较大的时候，就会出现查询速度缓慢的情况，这个时候可替代的方案是使用between和and操作来替换之，具体的原因如下：</p>
<h2 id="limit和offset的执行过程"><a href="#limit和offset的执行过程" class="headerlink" title="limit和offset的执行过程"></a>limit和offset的执行过程</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当使用limit和offset分页查询指定下标的数据时，会进行计数也就是数出limit条记录，然后在将limit之后的offset条数据取出，所以limit和offset的执行过程中有一个遍历的操作，所以时间复杂度为o(n)，这也就解释了为什么 当数据量很大的时候你会发现越到最后分页操作越慢，原因就是越到最后遍历的数量越多造作越慢。</p>
<h2 id="between和and的执行过程"><a href="#between和and的执行过程" class="headerlink" title="between和and的执行过程"></a>between和and的执行过程</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;分页操作的另外一种可替代方案是自己计算出分页的主键ID区间，然后利用between和and来进行查找，这样在查找就走的是主键索引按照B+树存储的主键索引的查找时间复杂度是log(n)</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">分析了两种分页操作的时间复杂度可以看出，第一个时间复杂度是o(n)第二个时间复杂度是log(n)也就是数据量为1000的时候，两者的查询效率会相差10倍，如果数据量是一亿的时候，两者的查询效率就会相差一万倍。</font>  </p>
<h1 id="为什么要求表的设计有自增ID"><a href="#为什么要求表的设计有自增ID" class="headerlink" title="为什么要求表的设计有自增ID"></a>为什么要求表的设计有自增ID</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在MySQL的innodb存储引擎中，DBA都要求每张表都必须显示声明一个自增的主键ID，这是什么原因呢？MySQL的innodb存储引擎在存储数据的时候是按照B+树存储的（也称为聚簇索引），而B+树的key就是自增Id，所以一般都会要求每一张表都会有一个自增ID，既然这样那如果一张表没有自增ID是不是就会出现异常或者存储的结构会发生变化呢，当然不会MySQL考虑到这种情况，当一张表没有自增ID的时候，会自动建立一个隐藏的自增ID，来实现上述的存储。</p>
<h1 id="为啥DBA要求字段不能为null"><a href="#为啥DBA要求字段不能为null" class="headerlink" title="为啥DBA要求字段不能为null"></a>为啥DBA要求字段不能为null</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在每次进行sql申请的时候，dba都会要求显示的为每个字段添加“not nul default ‘XXXXX’ ”  这又是为什么呢？</p>
<ul>
<li>null是占用空间的，在大家的固有思想里一般认为null是不占有空间的，但是事实是MySQL在存储null的时候会有一个位来标识这个字段是否为null</li>
<li>也是最主要的原因MySQLnull值会影响索引的效率</li>
<li>在使用MySQL分区的时候如果分区字段为null，那么对于不同的分区条件，就必须采用不同的特殊处理方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hash分区将null作为0特殊处理</div><div class="line">Range分区null作为分区最小值加入到最小的分区中</div><div class="line">list分区，必须指定null在哪个分区中 否则会报错</div></pre></td></tr></table></figure>
</li>
</ul>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看到上面两点大家也就知道了null的危害，如果你的字段可以确保没有上述的危害，理论上是不需要not null 的约束，但是为啥dba会强制要求not null 我猜应该是两方面的考虑 1 很多人不知道以上两点 2 dba没法确认你的字段是否存在上述危害，所以干脆一刀切，所有的字段加非空约束，毕竟这样带来的好处比危害多很多。</p>
<h1 id="varchar-20-VS-varchar-12"><a href="#varchar-20-VS-varchar-12" class="headerlink" title="varchar(20) VS varchar(12)"></a>varchar(20) VS varchar(12)</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在申请SQL的时候对于字符串类型，大家一般都会采用varchar类型，并且对长度进行估计，那么varchar(20)和varchar(12)到底有什么区别呢？</p>
<ul>
<li>varchar(20)中的20是20个字节，并且会有一个字节来存储末尾标识位，也就是说最多存储19个字节（最多19个拉丁字符）对于采用utf-8编码的汉字来说一个汉字一般占用2-3个字节，所有存储汉字的个数为6-9个（在MySQL5.1之后，varchar也是基于字符来表示的，所以varchar20就可以直接存储20个汉字）</li>
<li>varchar(256)和4.1基本一致只是末尾标识位是两个字节</li>
<li>4.3 varchar(20)和varchar(12)的区别：</li>
</ul>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先varchar(20)和varchar(12)对于同一个字符串在磁盘上存储的空间是相同，对于abc字符串而言就是占用四个字节。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;既然如上所说那么岂不是越到越好，这样既不占用磁盘空间又方便扩展可以兼容任何极端的情况。不是这样的。首先MySQL对一张表的varchar有一个长度的限制，其次在真正处理字符串的时候，是需要将字符串读取到内存的，而读取到内存是需要分配空间的，初始分配的空间的大小就是varchar定义的长度，所以，虽然两者在存储磁盘没有差别，但是在内存处理的时候第一个会占用更多的内存，所以我们在定义字符串的长度的时候，应该是根据业务情况选择一个合适的长度，</p>
<h1 id="int-4-VS-int-10"><a href="#int-4-VS-int-10" class="headerlink" title="int(4) VS int(10)"></a>int(4) VS int(10)</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看了varchar中两者的区别那么，对于int类型而言这两种情况又有什么区别呢，是不是int(4)占用的空间比int(10)要小呢？实际的情况是int(4)和int(10)在磁盘的处理和占用的内存空间上面没有任何区别，他们唯一的区别是在客户端查看时候的区别，int(4)表示在客户端查看的时候，只显示4个字节的宽度，Int(10)显示的是10个字节的宽度    </p>
<h1 id="char的变与不变"><a href="#char的变与不变" class="headerlink" title="char的变与不变"></a>char的变与不变</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在常识中大家都任务char的长度是不变的，如果填充的字符不够会自动进行补零处理，但是是想这样一种情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">char(20)  encoding=utf-8  可以存储20个中文字符</div><div class="line">char(20)  encoding=latin  可以存储20个英文字符</div><div class="line">第一个可能占用40个字节</div><div class="line">第二个可能占用20个字节</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所有大家常说的char类型长度是不变的是指字符个数不变，其实占用的字节个数是变化的</p>
]]></content>
      
        <categories>
            
            <category> Mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL常见问题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用try-with-resource改进代码异常处理机制]]></title>
      <url>/2016/06/01/try-with-resource/</url>
      <content type="html"><![CDATA[<h1 id="JDK1-7之前标准的异常处理机制"><a href="#JDK1-7之前标准的异常处理机制" class="headerlink" title="JDK1.7之前标准的异常处理机制"></a>JDK1.7之前标准的异常处理机制</h1><p>  在JAVA7之前，程序中必须顺次打开或者关闭资源，如果只打开了资源没有关闭资源。就会出现资源泄漏问题，线上代码运行时间越久，程序的效率就会越低。但是，资源的关闭不仅繁琐而且很容易出问题。</p>
<h2 id="常见的关闭资源的问题。"><a href="#常见的关闭资源的问题。" class="headerlink" title="常见的关闭资源的问题。"></a>常见的关闭资源的问题。</h2><p>在如下关闭资源的finally语句中。如果在关闭resultSet对象的时候出现了异常，则后面的prepareStatement和connection对象都没法正常关闭。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.qunar.des.baofang.common;  </div><div class="line">  </div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;  </div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;  </div><div class="line">  </div><div class="line"><span class="keyword">import</span> java.sql.*;  </div><div class="line">  </div><div class="line"><span class="comment">/** </span></div><div class="line"> * Created by guochenglai on 5/24/16. </div><div class="line"> */  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DRIVER_CLASS = <span class="string">"com.mysql.jdbc.Driver"</span>;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">"jdbc:mysql://127.0.0.1:3306/test"</span> ;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER_NAME = <span class="string">"test"</span> ;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD = <span class="string">"test"</span> ;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SQL = <span class="string">"select * from test limit 1"</span>;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(MainClass.class);  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        testExecuteQueryByOld();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testExecuteQueryByOld</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            Class.forName(DRIVER_CLASS);  </div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;  </div><div class="line">            LOGGER.error(<span class="string">"can not find driver class"</span>,e);  </div><div class="line">            <span class="keyword">return</span>;  </div><div class="line">        &#125;  </div><div class="line">        Connection connection = <span class="keyword">null</span>;  </div><div class="line">        PreparedStatement preparedStatement = <span class="keyword">null</span>;  </div><div class="line">        ResultSet resultSet = <span class="keyword">null</span>;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            connection = DriverManager.getConnection(URL, USER_NAME, PASSWORD);  </div><div class="line">            preparedStatement = connection.prepareStatement(SQL);  </div><div class="line">            resultSet = preparedStatement.executeQuery();  </div><div class="line">            <span class="keyword">if</span> (resultSet.next()) &#123;  </div><div class="line">                System.out.println(resultSet.getObject(<span class="number">1</span>)+<span class="string">" : "</span>+resultSet.getObject(<span class="number">2</span>));  </div><div class="line">            &#125;  </div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </div><div class="line">            LOGGER.error(<span class="string">"execute sql cause exception  "</span>,e);  </div><div class="line">        &#125;<span class="keyword">finally</span> &#123;  </div><div class="line">            <span class="keyword">try</span> &#123;  </div><div class="line">                <span class="keyword">if</span> (resultSet != <span class="keyword">null</span>) &#123;  </div><div class="line">                    resultSet.close();   </div><div class="line">                &#125;  </div><div class="line">                <span class="keyword">if</span> (preparedStatement != <span class="keyword">null</span>) &#123;  </div><div class="line">                    preparedStatement.close();  </div><div class="line">                &#125;  </div><div class="line">                <span class="keyword">if</span> (connection!=<span class="keyword">null</span>) &#123;  </div><div class="line">                    connection.close();  </div><div class="line">                &#125;  </div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;  </div><div class="line">                    LOGGER.error(<span class="string">"close resource cause exception "</span>,e);  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">  </div><div class="line">        &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="正常关闭资源方法"><a href="#正常关闭资源方法" class="headerlink" title="正常关闭资源方法"></a>正常关闭资源方法</h2><p>如下的代码块可以认为是一个标准的关闭资源的方法。不论在哪里发生了异常，能够保证所有的资源正确关闭。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.qunar.des.baofang.common;  </div><div class="line">  </div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;  </div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;  </div><div class="line">  </div><div class="line"><span class="keyword">import</span> java.sql.*;  </div><div class="line">  </div><div class="line"><span class="comment">/** </span></div><div class="line"> * Created by guochenglai on 5/24/16. </div><div class="line"> */  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DRIVER_CLASS = <span class="string">"com.mysql.jdbc.Driver"</span>;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">"jdbc:mysql://127.0.0.1:3306/test"</span> ;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER_NAME = <span class="string">"test"</span> ;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD = <span class="string">"test"</span> ;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SQL = <span class="string">"select * from test limit 1"</span>;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(MainClass.class);  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        testExecuteQueryByOld();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testExecuteQueryByOld</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            Class.forName(DRIVER_CLASS);  </div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;  </div><div class="line">            LOGGER.error(<span class="string">"can not find driver class"</span>,e);  </div><div class="line">            <span class="keyword">return</span>;  </div><div class="line">        &#125;  </div><div class="line">        Connection connection = <span class="keyword">null</span>;  </div><div class="line">        PreparedStatement preparedStatement = <span class="keyword">null</span>;  </div><div class="line">        ResultSet resultSet = <span class="keyword">null</span>;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            connection = DriverManager.getConnection(URL, USER_NAME, PASSWORD);  </div><div class="line">            preparedStatement = connection.prepareStatement(SQL);  </div><div class="line">            resultSet = preparedStatement.executeQuery();  </div><div class="line">            <span class="keyword">if</span> (resultSet.next()) &#123;  </div><div class="line">                System.out.println(resultSet.getObject(<span class="number">1</span>)+<span class="string">" : "</span>+resultSet.getObject(<span class="number">2</span>));  </div><div class="line">            &#125;  </div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </div><div class="line">            LOGGER.error(<span class="string">"execute sql cause exception  "</span>,e);  </div><div class="line">        &#125;<span class="keyword">finally</span> &#123;  </div><div class="line">            <span class="keyword">if</span> (resultSet != <span class="keyword">null</span>) &#123;  </div><div class="line">                <span class="keyword">try</span> &#123;  </div><div class="line">                    resultSet.close();  </div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;  </div><div class="line">                    LOGGER.error(<span class="string">"close result cause exception "</span>,e);  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">if</span> (preparedStatement != <span class="keyword">null</span>) &#123;  </div><div class="line">                <span class="keyword">try</span> &#123;  </div><div class="line">                    preparedStatement.close();  </div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;  </div><div class="line">                    LOGGER.error(<span class="string">"close preparedStatement cause exception "</span>,e);  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;  </div><div class="line">                <span class="keyword">try</span> &#123;  </div><div class="line">                    connection.close();  </div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;  </div><div class="line">                    LOGGER.error(<span class="string">"close connection cause exception "</span>,e);  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="使用try-with-resource改进异常代码的处理机制"><a href="#使用try-with-resource改进异常代码的处理机制" class="headerlink" title="使用try-with-resource改进异常代码的处理机制"></a>使用try-with-resource改进异常代码的处理机制</h1><p>JDK1.7中引入了try-with-resource机制，试图简化异常处理以及资源关闭等问题。由try-with-resource语句托管的资源文件，在离开try-with-resource语句块的时候，会依次进行关闭，实现的方法和1.2中的方法基本一样。但是从语法层面上看，不再需要程序员手动去关闭资源，使得程序更加简洁。</p>
<h2 id="try-with-resource语句示例"><a href="#try-with-resource语句示例" class="headerlink" title="try-with-resource语句示例"></a>try-with-resource语句示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.qunar.des.baofang.common;  </div><div class="line">  </div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;  </div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;  </div><div class="line">  </div><div class="line"><span class="keyword">import</span> java.sql.*;  </div><div class="line">  </div><div class="line"><span class="comment">/** </span></div><div class="line"> * Created by guochenglai on 5/24/16. </div><div class="line"> */  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DRIVER_CLASS = <span class="string">"com.mysql.jdbc.Driver"</span>;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">"jdbc:mysql://127.0.0.1:3306/test"</span> ;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER_NAME = <span class="string">"test"</span> ;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD = <span class="string">"test"</span> ;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SQL = <span class="string">"select * from test limit 1"</span>;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(MainClass.class);  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        testExecuteQueryNew();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 使用try-with-resources块改进异常处理代码 </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testExecuteQueryNew</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            Class.forName(DRIVER_CLASS);  </div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;  </div><div class="line">            LOGGER.error(<span class="string">"can not find driver class"</span>,e);  </div><div class="line">            <span class="keyword">return</span>;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">try</span> (Connection connection = DriverManager.getConnection(URL, USER_NAME, PASSWORD); PreparedStatement preparedStatement = connection.prepareStatement(SQL); ResultSet resultSet = preparedStatement.executeQuery();) &#123;  </div><div class="line">  </div><div class="line">            <span class="keyword">if</span> (resultSet.next()) &#123;  </div><div class="line">                System.out.println(resultSet.getObject(<span class="number">1</span>)+<span class="string">" : "</span>+resultSet.getObject(<span class="number">2</span>));  </div><div class="line">            &#125;  </div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </div><div class="line">            e.printStackTrace();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用try-with-resource方法之后有如下两个好处：</p>
<ul>
<li>代码变得简洁可读</li>
<li>所有的资源都托管给try-with-resource语句，能够保证所有的资源被正确关闭，再也不用担心资源关闭的问题。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 异常处理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo-GitHub-Page-搭建个人博客全过程详解]]></title>
      <url>/2016/05/31/hexo-github-pages-blog/</url>
      <content type="html"><![CDATA[<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><h2 id="框架的选取"><a href="#框架的选取" class="headerlink" title="框架的选取"></a>框架的选取</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上大学的时候，自己曾经折腾过一个网站，采用MySQL+Java+JS编写的，开发成本很大，而且还要买服务器，运营成本也很大，后来就下线了。然后开始在CSDN上面写博客，但是写了一段时间发现CSDN的用户体验非常不好。比如：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 文章需要审核，而且我猜测还是人工审核，写一篇文章发布上线之后少则几分钟可以看到，多则几小时才能看到。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 文章不能在线预览。500的错误特别多。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3 会在你的文章上面添加广告。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所以又准备自己搭建一个博客系统。希望能够开发成本和运营成本都比较小。最后终于找到了Hexo+GitHub Pages的搭建方式。他的优点如下：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 不需要你编写后端代码。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 只需要你略懂html即可。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3 在GitHub Pages上面有免费的300M空间。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4 代码开源，并且有各路大神提供自己的开源样式。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5 支持MarkDown语法。</p>
<h2 id="整体运行原理"><a href="#整体运行原理" class="headerlink" title="整体运行原理"></a>整体运行原理</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hexo是基于node.js的，所有的文章最后都被编译成了静态的HTML，所以你搭建一个博客系统并发布到线上从整体来看只需要如下三步：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 在本地搭建一个博客系统。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 在本地编写博客并编译<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3 将本地编译的文件提交到GitHub Pages上。</p>
<h2 id="需要注意的问题"><a href="#需要注意的问题" class="headerlink" title="需要注意的问题"></a>需要注意的问题</h2><font color="red">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>因为Hexo所有的博客编写都是在本地完成，然后编译提交到线上，所以你所有的劳动成果都在本地机器，请记住在你每次比较大的改动网站之前进行备份。最好能够定时进行备份。</strong></font>

<h1 id="本地博客搭建"><a href="#本地博客搭建" class="headerlink" title="本地博客搭建"></a>本地博客搭建</h1><p>1 下载并按照node.js，这个可以直接去官网下载，然后双击按照，一路点击“下一步”最后到安装完成即可。<br>2 使用node.js安装hexo<br>   npm是node的包管理工具，所以所有按照node插件的地方都是用npm命令来按照。如果你按照的插件被墙了，请切换到淘宝的数据源cnpm。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g 或者 npm install -g hexo</div></pre></td></tr></table></figure></p>
<p>3 在你的本地初始化一个hexo工程<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init guochenglai.github.io</div></pre></td></tr></table></figure></p>
<p>4 进入hex工程<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd guochenglai.github.io</div></pre></td></tr></table></figure></p>
<p>6 安装hexo的依赖<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure></p>
<p>7 编译整个项目<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate</div></pre></td></tr></table></figure></p>
<p>8 运行整个项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server</div></pre></td></tr></table></figure></p>
<p>快捷命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">hexo g == hexo generate</div><div class="line">hexo d == hexo deploy</div><div class="line">hexo s == hexo server</div><div class="line">hexo n == hexo new</div><div class="line">还能组合使用，如：</div><div class="line">hexo d -g</div></pre></td></tr></table></figure></p>
<p>9 浏览器测试<br>    <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a><br>出现以下界面则表示本地站点搭建成功。<br><img src="http://7xutce.com1.z0.glb.clouddn.com/hexo%2Fnew_hexo_server.png" alt=""></p>
<h1 id="配置maupassant样式"><a href="#配置maupassant样式" class="headerlink" title="配置maupassant样式"></a>配置maupassant样式</h1><p>1 安装maupassant的主题和渲染器<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</div><div class="line"></div><div class="line">npm install hexo-renderer-jade --save</div><div class="line">npm install hexo-renderer-sass --save</div></pre></td></tr></table></figure></p>
<p>2  将<font color="red">Hexo</font>目录下的_config.yml的 theme字段由landscape改为maupassant然后重新执行 hexo server会发现页面的样式变为如下图所示：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/hexo%2Fhexo_maupassant_init.png" alt=""><br>3  将<font color="red">Hexo</font>目录下的 _config.yml的 language 字段设置为 zh-CN（<font color="red">注意要有空格</font>）然后重新执行hexo server会发现页面会变成中文。</p>
<p>至此你的博客基本功能已经完整了。如果你想将就着直接用，就可以直接查看“部署到GitHub Pages”如果你想丰富一下网站的功能可以继续查看“定制maupassant”</p>
<h1 id="定制maupassant"><a href="#定制maupassant" class="headerlink" title="定制maupassant"></a>定制maupassant</h1><p>1 为网站添加评论功能<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本网站的所有评论功能都托管给了“多说”，要想添加评论需要如下的几步:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.1 注册多说 <a href="http://duoshuo.com/" target="_blank" rel="external">http://duoshuo.com/</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.2 将多说分配给你的用户名添加到<font color="red">maupassant</font>配置目录下的_config.yml中，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">duoshuo: guochenglai ##这里“guochenglai”是我申请的多说用户名，你改成你自己的即可。</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.3 重新编译之后重启服务就可以使用评论功能了。<br>2 为搜索框添加本地搜索功能<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.1 修改<font color="red">maupassant</font>配置目录下的_config.yml如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self_search: true ## Use a jQuery-based local search engine, true/false.</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.2 安装  <a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="external">hexo-generator-search</a> 执行如下命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-search --save</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.3 重启服务然后在搜索框就可以搜索本站点的数据了。<br>3 添加关于我的页面<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.1 执行如下命令创建页面<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo  new page “about"</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.2 页面的路径会在 ~/hexo/guochenglai.github.io/source/about/index.md<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.3 修改页面到自己喜欢的样式<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.4 重新编译运行项目就可以看到关于我的页面了<br>4 添加谷歌分析<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.1 使用 Google 帐号登录 <a href="https://accounts.google.com/ServiceLogin?service=analytics&amp;passive=1209600&amp;continue=https://www.google.com/analytics/web/provision?authuser%3D0%23provision%2FSignUp%2F&amp;followup=https://www.google.com/analytics/web/provision?authuser%3D0#identifier" target="_blank" rel="external">Google Analytics</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.2 根据提示进行注册操作，完成注册后通过 <font color="red">管理 - 选择用户 - 选择媒体 - 跟踪信息 - 跟踪代码</font> 找到谷歌给你分配的”跟踪 ID”<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.3 修改 <font color="red">Hexo</font> 下的_config.yml<br>配置文件，设置 google_analytics如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">google_analytics: UA-7263826 ## 这里填上你的谷歌ID</div></pre></td></tr></table></figure></p>
<p>5 404页面定位到腾讯公益<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在 <font color="red">hexo/source</font> 目录下创建 <font color="red">404.html</font> 文件或者 <font color="red">404.md</font> 文件。内容如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">layout: false</div><div class="line">title: "页面不存在"</div><div class="line">---</div><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://www.qq.com/404/search_children.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">homePageUrl</span>=<span class="string">"http://guochenglai.com"</span> <span class="attr">homePageName</span>=<span class="string">"回到首页"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>6 支持Rss订阅<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安装hexo-generator-fee<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-feed --save</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;修改 hexo 配置 #RSS订阅<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">plugin:</div><div class="line">- hexo-generator-feed</div><div class="line">#Feed Atom</div><div class="line">feed:</div><div class="line">  type: atom</div><div class="line">  path: atom.xml</div><div class="line">  limit: 20</div><div class="line">其中，feed 配置是可选项</div></pre></td></tr></table></figure></p>
<p>7 博客模板配置<br> 模板文件的路径如下：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/hexo/guochenglai.github.io/scaffolds/post.md</div></pre></td></tr></table></figure></p>
<p> 修改内容如下：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: &#123;&#123; title &#125;&#125;</div><div class="line">date: &#123;&#123; date &#125;&#125;</div><div class="line">toc: true</div><div class="line">categories:</div><div class="line">tags:</div><div class="line">description:</div><div class="line">---</div></pre></td></tr></table></figure></p>
<h1 id="部署到GitHub-Pages"><a href="#部署到GitHub-Pages" class="headerlink" title="部署到GitHub Pages"></a>部署到GitHub Pages</h1><p>1 在 <a href="https://github.com/" target="_blank" rel="external">GitHub</a> 上面创建一个项目<br>2 创建项目如下：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/hexo%2Fhexo_init_github.png" alt=""></p>
<p><font color="red">注意:<br>&nbsp;&nbsp;&nbsp;&nbsp;1 项目的名字必须为：xxx.github.io<br>&nbsp;&nbsp;&nbsp;&nbsp;2 必须选择public<br></font><br>3 安装并配置Git这个可以在网上搜索<br>4 安装 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="external">hexo-deployer-git</a>，安装命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<p>5 配置<font color="red">Hexo</font>目录下的_config.yml如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: &lt;repository url&gt;</div><div class="line">  branch: [branch]</div><div class="line">  message: [message]</div></pre></td></tr></table></figure></p>
<p>6 在本地运行编译，并提交，命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g -d</div></pre></td></tr></table></figure></p>
<p>7 工程提交到github之后可以在浏览器输入：test.github.io就可以在线访问自己的项目了。</p>
<h1 id="配置阿里云域名"><a href="#配置阿里云域名" class="headerlink" title="配置阿里云域名"></a>配置阿里云域名</h1><h1 id="七牛云托管图片"><a href="#七牛云托管图片" class="headerlink" title="七牛云托管图片"></a>七牛云托管图片</h1>]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> GitHub Pages </tag>
            
            <tag> 搭建博客 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mac homeBrew 管理软件]]></title>
      <url>/2016/05/30/mac-homeBrew-software-manager/</url>
      <content type="html"><![CDATA[<h2 id="homeBrew介绍"><a href="#homeBrew介绍" class="headerlink" title="homeBrew介绍"></a>homeBrew介绍</h2><p>  Homebrew是Mac系统上强大的包管理器，为软件的安装提供了类似ubuntu系统上的<font color="red">apt-get</font>工具，他具有以下优点：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 可以自动解决参数依赖问题<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 安装软件不需要加sudo<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3 提供了一键式安装<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;homebrew官方地址：<a href="http://brew.sh" target="_blank" rel="external">http://brew.sh</a></p>
<h2 id="homeBrew安装"><a href="#homeBrew安装" class="headerlink" title="homeBrew安装"></a>homeBrew安装</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安装home brew 只需要打开shell终端，输入以下命令：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby -e <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span></div></pre></td></tr></table></figure></p>
<h2 id="homeBrew使用介绍"><a href="#homeBrew使用介绍" class="headerlink" title="homeBrew使用介绍"></a>homeBrew使用介绍</h2><p><font color="red"><strong>本文所有的软件包以git为例。</strong></font><br>1 bew安装git<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install git</div></pre></td></tr></table></figure></p>
<p>2 bew查找git软件包<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew search git</div></pre></td></tr></table></figure></p>
<p>3 brew列出所有安装的软件包<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew list</div></pre></td></tr></table></figure></p>
<p>4 brew删除git软件包<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew remove git</div></pre></td></tr></table></figure></p>
<p>5 brew查看软件包信息<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew info git</div></pre></td></tr></table></figure></p>
<p>6 brew列出软件包的依赖关系<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew deps git</div></pre></td></tr></table></figure></p>
<p>7 更新brew<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew update</div></pre></td></tr></table></figure></p>
<p>……</p>
]]></content>
      
        <categories>
            
            <category> Mac常用技巧 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac常用技巧 </tag>
            
            <tag> Mac环境配置 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mac 常用软件推荐]]></title>
      <url>/2016/05/30/mac-suggest-software/</url>
      <content type="html"><![CDATA[<p><strong>1 intellij idea</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;简介：Java编程的利器，用完idea之后绝对不会再想用eclipse，但是从eclipse转入idea的过程比较艰难，目前有社区版和企业版本，一般来说社区版本就足够日常的学习和开发了，企业版本加入了spring等企业开发框架的支持，但是价格比较贵。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;官方下载地址：<a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="external">https://www.jetbrains.com/idea/download/</a><br><a id="more"></a><br><strong>2 PyCharm</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;简介：Python编程利器，和idea一样同属jetbrains公司开发的软件，风格和idea类似，对于经常写一些shell和python脚本的开发者来说，这款工具必不可少。但是同样价格不菲<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;官方下载地址：<a href="https://www.jetbrains.com/pycharm/download/" target="_blank" rel="external">https://www.jetbrains.com/pycharm/download/</a><br><strong>3 Sublime Text</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;简介：sublime是目前最有良心的一款文本编辑软件，虽然是收费的，但是可以一直免费使用，在文本编辑，json,xml,js,css,等处理能力上面，个人觉得无可替代，同时还支持海量插件的安装，能够对不同的编程语言进行关键字高亮显示<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;官方下载地址：<a href="http://www.sublimetext.com/2" target="_blank" rel="external">http://www.sublimetext.com/2</a><br><strong>4 MacDown</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;简介：macDown是一款支持markdown语言的编辑器，支持所有语言的关键字高亮，以及常用的快捷键。并且开源永久免费<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;官方下载地址：<a href="http://macdown.uranusjr.com/" target="_blank" rel="external">http://macdown.uranusjr.com/</a><br><strong>5 Evernote（印象笔记）</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;简介：Evernote是一款比较好的记笔记软件，还专门为国内开发了国内版，国内版和国际版没有什么区别，只不过是服务器放在中国。个人觉得Evernote处理强大的编辑功能之外，他开发的浏览器“剪藏”插件，才是他最吸引人的地方。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;官方下载地址：<a href="https://evernote.com/intl/zh-cn/download/" target="_blank" rel="external">https://evernote.com/intl/zh-cn/download/</a><br><strong>6 skitch</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;简介：Evernote公司出品的，可以和Evernote配合也可以单独使用的截图工具<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;官方下载地址：<a href="https://itunes.apple.com/us/app/skitch-snap.-mark-up.-share./id425955336?mt=12s" target="_blank" rel="external">https://itunes.apple.com/us/app/skitch-snap.-mark-up.-share./id425955336?mt=12</a><br><strong>7 IHost</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;简介：host管理工具，目前免费版本支持四组host的配置，可以在工具栏自由切换，非常方便<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;官方下载地址：支持app sotre下载<br><strong>8 WeChat(微信)</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;简介：界面简洁大方，没有广告骚扰<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;官方下载地址：<a href="https://itunes.apple.com/us/app/wechat/id836500024?mt=12" target="_blank" rel="external">https://itunes.apple.com/us/app/wechat/id836500024?mt=12</a><br><strong>9 Sequel Pro</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;简介：mac下的数据库客户端，免费版本，本人曾经用过破解的Navicat，但是感觉还没有sequel pro好用，而且用破解软件良心不安，所以推荐这款<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;官方下载地址：<a href="http://www.sequelpro.com/download" target="_blank" rel="external">http://www.sequelpro.com/download</a><br><strong>10 ShadowsocksX</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;简介：最好用的翻墙工具，价格公道，服务文档，本人以前使用过红杏10块钱一个月，但是后来浏览器被墙了，交了一年的钱只用了3个月。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;官方下载地址：<a href="http://mac.softpedia.com/get/Internet-Utilities/shadowsocks-gui.shtml" target="_blank" rel="external">http://mac.softpedia.com/get/Internet-Utilities/shadowsocks-gui.shtml</a><br><strong>11 XMind</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;简介：思维导图，相信很多人在windows都用过，在mac还是免费的<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;官方下载地址：<a href="http://www.xmind.net/download/mac/" target="_blank" rel="external">http://www.xmind.net/download/mac/</a><br><strong>12 OmniGraffle</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;简介：类似windows中微软出的那个viso画图工具，但是价格不菲。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;官方下载地址：<a href="https://www.omnigroup.com/download/" target="_blank" rel="external">https://www.omnigroup.com/download/</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;教程：我在CSDN转载过一个教程很适合入门：<a href="http://blog.csdn.net/gcl272633743/article/category/6225952" target="_blank" rel="external">http://blog.csdn.net/gcl272633743/article/category/6225952</a><br><strong>13 beyond diff</strong><br>BeyondDiff的mac版本。<br>下载地址<a href="http://www.scootersoftware.com/download.php" target="_blank" rel="external">http://www.scootersoftware.com/download.php</a></p>
<p><strong>14 Office</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;简介：word，excel ,ppt不用过多介绍了吧<br><strong>15 Thunder(迅雷)</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;简介：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 有一个mac软件推荐中心，上面的软件都还不错。但是软件比较旧，建议官方去下载。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 整合了电影天堂，上面追美剧挺好，<br><strong>16 QIY(爱奇艺)</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看视频还是不错的，在mac系统下面貌似没广告。</p>
<p>持续更新中。。。。。。。。。。。。。。。。。</p>
]]></content>
      
        <categories>
            
            <category> Mac常用技巧 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac常用技巧 </tag>
            
            <tag> Mac软件推荐 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mac/ubuntu/linux 配置sudo免密码]]></title>
      <url>/2016/05/30/mac-ubuntu-linux-sudo-nopass/</url>
      <content type="html"><![CDATA[<p>Mac/Ubuntu/Linux 配置sudo免密码只需要如下两部：<br>1 打开命令窗口输入如下命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo visudo 或者  sudo vi /etc/sudoers</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>2 替换 <code>#%admin  ALL=(ALL) ALL</code> 为 <br><code>%admin  ALL=(ALL) NOPASSWD: NOPASSWD: ALL</code></p>
]]></content>
      
        <categories>
            
            <category> Mac常用技巧 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac常用技巧 </tag>
            
            <tag> 免密码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[修改mac下文件的默认打开软件]]></title>
      <url>/2016/05/30/mac-change-default-file-opener/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在我们打开mac文件的时候，系统会提供一个默认的软件来打开这个文件。但是在很多时候mac系统对文件提供的默认打开软件并不是我们想要的。例如：我有一个index.jade文件，双击该文件的时候我想用sublime打开但是打开的软件确实Xcode，导致我每次都要选择jade文件，右击在open with中选择自己想要的软件。这样确实太麻烦。本文将提供三种方案来解决这个问题。用户选择任意一个方案即可。</p>
<h2 id="第一种方案–小白教程"><a href="#第一种方案–小白教程" class="headerlink" title="第一种方案–小白教程"></a>第一种方案–小白教程</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用操作界面修改文件的默认打开软件只需要如下三步：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 找到想要打开的文件，右击选择 “get info”，出现如下图所示的对话框。<br><img src="http://7xutce.com1.z0.glb.clouddn.com/mac%2Fmac_update_default_file_software.png?imageView2/2/w/200" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 找到open with 如图红色方框，浏览找到目标软件。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3 关闭对话框，文件就会默认以你选择的软件打开。</p>
<h2 id="第二种方案–命令行重度用户教程"><a href="#第二种方案–命令行重度用户教程" class="headerlink" title="第二种方案–命令行重度用户教程"></a>第二种方案–命令行重度用户教程</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实mac系统提供了一个命令行工具来打开各种软件。例如：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">open .  # 打开当前文件夹</div><div class="line">open test.txt # 以默认软件打开test.txt文件</div><div class="line">open -a MacDown test.md #以MacDown软件打开test.md文件</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;open命令可以帮助以任何的形式打开一个指定软件。但是每次需要使用该软件的软件名，使用其他略麻烦。下面提供了一个比较好的方案，执行如下命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ln -s /Applications/Sublime\ Text\ 2.app/Contents/SharedSupport/bin/subl /usr/local/bin/sublime</div><div class="line">ln -s /Applications/MacDown.app/Contents/SharedSupport/bin/macdown /usr/local/bin/macdown</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那么以后如果想要用sublime打开一个文件，可以使用如下命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sublime test.txt</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果想要用MacDown打开一个文件，可以使用如下的命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">macdown test.md</div></pre></td></tr></table></figure></p>
<h2 id="第三种方案–爱钻研用户教程"><a href="#第三种方案–爱钻研用户教程" class="headerlink" title="第三种方案–爱钻研用户教程"></a>第三种方案–爱钻研用户教程</h2><p>郑重介绍一款软件duti:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;duti官方文档：<a href="http://duti.org/documentation.html" target="_blank" rel="external">http://duti.org/documentation.html</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;duti的github下载地址：<a href="https://github.com/moretension/duti/releases/tag/duti-1.5.3" target="_blank" rel="external">https://github.com/moretension/duti/releases/tag/duti-1.5.3</a><br>duti提供了一种修改文件默认打开软件的新方法，首先给读者一个直观的感受：<br><strong>使用duti让所有对txt文件的操作都默认使用sublime</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">duti -s com.sublimetext.2 public.plain-text all</div></pre></td></tr></table></figure></p>
<p><strong>上面的命令行可以这样理解：</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">duti -s [软件的唯一标识] [文件的唯一标识] [软件对文件的操作权限]</div></pre></td></tr></table></figure></p>
<p>那么软件唯一标识，文件唯一标识，软件对文件的操作权限又如何理解呢，请看下文：<br>1 软件唯一标识（Boundle ID）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;软件唯一标识是Mac系统为，每个软件提供的唯一标识，可以使用如下的命令获取一个软件的唯一标识：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MacBook-Pro-3:_posts guochenglai$ osascript -e 'id of app "Sublime Text 2"'</div><div class="line">com.sublimetext.2</div></pre></td></tr></table></figure></p>
<p>2 文件的唯一标识（UTI）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UTI(Uniform type identifier)是mac系统提供的唯一标识，可以使用如下的命令获取一个文件的唯一标识：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">MacBook-Pro-3:source guochenglai$ mdls 404.html</div><div class="line">_kMDItemOwnerUserID            = 501</div><div class="line">kMDItemContentCreationDate     = 2016-05-25 12:53:53 +0000</div><div class="line">kMDItemContentModificationDate = 2016-05-25 12:53:53 +0000</div><div class="line">kMDItemContentType             = "public.html"</div><div class="line">kMDItemContentTypeTree         = (</div><div class="line">    "public.html",</div><div class="line">    "public.text",</div><div class="line">    "public.data",</div><div class="line">    "public.item",</div><div class="line">    "public.content"</div><div class="line">)</div><div class="line">kMDItemDateAdded               = 2016-05-25 12:53:53 +0000</div><div class="line">kMDItemDisplayName             = "404.html"</div><div class="line">kMDItemFSContentChangeDate     = 2016-05-25 12:53:53 +0000</div><div class="line">kMDItemFSCreationDate          = 2016-05-25 12:53:53 +0000</div><div class="line">kMDItemFSCreatorCode           = ""</div><div class="line">kMDItemFSFinderFlags           = 0</div><div class="line">kMDItemFSHasCustomIcon         = (null)</div><div class="line">kMDItemFSInvisible             = 0</div><div class="line">kMDItemFSIsExtensionHidden     = 0</div><div class="line">kMDItemFSIsStationery          = (null)</div><div class="line">kMDItemFSLabel                 = 0</div><div class="line">kMDItemFSName                  = "404.html"</div><div class="line">kMDItemFSNodeCount             = (null)</div><div class="line">kMDItemFSOwnerGroupID          = 20</div><div class="line">kMDItemFSOwnerUserID           = 501</div><div class="line">kMDItemFSSize                  = 366</div><div class="line">kMDItemFSTypeCode              = ""</div><div class="line">kMDItemKind                    = "HTML document"</div><div class="line">kMDItemLogicalSize             = 366</div><div class="line">kMDItemPhysicalSize            = 4096</div></pre></td></tr></table></figure></p>
<p>可以看到 html文件的唯一标识是”public.html”<br><br>3 软件对文件的造作权限<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;软件对文件的操作权限如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">all #该软件拥有该文件的所有操作权限</div><div class="line">viewer #该软件拥有该文件的读权限</div><div class="line">editor #该软件拥有该文件的写权限</div><div class="line">shell #该软件拥有该文件的执行权限</div><div class="line">none #该软件对该文件没有权限</div></pre></td></tr></table></figure></p>
<p>通过三步的分析 <code>duti -s com.sublimetext.2 public.plain-text all</code>就不用再解释了吧！！！</p>
]]></content>
      
        <categories>
            
            <category> Mac常用技巧 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac常用技巧 </tag>
            
            <tag> Mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java和Spring发送邮件]]></title>
      <url>/2016/05/30/java-spring-send-mail/</url>
      <content type="html"><![CDATA[<p>在我们的项目中，很多时候需要用到发送邮件的地方。网上也有一些发送邮件的教程。但是由于有的作者试图使发送邮件的系统比较完善。所以写的比较“曲折”，以至于让读者看到之后不知所云。本文将提炼出发送邮件的骨架。如果读者按照本文的内容开发自己的邮件系统，只需要如下六步即可：</p>
<h2 id="POM中添加如下的依赖"><a href="#POM中添加如下的依赖" class="headerlink" title="POM中添加如下的依赖"></a>POM中添加如下的依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </div><div class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </div><div class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </div><div class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="在项目的Resource目录中配置发送邮件的服务器信息"><a href="#在项目的Resource目录中配置发送邮件的服务器信息" class="headerlink" title="在项目的Resource目录中配置发送邮件的服务器信息"></a>在项目的Resource目录中配置发送邮件的服务器信息</h2><p>配置文件的名称为：mail.properties<br>配置文件的内容如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mail.host=xxx.xxx.xxx.com  </div><div class="line">mail.smtp.auth=false  </div><div class="line">mail.smtp.timeout=25000  </div><div class="line">mail.from=chenglai.guo@xxxx.com  </div><div class="line">  </div><div class="line">mail.to=xxxx@xxx.com  </div><div class="line">mail.cc=lori.zhang@xxx.com,kai.shao@xxx.co</div></pre></td></tr></table></figure></p>
<h2 id="添加spring邮件配置信息"><a href="#添加spring邮件配置信息" class="headerlink" title="添加spring邮件配置信息"></a>添加spring邮件配置信息</h2><p>配置文件的名称为：app-mail.xml<br>配置文件的内容如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;  </div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span>  </span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>  </div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span>  </div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  </span></div><div class="line">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd"&gt;  </div><div class="line">  </div><div class="line">    <span class="comment">&lt;!--system.properties文件中存有所需的信息--&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:mail.properties"</span> <span class="attr">ignore-unresolvable</span>=<span class="string">"true"</span>/&gt;</span>  </div><div class="line">  </div><div class="line">    <span class="comment">&lt;!--JavaMailSender的设定--&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mailSender"</span> <span class="attr">class</span>=<span class="string">"org.springframework.mail.javamail.JavaMailSenderImpl"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"$&#123;mail.host&#125;"</span>/&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javaMailProperties"</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span>  </div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"mail.smtp.auth"</span>&gt;</span>$&#123;mail.smtp.auth&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span>  </div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"mail.smtp.timeout"</span>&gt;</span>$&#123;mail.smtp.timeout&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line">  </div><div class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mailEntity"</span> <span class="attr">class</span>=<span class="string">"com.qunar.des.rank.model.mail.MailEntity"</span>&gt;</span>  </div><div class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"from"</span> <span class="attr">value</span>=<span class="string">"$&#123;mail.from&#125;"</span>/&gt;</span>  </div><div class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"to"</span> <span class="attr">value</span>=<span class="string">"$&#123;mail.to&#125;"</span>/&gt;</span>  </div><div class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cc"</span> <span class="attr">value</span>=<span class="string">"$&#123;mail.cc&#125;"</span>/&gt;</span>  </div><div class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="在根spring配置文件中引入改文件"><a href="#在根spring配置文件中引入改文件" class="headerlink" title="在根spring配置文件中引入改文件"></a>在根spring配置文件中引入改文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;import resource=&quot;app-mail.xml&quot;/&gt;</div></pre></td></tr></table></figure>
<h2 id="编写一个简单的发送邮件的类MailServiceImpl-java"><a href="#编写一个简单的发送邮件的类MailServiceImpl-java" class="headerlink" title="编写一个简单的发送邮件的类MailServiceImpl.java"></a>编写一个简单的发送邮件的类MailServiceImpl.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.qunar.des.rank.service.impl;  </div><div class="line">  </div><div class="line"><span class="keyword">import</span> com.qunar.des.rank.model.mail.MailEntity;  </div><div class="line"><span class="keyword">import</span> com.qunar.des.rank.service.MailService;  </div><div class="line"><span class="keyword">import</span> javax.mail.MessagingException;  </div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;  </div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;  </div><div class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSender;  </div><div class="line"><span class="keyword">import</span> org.springframework.mail.javamail.MimeMessageHelper;  </div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;  </div><div class="line"><span class="keyword">import</span> javax.annotation.Resource;  </div><div class="line">  </div><div class="line"><span class="comment">/** </span></div><div class="line"> * Created by chenglaiguo on 12/15/14. </div><div class="line"> */  </div><div class="line"><span class="meta">@Service</span>(<span class="string">"mailService"</span>)  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailServiceImpl</span> <span class="keyword">implements</span> <span class="title">MailService</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(MailServiceImpl.class);  </div><div class="line">  </div><div class="line">    <span class="meta">@Resource</span>  </div><div class="line">    <span class="keyword">private</span> JavaMailSender mailSender;  </div><div class="line">    <span class="meta">@Resource</span>(name = <span class="string">"mailEntity"</span>)  </div><div class="line">    <span class="keyword">private</span> MailEntity mailEntity;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">send</span><span class="params">(String subject, String content)</span> </span>&#123;  </div><div class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;  </div><div class="line">        MimeMessageHelper mm = <span class="keyword">this</span>.initMessageHelper(subject, content);  </div><div class="line">        <span class="keyword">if</span> (mm==<span class="keyword">null</span>)&#123;  </div><div class="line">            logger.error(<span class="string">"MailServiceImpl class send method send mail failure"</span>);  </div><div class="line">            <span class="keyword">return</span> flag;  </div><div class="line">        &#125;  </div><div class="line">        mailSender.send(mm.getMimeMessage());  </div><div class="line">        logger.info(<span class="string">"MailServiceImpl class send method send mail success"</span>);  </div><div class="line">        flag = <span class="keyword">true</span>;  </div><div class="line">        <span class="keyword">return</span> flag;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">private</span> MimeMessageHelper <span class="title">initMessageHelper</span><span class="params">(String subject, String content)</span> </span>&#123;  </div><div class="line">        MimeMessageHelper mm = <span class="keyword">null</span>;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            mm = <span class="keyword">new</span> MimeMessageHelper(mailSender.createMimeMessage(), <span class="keyword">true</span>, <span class="string">"UTF-8"</span>);  </div><div class="line">            mm.setFrom(mailEntity.getFrom());  </div><div class="line">            mm.setSubject(subject);<span class="comment">// 设置邮件主题  </span></div><div class="line">            mm.setText(content);<span class="comment">// 生成的邮件内容  </span></div><div class="line">            mm.setTo(mailEntity.getTo());<span class="comment">// 发送列表  </span></div><div class="line">            mm.setCc(mailEntity.getCc().split(<span class="string">","</span>));<span class="comment">// 抄送列表  </span></div><div class="line">        &#125; <span class="keyword">catch</span> (MessagingException e) &#123;  </div><div class="line">            logger.error(<span class="string">"MailServiceImpl class initMessageHelper method cause MessagingException : "</span>,e);  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> mm;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="编写一个测试类"><a href="#编写一个测试类" class="headerlink" title="编写一个测试类"></a>编写一个测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.qunar.des.rank.service;  </div><div class="line">  </div><div class="line"><span class="keyword">import</span> com.qunar.des.rank.TestBase;  </div><div class="line"><span class="keyword">import</span> com.qunar.des.rank.service.impl.MailServiceImpl;  </div><div class="line"><span class="keyword">import</span> org.junit.Test;  </div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  </div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertTrue;  </div><div class="line">  </div><div class="line"><span class="comment">/** </span></div><div class="line"> * Created by chenglaiguo on 12/15/14. </div><div class="line"> */  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailServiceTest</span> <span class="keyword">extends</span> <span class="title">TestBase</span> </span>&#123;  </div><div class="line">    <span class="meta">@Autowired</span>  </div><div class="line">    <span class="keyword">private</span> MailServiceImpl mailService;  </div><div class="line">  </div><div class="line">    <span class="meta">@Test</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSendMail</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;  </div><div class="line">        flag = mailService.send(<span class="string">"test"</span>,<span class="string">"test2"</span>);  </div><div class="line">        assertTrue(flag);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此一个简单的发送邮件的系统已经开发完成了。很简单吧！！！<br>附件：MailEntity.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.qunar.des.rank.model.mail.MailEntity;  </div><div class="line"><span class="comment">/** </span></div><div class="line"> * Created by guochenglai on 11/17/15. </div><div class="line"> */  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">MailEntity</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> String from =<span class="string">""</span>;  </div><div class="line">    <span class="keyword">private</span> String to=<span class="string">""</span>;  </div><div class="line">    <span class="keyword">private</span> String cc = <span class="string">""</span>;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFrom</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> from;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFrom</span><span class="params">(String from)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.from = from;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTo</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> to;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTo</span><span class="params">(String to)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.to = to;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCc</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> cc;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCc</span><span class="params">(String cc)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.cc = cc;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 邮件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL索引优化分析，SQL优化，慢查询分析]]></title>
      <url>/2016/05/29/mysql-index-analysis-sql-analysis/</url>
      <content type="html"><![CDATA[<h2 id="配置环境说明"><a href="#配置环境说明" class="headerlink" title="配置环境说明"></a><em>配置环境说明</em></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Mysql的版本信息：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_explian_db_version.png" alt="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;操作系统版本信息：<br>  <img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_explain_system_version.png?imageView2/2/w/400" alt=""></p>
<h2 id="索引的分析"><a href="#索引的分析" class="headerlink" title="索引的分析"></a><em>索引的分析</em></h2><h3 id="数据的准备"><a href="#数据的准备" class="headerlink" title="数据的准备"></a><em>数据的准备</em></h3><h4 id="数据库的建表SQL"><a href="#数据库的建表SQL" class="headerlink" title="数据库的建表SQL"></a><em>数据库的建表SQL</em></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表的说明：id是自增主键，name是唯一索引，age 是非唯一索引，desc无索引。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`index_test`</span> (  </div><div class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增ID'</span>,  </div><div class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'名字'</span>,  </div><div class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,  </div><div class="line">  <span class="string">`desc`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'描述'</span>,  </div><div class="line">  <span class="string">`status`</span> tinyint(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'状态'</span>,  </div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),  </div><div class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`uniq_name`</span> (<span class="string">`name`</span>),  </div><div class="line">  <span class="keyword">KEY</span> <span class="string">`idx_age`</span> (<span class="string">`age`</span>)  </div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 ;</div></pre></td></tr></table></figure></p>
<h4 id="表中测试数据"><a href="#表中测试数据" class="headerlink" title="表中测试数据"></a><em>表中测试数据</em></h4><p><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_explian_test_data.png" alt=""></p>
<h3 id="索引的分析-1"><a href="#索引的分析-1" class="headerlink" title="索引的分析"></a><em>索引的分析</em></h3><h4 id="使用explain查看sql的执行计划"><a href="#使用explain查看sql的执行计划" class="headerlink" title="使用explain查看sql的执行计划"></a><em>使用explain查看sql的执行计划</em></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在MySQL中可以在sql前面加上explain语句，来显示该条SQL的执行计划，输出内容如下：<img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_explian.png" alt=""></p>
<h4 id="explain详解"><a href="#explain详解" class="headerlink" title="explain详解"></a><em>explain详解</em></h4><h5 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a><em>select_type</em></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;select_type表示查询语句的类型，取值主要有以下几种:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;simple：表示是简单的单表查询<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;primary：表示子查询的外表<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;derived：派生表的查询<br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_select_type_derived.png" alt="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subquery: 子查询的内部第一个SQL<br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_select_type_subquery.png" alt="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;union：表示union操作被连接的表<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;union result：表示连接操作之后的结果表<br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_select_type_union.png" alt="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;depend union 表示子查询中union语句<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;depend subquery 表示子查询中生成的结果<br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_select_type_dependent_subquery_union_union_all.png" alt=""> </p>
<h5 id="table"><a href="#table" class="headerlink" title="table"></a><em>table</em></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当前SQL查询涉及到的表的表名，<font color="red">注意:这里有时候是中间结果表的表名，MySQL会按照自己的规则生成</font></p>
<h5 id="type"><a href="#type" class="headerlink" title="type"></a><em>type</em></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type的取值在很大的程度上反应了SQL的执行性能。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;按照性能由高到底，type的取值依次为：NULL，system，const，eq_reg，ref，range，index，ALL<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>NULL 不用查表，速度最快</em><br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_explian_null.png" alt="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>system 当表中只有一条数据的时候 type为system</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>const 常数查询 一般是根据唯一键或者主键等值查询</em><br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_explain_const.png" alt="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>eq_reg 表连接的时候 在b表查询出来的结果在a表这中按照唯一索引值查询一行</em><br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_explian_eq_ref.png" alt="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>reg 非唯一索引查询</em><br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_explain_ref.png" alt="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>range 使用唯一索引返回扫描</em><br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_explian_range.png" alt="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>index 扫描整个索引文件，例如覆盖索引的查询，效率只是比全表查询略快，因为索引文件一般比数据文件小，所以一次读入内存的索引数据更多，这样磁盘IO就会更少</em><br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_explain_full_index.png" alt="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>All 表示全表扫描，是效率最低的一种查询</em></p>
<h5 id="possible-key"><a href="#possible-key" class="headerlink" title="possible key"></a><em>possible key</em></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表示可能使用的索引，显示的顺序与表连接的顺序无关。</p>
<h5 id="key"><a href="#key" class="headerlink" title="key"></a><em>key</em></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表示MySQL执行本条sql选的索引的名字，可以通过force idex 和 ignore index 来强制改变sql执行所需要的索引。</p>
<h5 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a><em>key_len</em></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表示该条索引的占用的自己树，是根据索引字段的类型计算出来的，<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例如:int(11)索引长度是4<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;varchar(128)并且编码是U8，索引长度的计算方法为 ： 128*3+2 </p>
<h5 id="ref"><a href="#ref" class="headerlink" title="ref"></a><em>ref</em></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表示使用哪个列从表中选择行，取值有科恩个是const</p>
<h5 id="rows"><a href="#rows" class="headerlink" title="rows"></a><em>rows</em></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表示执行该条SQL必须扫描的行数</p>
<h5 id="extra"><a href="#extra" class="headerlink" title="extra"></a><em>extra</em></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;包含了MySQL生成执行计划的详细信息：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;distinct 查找唯一值，一旦找到就不在继续查找了（暂时没有想好例子）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;record 没有找到理想的索引<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use file sort 使用外排来排序  效率比较低<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use index 使用覆盖索引返回数据，没有扫描表<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use tempoary 使用临时表来组合返回数据 效率较低<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use where 使用where条件过滤返回的数据，在MySQL的存储引擎层没有过滤完数据，只能在MySQL服务层去过滤数据</p>
<h4 id="profiling详解"><a href="#profiling详解" class="headerlink" title="profiling详解"></a><em>profiling详解</em></h4><h5 id="开启profiling"><a href="#开启profiling" class="headerlink" title="开启profiling"></a><em>开启profiling</em></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为profiling是比较消耗资源的，所以一般的MySQL默认都关闭了profiling功能，并且profiling只是针对当前session有效，目前不支持全局的profiling，可以通过如下的命令查看并开发profiling功能：<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">SELECT</span> @@profiling  <span class="comment">-- 返回的结果如果是0 表示当前的session的profiling功能是关闭的  </span></div><div class="line"><span class="keyword">set</span> profiling=<span class="number">1</span>  <span class="comment">-- 打开当前session的profiling功能</span></div></pre></td></tr></table></figure></p>
<h5 id="profiling的使用"><a href="#profiling的使用" class="headerlink" title="profiling的使用"></a><em>profiling的使用</em></h5><h6 id="查询当前session的profiling的概要信息"><a href="#查询当前session的profiling的概要信息" class="headerlink" title="查询当前session的profiling的概要信息"></a><em>查询当前session的profiling的概要信息</em></h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以使用 show profiles命令获取当前session所执行的sql的概要信息：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_profiling_show.png" alt=""></p>
<h6 id="profiling详解-1"><a href="#profiling详解-1" class="headerlink" title="profiling详解"></a><em>profiling详解</em></h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;profiling的语法如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SHOW</span> PROFILE [<span class="keyword">type</span> [, <span class="keyword">type</span>] ... ]  </div><div class="line">    [<span class="keyword">FOR</span> <span class="keyword">QUERY</span> n]  </div><div class="line">    [<span class="keyword">LIMIT</span> <span class="keyword">row_count</span> [<span class="keyword">OFFSET</span> <span class="keyword">offset</span>]]  </div><div class="line"><span class="keyword">type</span>:  </div><div class="line">    ALL  </div><div class="line">  | <span class="keyword">BLOCK</span> IO  </div><div class="line">  | <span class="keyword">CONTEXT</span> SWITCHES  </div><div class="line">  | CPU  </div><div class="line">  | IPC  </div><div class="line">  | <span class="keyword">MEMORY</span>  </div><div class="line">  | PAGE FAULTS  </div><div class="line">  | <span class="keyword">SOURCE</span>  </div><div class="line">  | SWAPS</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用示例：<br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_profiling.png" alt=""><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;结果说明：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在使用profiling查看sql的详细执行计划的时候，主要关注的是前两列即：status和duration<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;status 表示sql的执行状态和 show full process list 查看到的状态一致<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;duration 表示每个状态执行的时间 可以看到sql的主要执行时间消耗在哪里<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其次需要关注的是cup，io,swap的详细信息<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cup表示 cpu的消耗时间<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swap表示机器的swap情况<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;io表示io的消耗情况</p>
<h2 id="无效索引"><a href="#无效索引" class="headerlink" title="无效索引"></a><em>无效索引</em></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在很多时候MySQL的表建立了索引，并且在查询条件中也使用了索引进行筛选，但是并不一定会使用到索引，例如下面的几种情况。</p>
<h3 id="筛选条件包含了隐式转换"><a href="#筛选条件包含了隐式转换" class="headerlink" title="筛选条件包含了隐式转换"></a><em>筛选条件包含了隐式转换</em></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面的例子中，name字段添加了唯一索引，但是name字段的类型是varchar类型的，而筛选添加时int类型，发生了隐式转换，所以走全表扫描。这里比较隐晦。在上周有一个项目分析酒店订单的时候，本来hive中的酒店订单包含了酒店项目的所有订单，订单id是varchar类型的，而我们需要统计QTA中参加某一个活动的订单，需要查询QTA的订单详情库，（QTA订单详情是hive中订单的子集）里面的订单ID是long类型的，最开始查询的时候就直接在一个表查询完后再另外一个表查询，结果看到一条简单的sql执行起来巨慢。最后分析原因就定位到了这个上面。<br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_explain_convert_all.png" alt=""></p>
<h3 id="不支持函数式索引"><a href="#不支持函数式索引" class="headerlink" title="不支持函数式索引"></a><em>不支持函数式索引</em></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;age字段上面添加了非唯一索引，但是使用了绝对值函数，所以age字段上面的索引就无法使用了。这个在处理日期的时候经常遇到这样的坑。<br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_explian_function_all.png" alt=""></p>
<h3 id="索引扫描的代价大于直接全表扫描"><a href="#索引扫描的代价大于直接全表扫描" class="headerlink" title="索引扫描的代价大于直接全表扫描"></a><em>索引扫描的代价大于直接全表扫描</em></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果只有索引过滤的数据比较少，那么会直接走全表扫描，因为使用索引的时候会先扫描一遍索引，然后根据扫描到的索引回表找到所需要的数据，这样扫描的效率其实更低，所以直接走全表扫描。<br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_explian_all_index.png" alt=""></p>
<h3 id="使用“-”前缀匹配的时候"><a href="#使用“-”前缀匹配的时候" class="headerlink" title="使用“%”前缀匹配的时候"></a><em>使用“%”前缀匹配的时候</em></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name字段添加了唯一索引 但是使用‘%’作为前缀匹配条件，所以不使用索引，直接走全表扫描。<br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_explian_all_like.png" alt=""></p>
<h3 id="复合索引非左前缀匹配"><a href="#复合索引非左前缀匹配" class="headerlink" title="复合索引非左前缀匹配"></a><em>复合索引非左前缀匹配</em></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在使用复合索引的时候 如果不是使用的左前缀筛选条件 则不会使用索引，还是会全表扫描。</p>
<h3 id="or筛选添加前后都有索引的时候才会走索引"><a href="#or筛选添加前后都有索引的时候才会走索引" class="headerlink" title="or筛选添加前后都有索引的时候才会走索引"></a><em>or筛选添加前后都有索引的时候才会走索引</em></h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在使用or作为筛选条件的时候，or的前后筛选条件都必须添加索引 这样才能使用索引 否则 整条sql都无法使用索引。<br><img src="http://7xutce.com1.z0.glb.clouddn.com/mysql_explain_all_or.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 索引优化 </tag>
            
            <tag> 慢查询分析 </tag>
            
            <tag> 索引分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mybatis如何返回Map而不是List<Map>]]></title>
      <url>/2016/05/28/mybatis-return-map/</url>
      <content type="html"><![CDATA[<h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><p>在使用Mybatis的时候，有时候我们会有这么一种需求：我们希望通过Mybatis查询某一个表返回的结果是一个Map（HashMap），而这个Map的Key是表的一个字段，Value是另一个字段。然而当我们按照Mybatis的做法，指定查询Mapper语句的resultType为map时返回的结果是一个List<map>。本文的例子将采用一个简单的方法，直接返回map。<a id="more"></a><br>     主要思路是：<br>        1 定义一个注解，这个注解作用于方法之上。<br>        2 定义一个mybatis的插件，这个插件是一个拦截器，拦截所有的请求，然后判断这个请求方法上面有没有第一步定义的注解。<br>        3 如果没有第一个定义的注解，则方法继续执行<br>        4 如果有第一步定义的注解。则表示该方法需要返回一个map，就获取mybatis的返回结果。遍历整个结果将，结果集封装成map返回。<br>     有如下几个问题需要读者注意：<br>        因为mybatis没有提供一些内部类的访问接口，所以如下教程的内部类都是根据类名通过反射获取的，如果mybatis升级，并且改变了方法或者类的名称，这个代码就会出现不可预见的问题。不过mybatis升级了这么多版本也没见更改方法名称的改动出现。而且mybatis提供的官方插件也是通过反射裸写方法名获取的，这个问题出现的概率不大。但是如果出现问题，读者应该需要知道这是一个排查点。</map></p>
<h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><h3 id="注解的定义"><a href="#注解的定义" class="headerlink" title="注解的定义"></a>注解的定义</h3><p>   说明：定义注解，只是起一个标识作用，标识该方法需要返回map对象，如果读者有其他的标识方法也是可以的。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.qunar.des.baofang.common.interceptor;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.\*;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by guochenglai on 5/18/16.</div><div class="line"> */</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD,ElementType.TYPE&#125;)</div><div class="line"><span class="meta">@Inherited</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MapResult &#123;</div><div class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="插件（拦截器）的编写"><a href="#插件（拦截器）的编写" class="headerlink" title="插件（拦截器）的编写"></a>插件（拦截器）的编写</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.qunar.des.baofang.common.interceptor;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.sql.ResultSet;</div><div class="line"><span class="keyword">import</span> java.sql.Statement;</div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.executor.resultset.DefaultResultSetHandler;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.executor.resultset.ResultSetHandler;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.MappedStatement;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.*;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.qunar.des.baofang.common.util.ReflectUtil;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by guochenglai on 5/18/16.</div><div class="line"> */</div><div class="line"><span class="meta">@Intercepts</span>(<span class="meta">@Signature</span>(method=<span class="string">"handleResultSets"</span>, type=ResultSetHandler.class, args=&#123;Statement.class&#125;))</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        Object target = invocation.getTarget();</div><div class="line">        DefaultResultSetHandler defaultResultSetHandler = (DefaultResultSetHandler) target;</div><div class="line">        <span class="comment">//这里通过反射，根据类名称来获取内部类，如果出现变更，则需要修改，不过mybatis的插件目前都是这样一种情况</span></div><div class="line">        MappedStatement mappedStatement = ReflectUtil.getFieldValue(defaultResultSetHandler, <span class="string">"mappedStatement"</span>);</div><div class="line"></div><div class="line">        String className = StringUtils.substringBeforeLast(mappedStatement.getId(), <span class="string">"."</span>);</div><div class="line">        String methodName = StringUtils.substringAfterLast(mappedStatement.getId(), <span class="string">"."</span>);</div><div class="line"></div><div class="line">        Method[] methods = Class.forName(className).getDeclaredMethods();</div><div class="line">        <span class="keyword">if</span> (methods == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> invocation.proceed();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//找到需要执行的method 注意这里是根据方法名称来查找，如果出现方法重载，需要认真考虑</span></div><div class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</div><div class="line">            <span class="keyword">if</span> (methodName.equalsIgnoreCase(method.getName())) &#123;</div><div class="line">                <span class="comment">//如果添加了注解标识，就将结果转换成map</span></div><div class="line">                MapResult map = method.getAnnotation(MapResult.class);</div><div class="line">                <span class="keyword">if</span> (map == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> invocation.proceed();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">//进行map的转换</span></div><div class="line">                Statement statement = (Statement) invocation.getArgs()[<span class="number">0</span>];</div><div class="line"></div><div class="line">                <span class="keyword">return</span> result2Map(statement);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> invocation.proceed();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Plugin.wrap(target, <span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">result2Map</span><span class="params">(Statement statement)</span> <span class="keyword">throws</span> Throwable</span>&#123;</div><div class="line">        ResultSet resultSet = statement.getResultSet();</div><div class="line">        <span class="keyword">if</span> (resultSet == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        List&lt;Object&gt; resultList = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</div><div class="line"></div><div class="line">        Map&lt;Object, Object&gt; map = <span class="keyword">new</span> HashMap&lt;Object, Object&gt;();</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (resultSet.next()) &#123;</div><div class="line">            map.put(resultSet.getObject(<span class="number">1</span>), resultSet.getObject(<span class="number">2</span>));</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        resultList.add(map);</div><div class="line">        <span class="keyword">return</span> resultList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="插件（拦截器）的编写-1"><a href="#插件（拦截器）的编写-1" class="headerlink" title="插件（拦截器）的编写"></a>插件（拦截器）的编写</h3><pre><code>需要在数据源中指定我们配置的插件（拦截器）否则我们编写的插件是不起作用的。
</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 数据源的配置这里省略  --&gt;</span></div><div class="line"><span class="comment">&lt;!-- session factory --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"reporterSqlSessionFactory"</span> <span class="attr">name</span>=<span class="string">"biMysqlTuanReportSqlSessionFactory"</span></span></div><div class="line">          <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis/reporter-mybatis-config.xml"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"appContextDataSource"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapper/reporter/**/*.xml"</span>/&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 这里指定刚才编写的插件 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"plugins"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.qunar.des.baofang.common.interceptor.MapInterceptor"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- mapper scanner configurer --&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"reportMapperScannerConfigurer"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.qunar.des.baofang"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"annotationClass"</span> <span class="attr">value</span>=<span class="string">"com.qunar.des.baofang.common.datasource.DataSource"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"reporterSqlSessionFactory"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"nameGenerator"</span> <span class="attr">ref</span>=<span class="string">"defaultNameGenerator"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="在需要返回map的方法上添加注解"><a href="#在需要返回map的方法上添加注解" class="headerlink" title="在需要返回map的方法上添加注解"></a>在需要返回map的方法上添加注解</h3><p>   在需要返回map的方法之上添加注解，这样我们的拦截器就能拦截这个方法。并将结果转换成map返回。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.qunar.des.baofang.reporter.dao.prepay;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.qunar.des.baofang.common.datasource.DataSource;</div><div class="line"><span class="keyword">import</span> com.qunar.des.baofang.common.interceptor.MapResult;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by guochenglai on 5/18/16.</div><div class="line"> */</div><div class="line"><span class="meta">@DataSource</span>(<span class="string">"baofangDataSource"</span>)</div><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PrepayCommentMapper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@MapResult</span>(<span class="string">""</span>)</div><div class="line">    <span class="function">Map&lt;Long, String&gt; <span class="title">queryAllSupplierComment</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="mapper示例"><a href="#mapper示例" class="headerlink" title="mapper示例"></a>mapper示例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.qunar.des.baofang.reporter.dao.prepay.PrepayCommentMapper"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryAllSupplierComment"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></div><div class="line">        SELECT supplier_id,supplier_comment</div><div class="line">        FROM  prepay_supplier_coment</div><div class="line">        WHERE is_delete=0</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="测试示例"><a href="#测试示例" class="headerlink" title="测试示例"></a>测试示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.qunar.des.baofang.mapper;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</div><div class="line"><span class="keyword">import</span> com.qunar.des.baofang.reporter.BaseTester;</div><div class="line"><span class="keyword">import</span> com.qunar.des.baofang.reporter.dao.prepay.PrepayCommentMapper;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.annotation.Resource;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by guochenglai on 5/18/16.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrepayCommentMappperTest</span> <span class="keyword">extends</span> <span class="title">BaseTester</span></span>&#123;</div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> PrepayCommentMapper prepayCommentMapper;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryAllSupplierComment</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//这里就可以直接以map来接受返回值了</span></div><div class="line">        Map&lt;Long,String&gt; stringMap = prepayCommentMapper.queryAllSupplierComment();</div><div class="line">        System.out.println(<span class="string">"==============================="</span>);</div><div class="line">        System.out.println(JSON.toJSONString(stringMap));</div><div class="line">        System.out.println(<span class="string">"==============================="</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">===============================</div><div class="line">&#123;2:&quot;dfdf&quot;,3:&quot;体育体育&quot;&#125;</div><div class="line">===============================</div></pre></td></tr></table></figure>
<h3 id="附件ReflectUtil"><a href="#附件ReflectUtil" class="headerlink" title="附件ReflectUtil"></a>附件ReflectUtil</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.qunar.des.baofang.common.util;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.qunar.des.baofang.common.model.NumberConstant;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Field;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by guochenglai on 4/19/16.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectUtil</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ReflectUtil.class);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据反射或者一个对象的方法</div><div class="line">     * <span class="doctag">@param</span> obj</div><div class="line">     * <span class="doctag">@param</span> fieldName</div><div class="line">     * <span class="doctag">@param</span> &lt;T&gt;</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getFieldValue</span><span class="params">(Object obj, String fieldName)</span> </span>&#123;</div><div class="line">        Object result = <span class="keyword">null</span>;</div><div class="line">        Field field = ReflectUtil.getField(obj, fieldName);</div><div class="line">        <span class="keyword">if</span> (field != <span class="keyword">null</span>) &#123;</div><div class="line">            field.setAccessible(<span class="keyword">true</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                result = field.get(obj);</div><div class="line">            &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</div><div class="line">                LOGGER.info(<span class="string">"ReflectUtil getFieldValue cause IllegalArgumentException"</span>,e);</div><div class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e2) &#123;</div><div class="line">                LOGGER.info(<span class="string">"ReflectUtil getFieldValue cause IllegalAccessException"</span>,e2);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (T)result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Field <span class="title">getField</span><span class="params">(Object obj, String fieldName)</span> </span>&#123;</div><div class="line">        Field field = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">for</span> (Class&lt;?&gt; clazz=obj.getClass(); clazz != Object.class; clazz=clazz.getSuperclass()) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                field = clazz.getDeclaredField(fieldName);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</div><div class="line">                LOGGER.info(<span class="string">"ReflectUtil getField cause NoSuchFieldException"</span>,e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> field;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 利用反射 将对象的null中不合理的值设置成null</div><div class="line">     * <span class="doctag">@param</span> object</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setIllegalValueToNull</span><span class="params">(Object object)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        Class&lt;?&gt; clazzType = object.getClass();</div><div class="line">        Field[] fields = clazzType.getDeclaredFields();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (fields == <span class="keyword">null</span> || fields.length == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (Field field : fields) &#123;</div><div class="line">                <span class="comment">//double</span></div><div class="line">                field.setAccessible(<span class="keyword">true</span>);</div><div class="line">                <span class="keyword">if</span> (Double.class.equals(field.getType())) &#123;</div><div class="line">                    <span class="keyword">if</span> ((Double)field.get(object) == NumberConstant.ILLEGAL) &#123;</div><div class="line">                        field.set(object, <span class="keyword">null</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            LOGGER.error(<span class="string">"handle illegal value for target class cause exception "</span>, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 利用反射将对象的null值设置成对应类型的默认值</div><div class="line">     * <span class="doctag">@param</span> object</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fillDefaultValue</span><span class="params">(Object object)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Class&lt;?&gt; clazzType = object.getClass();</div><div class="line">        Field[] fields = clazzType.getDeclaredFields();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (fields != <span class="keyword">null</span> &amp;&amp; fields.length &gt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">for</span> (Field field : fields) &#123;</div><div class="line">                    field.setAccessible(<span class="keyword">true</span>);</div><div class="line">                    Class&lt;?&gt; type = field.getType();</div><div class="line">                    String typeName = type.getName();</div><div class="line">                    <span class="keyword">if</span> (field.get(object) == <span class="keyword">null</span>) &#123;</div><div class="line">                        <span class="comment">//String</span></div><div class="line">                        <span class="keyword">if</span> (String.class.getName().equals(typeName)) &#123;</div><div class="line">                            field.set(object, <span class="string">""</span>);</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">//int</span></div><div class="line">                        <span class="keyword">if</span> (Integer.class.getName().equals(typeName)) &#123;</div><div class="line">                            field.set(object, <span class="keyword">new</span> Integer(<span class="number">0</span>));</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">//long</span></div><div class="line">                        <span class="keyword">if</span> (Long.class.getName().equals(typeName)) &#123;</div><div class="line">                            field.set(object, <span class="keyword">new</span> Long(<span class="number">0</span>));</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">//double</span></div><div class="line">                        <span class="keyword">if</span> (Double.class.getName().equals(typeName)) &#123;</div><div class="line">                            field.set(object, <span class="keyword">new</span> Double(<span class="number">0.0</span>));</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">//date</span></div><div class="line">                        <span class="keyword">if</span> (Date.class.getName().equals(typeName)) &#123;</div><div class="line">                            field.set(object, <span class="keyword">new</span> Date());</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">//boolean</span></div><div class="line">                        <span class="keyword">if</span> (Boolean.class.getName().equals(typeName)) &#123;</div><div class="line">                            field.set(object, <span class="keyword">new</span> Boolean(<span class="keyword">false</span>));</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">//float</span></div><div class="line">                        <span class="keyword">if</span> (Float.class.getName().equals(typeName)) &#123;</div><div class="line">                            field.set(object,<span class="keyword">new</span> Float(<span class="number">0</span>));</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            LOGGER.error(<span class="string">"set default value for target class cause exception "</span>, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Mybatis </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> Mybatis返回Map </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mac idea(intellij idea)常用快捷键]]></title>
      <url>/2016/05/28/mac-idea-intellij-idea-shortcurt-key/</url>
      <content type="html"><![CDATA[<p>1    切换到左侧列表快捷键  command+1<br>2    新建文件快捷键 control+enter 或者command+n<br>3    自动生成代码 例如getter和setter  control+enter 或者command+n<br>4    查看最近查看的文件 command+e<a id="more"></a><br>5    查看最近修改的文件 command+shift+e<br>6     当前文件中搜索 command+f<br>7     当前文件中替换 command+r<br>8      所有文件中搜索 command+shift+f<br>9      所有文件中替换 command+shift+r<br>10    搜索对象的所有引用 alt+f7<br>11    搜索对象在当前文件中的引用command+f7<br>12    补全常用代码块（live template） command+j<br>13    调出对错误提示的处理方法 fn+alt+enter<br>14    复制上一行到下一行 command+d<br>15     单行注释 command+/<br>16     补全当前行（例如行尾的;）shift+command+enter<br>17     搜索一个类 command+o<br>18     子类实现父类的方法 controller+i<br>19     当前代码段上下移 shift+command+上/下<br>20      当前行上下移 shift+alt+上/下<br>21     重命名类名 shift+f6<br>22     查看某个方法被调用的地方 alt+commant+f7<br>23     查看某个方法定义的地方command+b<br>24     跳到指定行  command+L<br>25     debug运行 shift+command+f9<br>26     直接运行shit+command+f10<br>27    格式化单个文件alt+command+L<br>28    调出settings界面 command+,<br>29    调出本项目的settings界面  command+；<br>30    关闭当前文件 commnd+w<br>31    去除多余import的快捷键 alt+control+o<br>32    竖行横行选择切换 command+shift+8<br>33    列出一个类的方法列表 command+f12<br>34  单词的大小写转换 shift+commend+u</p>
]]></content>
      
        <categories>
            
            <category> Mac常用技巧 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac常用技巧 </tag>
            
            <tag> idea 快捷键 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java学习书籍推荐（Java学习曲线）]]></title>
      <url>/2016/05/26/java-suggest-book/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在刚学习Java语言的时候，就在网上搜索Java学习推荐的书籍，很多人都吧《Java编程思想》作为入门的书籍推荐，我觉得有点不合适，《Java编程思想》讲解的内容比较深入，当时就是听从网上那些大神的推荐就买了这本书，看了几张，觉得太难了。所以就差点放弃了。最近回顾总结了这几年学习编程的历程，就把自己看过的书，和写过的笔记整理了一遍。整理了一份我觉得比较好的书单希望能够对读者有一定的帮助。<br><a id="more"></a>&nbsp;&nbsp;<em>《Java从入门到精通》 作者：李新华</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="2">这是一本小白教程，里面的例子，都是手把手教程，可以说这本书对我入门Java的帮助特别大。视频讲解的非常细致，当时基本是按照视频教程敲完了里面的所有代码，如果刚开始学习Java，这本书必看。当然晚上还有一些其他人的Java教学视频，对新手来说都还不错：韩顺平，孔浩，马士兵。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当当链接：<a href="http://product.dangdang.com/23658092.html" target="_blank" rel="external">http://product.dangdang.com/23658092.html</a></font><br>&nbsp;&nbsp;<em>《head first》系列</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="2">head first系列的书，语言都比较有趣味性。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当当链接：<a href="http://product.dangdang.com/9265169.html" target="_blank" rel="external">http://product.dangdang.com/9265169.html</a></font><br>&nbsp;&nbsp;<em>《Java核心卷一》和《Java核心卷二》</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="2">这两本书算是讲解Java比较全面的，从基本语法入门，到Java多线程、文件、IO、网络、JVM等都有涉及。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当当链接：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;卷一:<a href="http://product.dangdang.com/23362142.html" target="_blank" rel="external">http://product.dangdang.com/23362142.html</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;卷二：<a href="http://product.dangdang.com/23424306.html" target="_blank" rel="external">http://product.dangdang.com/23424306.html</a></font><br>&nbsp;&nbsp;<em>《淘宝技术10年》</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="2">可以看看淘宝的技术发展曲线，里面提到了很多大神级别的人物。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当当链接：<a href="http://product.dangdang.com/23232323.html" target="_blank" rel="external">http://product.dangdang.com/23232323.html</a></font><br>&nbsp;&nbsp;<em>《Java编程思想》</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="2">基本上所有推荐Java书籍的博客，都有这本书的推荐，里面的内容很基础，都是在讲为什么这样。大三下半年一学期就看了这一本书。感觉收获很多。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当当连接：<a href="http://product.dangdang.com/9317290.html" target="_blank" rel="external">http://product.dangdang.com/9317290.html</a></font><br>&nbsp;&nbsp;<em>《shell脚本学习指南》</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="2">每个开发者都应该学习一门脚本语言。可以高效办公，以及查询分析线上问题。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当当链接：<a href="http://product.dangdang.com/20574166.html" target="_blank" rel="external">http://product.dangdang.com/20574166.html</a></font><br>&nbsp;&nbsp;<em>《Python核心编程》第二卷</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="2">如果在公司你不会Python会感觉自己很low。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当当链接：<a href="http://product.dangdang.com/20255354.html" target="_blank" rel="external">http://product.dangdang.com/20255354.html</a></font><br>&nbsp;&nbsp;<em>《深入理解Java虚拟机》 作者：周志明</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="2">学习Java虚拟机的入门书籍，我觉得写的特别好。前面的章节讲解了Java提供的分析问题的工具类。后面部分讲解了JVM运行原理，会解决很多已经知道但是不知道原因的问题。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当当链接：<a href="http://product.dangdang.com/23259731.html" target="_blank" rel="external">http://product.dangdang.com/23259731.html</a></font><br>&nbsp;&nbsp;<em>《Java性能优化权威指南》</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="2">主要讲解JVM的运行原理，可以帮助你写出高效代码。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当当链接：<a href="http://product.dangdang.com/23421069.html" target="_blank" rel="external">http://product.dangdang.com/23421069.html</a></font><br>&nbsp;&nbsp;<em>《Effective Java中文版(第2版)》</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="2">列出了编程过程了重要但是容易被忽略的问题，以及一些编程规则。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当当链接：<a href="http://product.dangdang.com/20459091.html" target="_blank" rel="external">http://product.dangdang.com/20459091.html</a></font><br>&nbsp;&nbsp;<em>《大话设计模式》</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="2">C#语言编写的，但是学习Java的开发人员看起来基本没有问题。包含但是了GoF提出23中设计模式。对三大类设计模式（创建型、结构型、行为型）模式，都有对比分析。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当当链接：<a href="http://product.dangdang.com/20079096.html" target="_blank" rel="external">http://product.dangdang.com/20079096.html</a></font><br>&nbsp;&nbsp;<em>《大型网站架构与Java中间件》</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="2">原淘宝CTO曾宪杰写的，从顶层上介绍了：消息中间件、数据中间件、RPC框架、分布式系统、监控系统几个部分。现在基本上大公司的架构都是这样了。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当当链接：<a href="http://product.dangdang.com/23462041.html" target="_blank" rel="external">http://product.dangdang.com/23462041.html</a></font><br>&nbsp;&nbsp;<em>《Java7 并发编程实战手册》</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="2">适合没有并发编程经验的人看，如果对这个领域有一定的涉猎，就不推荐看了。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当当链接：<a href="http://product.dangdang.com/23413800.html" target="_blank" rel="external">http://product.dangdang.com/23413800.html</a></font><br>&nbsp;&nbsp;<em>《Java并发编程实战》</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="2">早期道格李写过一本书，是基于JDK1.4的，这本书的写作过程也有道格李的参与。将的非常清楚，身边的同事基本人手一本。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当当链接：<a href="http://product.dangdang.com/22606835.html" target="_blank" rel="external">http://product.dangdang.com/22606835.html</a></font><br>&nbsp;&nbsp;<em>《Java并发编程的艺术》</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="2">淘宝方腾飞写的。同时他自己还创办了并发编程网。是对《Java并发编程实战》的补充。讲解的点都非常细。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当当链接：<a href="http://product.dangdang.com/23745571.html" target="_blank" rel="external">http://product.dangdang.com/23745571.html</a></font><br>&nbsp;&nbsp;<em>《Java虚拟机并发编程》</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="2">现在的并发编程解决的问题，都是围绕有状态的bean来研究的，基本很难再有突破。所以这本书就另辟蹊径，基于sclca、closure等新语言讲解了消除有状态bean之后，基于消息传递的并发编程<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当当链接：<a href="http://product.dangdang.com/23239786.html" target="_blank" rel="external">http://product.dangdang.com/23239786.html</a></font><br>&nbsp;&nbsp;<em>《算法导论》</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="2">如何成为一个优秀的工程师，第一种方法是在一线编程10年，第二种方法是，在一线编程2年，并学习好一门算法。这本书是MIT的本科和研究生教材，内容比较深入，对数学基础要求很高，当然也可以去网易公开课去看看他们上课的视频。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当当链接：<a href="http://product.dangdang.com/22927209.html" target="_blank" rel="external">http://product.dangdang.com/22927209.html</a></font><br>&nbsp;&nbsp;<em>《编译原理》</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="2">学习JVM的时候，严重感觉到了这个方面的短板。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当当链接：<a href="http://product.dangdang.com/20427584.html" target="_blank" rel="external">http://product.dangdang.com/20427584.html</a></font><br>&nbsp;&nbsp;<em>《深入理解计算机系统》</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="2">当当链接：<a href="http://product.dangdang.com/20968472.html" target="_blank" rel="external">http://product.dangdang.com/20968472.html</a></font><br>&nbsp;&nbsp;<em>《TCP/IP详解》</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="2">当当链接：<a href="http://product.dangdang.com/1101680932.html" target="_blank" rel="external">http://product.dangdang.com/1101680932.html</a></font><br>&nbsp;&nbsp;<em>《tomcat权威指南》</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="2">讲解了tomcat的工作原理，可以助你弄清楚一个web服务器的工作流程，以及常见的配置工作。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当当链接：<a href="http://product.dangdang.com/20702017.htm" target="_blank" rel="external">http://product.dangdang.com/20702017.htm</a></font><br>&nbsp;&nbsp;<em>《深入浅出MySQL》</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="2">网易公司的DBA写的，基本上涉及了企业开发的各个方面，知识点是MySQL官方文档的浓缩。目前MySQL官方文档没有中文版，如果英文水平比较高建议直接看官方文档：<a href="https://dev.mysql.com/doc/refman/5.6/en/" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.6/en/</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当当链接：<a href="http://product.dangdang.com/23399217.html" target="_blank" rel="external">http://product.dangdang.com/23399217.html</a></font><br>&nbsp;&nbsp;<em>《高性能MySQL》</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="2">对MySQL的索引、MACC、事物等都有详细的分析，必看。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当当链接：<a href="http://product.dangdang.com/23214590.html" target="_blank" rel="external">http://product.dangdang.com/23214590.html</a></font><br>&nbsp;&nbsp;<em>《MySQL技术内幕：InnoDB存储引擎》</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="2">国人写的，基于Innodb存储引擎讲解了，MySQL的索引和事物，已经Innodb存储引擎的实现原理。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当当链接：<a href="http://product.dangdang.com/23255589.html" target="_blank" rel="external">http://product.dangdang.com/23255589.html</a></font><br>&nbsp;&nbsp;<em>《MySQL技术内幕》</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="2">当当链接：<a href="http://product.dangdang.com/23727515.html" target="_blank" rel="external">http://product.dangdang.com/23727515.html</a></font><br>&nbsp;&nbsp;<em>《spring 3.x企业开发实战》</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="2">公司同事人手一本。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当当链接：<a href="http://product.dangdang.com/22605701.html" target="_blank" rel="external">http://product.dangdang.com/22605701.html</a></font><br>&nbsp;&nbsp;<em>《spring实战》</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="2">和3.x那本书可以一起看。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当当链接：<a href="http://product.dangdang.com/23931418.html" target="_blank" rel="external">http://product.dangdang.com/23931418.html</a></font><br>&nbsp;&nbsp;<em>《Spring源码深度分析》</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="2">学习一些spring的实现原理。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当当链接：<a href="http://product.dangdang.com/23329703.html" target="_blank" rel="external">http://product.dangdang.com/23329703.html</a></font><br>&nbsp;&nbsp;<em>《Java虚拟机规范》</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="2">整本书将的都是Java虚拟机的指令，看着我好累。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当当链接：<a href="http://product.dangdang.com/23382942.html" target="_blank" rel="external">http://product.dangdang.com/23382942.html</a></font><br>&nbsp;&nbsp;<em>《从Paxos到Zookeeper》</em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size="2">学习ZK都会看吧。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当当链接：<a href="http://product.dangdang.com/23625430.html" target="_blank" rel="external">http://product.dangdang.com/23625430.html</a></font></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java书籍推荐 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[第一篇博客]]></title>
      <url>/2016/05/24/first-blog/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;其实写博客有一段时间了，但是为什么这篇文章的题目是第一篇博客呢？因为想了好久没有想到在自己的个人网站上第一篇文章放什么。以前是在CSDN上面写博客。基本上都是自己的技术总结和分享，我的CSND博客地址是：<a href="http://blog.csdn.net/gcl272633743" target="_blank" rel="external">http://blog.csdn.net/gcl272633743</a>，但是感觉CSDN有两个问题我比较不爽的地方：<a id="more"></a><br>&nbsp;&nbsp;&nbsp;&nbsp;1  广告比较多，毕竟是一个商业公司。<br>&nbsp;&nbsp;&nbsp;&nbsp;2 发表的文章不能预览，而且文章的审核机制实在不敢恭维。<br><!-- more -->&nbsp;&nbsp;&nbsp;&nbsp;所以，很早都有搭建自己博客的想法，但是在去哪儿网工作这段时间一直比较忙。所以一直没有动手，直到和携程合并了，现在的事情终于少一点了，最后终于在今天将自己的博客推上线了（其实也不能说上线，就是博客的基本功能已经开发完成了，还有很多功能会在后续补充完善）。 随便写点，纪念一下。<br>&nbsp;&nbsp;&nbsp;&nbsp;本系统是基于开源代码修改而来的。感谢那些乐于分享而又牛逼的大神。所以我决定也将自己的博客开源出来，供大家学习交流。当我觉得我的博客系统已经比较满意的时候，会后续的文章之中，公开本博客的源代码，并写一篇文章详细介绍本博客的搭建方法。<br><br>好了，更新一篇。就到这里吧。over！！！</p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
